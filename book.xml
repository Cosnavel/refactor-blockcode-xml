<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "studybook.dtd" [

<!ENTITY nbsp   "&#x00A0;"> <!-- no-break space = non-breaking space, U+00A0 ISOnum -->
<!ENTITY shy    "&#x00AD;"> <!-- soft hyphen  -->
<!ENTITY thinsp "&#x202F;"> <!-- narrow no-break space -->
<!ENTITY zwsp   "&#x200B;"> <!-- zero width space for prince, see http://www.princexml.com/bb/viewtopic.php?f=4&t=1160&hilit=hyphens -->

<!ENTITY ndash  "&#8211;"> <!-- – en dash -->
<!ENTITY mdash  "&#x2014;"> <!-- em dash, U+2014 ISOpub -->
<!ENTITY hellip "&#8230;"> <!-- horizontal ellipsis = three dot leader, U+2026 ISOpub  -->
<!ENTITY times  "&#215;">  <!-- multiplication sign -->

<!ENTITY darr   "&#8595;"> <!-- downwards arrow -->
<!ENTITY larr   "&#8592;"> <!-- leftwards arrow -->
<!ENTITY uarr   "&#8593;"> <!-- upwards arrow -->
<!ENTITY rarr   "&#8594;"> <!-- rightwards arrow -->

<!ENTITY rsquo   "&#8217;"> <!-- right single quotation mark (apostrophe) -->
<!ENTITY lsquo   "&#8216;"> <!-- left single quotation mark -->
<!ENTITY raquo  "&#187;">  <!-- right pointing double angle quotation mark -->
<!ENTITY laquo  "&#171;">  <!-- left pointing double angle quotation mark -->
<!ENTITY rsaquo  "&#8250;"> <!-- › single right-pointing angle quotation mark -->
<!ENTITY lsaquo  "&#8249;"> <!-- ‹ single left-pointing angle quotation mark -->
<!ENTITY bdquo  "&#8222;"> <!-- double curved low 9 quotation mark -->
<!ENTITY ldquo  "&#8220;"> <!-- left double curved quotation mark -->
<!ENTITY rdquo  "&#8221;"> <!-- right double curved quotation mark -->

]><html lang="de">

    <!-- TODOs:

        * Lösungen der Zusatzübungen, bzw. evtl. auch ein paar der Zusatzübungen streichen
        * Überprüfen sämtlicher Prüfungsfragen
        * Weitere inhaltliche Modernisierungen, z.B. ein paar Worte zu NoSQL und der Lage bei relationalen Datenbanken, Nennen von Liquibase, und anderen Migrationslösungen
        * Entwickeln einiger neuer Prüfungsfragen, Ziel: ca. 3 public und 3 non-public pro Lektion.
        * Evtl. Wechsel auf MariaDB (via Docker?)
    -->

    <head>
        <link type="text/css" href="authoring.css"/>
        <title>Datenbanken &amp; SQL für Einsteiger</title>
        <subtitle>Datenbankdesign und MySQL in der Praxis</subtitle>
        <trainingcourse>Certified PHP Developer</trainingcourse>
        <author>Marco Emrich</author>
        <publication_year>2020</publication_year>
        <cover_image_credits>iStock/traffic_analyzer</cover_image_credits>
        <cover_designer>Frank Schad</cover_designer>
        <layout_typesetting>Frank Schad</layout_typesetting>
        <original_publication_year>2013</original_publication_year>
        <indexterms>
            <!-- Manche Indexterms sind auskommentiert, da das DMS zu Zeit noch nicht damit umgehen kann,
        außerdem müssen alle Pluralverwendungen auf Singular korrigiert werden, sobal das DMS damit klar kommt -->
            <indexterm>1:n-Beziehung</indexterm>
            <indexterm>Abfragesprache</indexterm>
            <indexterm>Active Record</indexterm>
            <!--indexterm>ActiveRecord (Ruby)</indexterm-->
            <indexterm>ADD</indexterm>
            <indexterm>Ad-Hoc-Querys</indexterm>
            <indexterm>Adjektive</indexterm>
            <indexterm>Aggregationsfunktion</indexterm>
            <indexterm>Agile Manifesto</indexterm>
            <indexterm>agile Softwareentwicklung</indexterm>
            <indexterm>agile Vorgehensmodelle</indexterm>
            <indexterm>ALTER</indexterm>
            <indexterm>alternate keys</indexterm>
            <indexterm>Alternativschlüssel</indexterm>
            <indexterm>Scott Ambler</indexterm>
            <indexterm>American Psychological Association</indexterm>
            <indexterm>AND</indexterm>
            <indexterm>Anforderungen</indexterm>
            <indexterm>Anfrage</indexterm>
            <indexterm>APA</indexterm>
            <indexterm>Apache</indexterm>
            <indexterm>APA-Style</indexterm>
            <indexterm>artificial key</indexterm>
            <indexterm>AS</indexterm>
            <indexterm>ASC</indexterm>
            <!--<indexterm>Attribut</indexterm>-->
            <indexterm>Ausdruck</indexterm>
            <indexterm>Auszeichungssprachen</indexterm>
            <indexterm>AUTO_INCREMENT</indexterm>
            <indexterm>Autoinkrement</indexterm>
            <indexterm>AVG</indexterm>
            <indexterm>Backup</indexterm>
            <indexterm>Backus-Naur-Form</indexterm>
            <indexterm>BDUF</indexterm>
            <indexterm>Bennington</indexterm>
            <indexterm>Benutzerregistrierung</indexterm>
            <indexterm>Beziehungen</indexterm>
            <indexterm>Bibliothek</indexterm>
            <indexterm>Big Design Up Front</indexterm>
            <indexterm>Blog</indexterm>
            <!--indexterm>BNF</indexterm-->
            <!--indexterm>BNF von ALTER</indexterm>
      <indexterm>BNF von CREATE DATABASE</indexterm>
      <indexterm>BNF von CREATE TABLE</indexterm>
      <indexterm>BNF von DELETE</indexterm>
      <indexterm>BNF von DROP DATABASE</indexterm>
      <indexterm>BNF von DROP TABLE</indexterm>
      <indexterm>BNF von INSERT</indexterm>
      <indexterm>BNF von SELECT</indexterm>
      <indexterm>BNF von SHOW DATABASES</indexterm>
      <indexterm>BNF von UPDATE</indexterm-->
            <indexterm>Body</indexterm>
            <indexterm>BOOLEAN</indexterm>
            <indexterm>Bruner</indexterm>
            <indexterm>C</indexterm>
            <indexterm>C. J. Date</indexterm>
            <indexterm>CHANGE</indexterm>
            <indexterm>CMS</indexterm>
            <indexterm>Codd</indexterm>
           <!-- <indexterm>Codd-Rules</indexterm>-->
            <indexterm>column</indexterm>
            <indexterm>compound key</indexterm>
            <indexterm>CONCAT</indexterm>
            <indexterm>Content Management System</indexterm>
            <indexterm>Control Panel</indexterm>
            <indexterm>COUNT</indexterm>
            <indexterm>CREATE TABLE</indexterm>
            <indexterm>Crystal</indexterm>
            <indexterm>Data Control Language</indexterm>
            <indexterm>Data Definition Language</indexterm>
            <indexterm>Data Manipulation Language</indexterm>
            <indexterm>Database Administration Statements</indexterm>
            <indexterm>DATE</indexterm>
            <indexterm>Datei</indexterm>
            <!--<indexterm>Datenbank</indexterm>-->
            <indexterm>Datenbank-Management-System</indexterm>
            <indexterm>Datenbank-Clients</indexterm>
            <indexterm>Datenbankdesign</indexterm>
            <!--indexterm>Datenbankentwurf</indexterm-->
            <indexterm>Datenbankjargon</indexterm>
            <indexterm>Datenbankmodell</indexterm>
            <!--indexterm>Datenbank-Server</indexterm-->
            <indexterm>Datenintegrität</indexterm>
            <indexterm>Datensicherheit</indexterm>
            <indexterm>Datentyp</indexterm>
            <indexterm>DATETIME</indexterm>
            <indexterm>DB</indexterm>
            <indexterm>DB-Clients</indexterm>
<!--            <indexterm>DBMS</indexterm>-->
            <indexterm>DCL</indexterm>
            <indexterm>DDL</indexterm>
            <indexterm>DECIMAL</indexterm>
            <indexterm>DELETE</indexterm>
            <indexterm>DESC</indexterm>
            <indexterm>Design</indexterm>
            <indexterm>Die drei Bären</indexterm>
            <indexterm>Dienst</indexterm>
            <indexterm>DISTINCT</indexterm>
            <indexterm>Distribution</indexterm>
            <indexterm>Distributionen</indexterm>
            <indexterm>Django</indexterm>
            <indexterm>DML</indexterm>
            <indexterm>Doctrine</indexterm>
            <indexterm>Dokumentation</indexterm>
            <indexterm>Domain-Modellierung</indexterm>
            <indexterm>Domänenmodell</indexterm>
            <indexterm>Draw.io</indexterm>
            <indexterm>DROP</indexterm>
            <indexterm>Dump</indexterm>
            <indexterm>dynamische Webseiten</indexterm>
            <indexterm>Embedded Databases</indexterm>
            <indexterm>Entities</indexterm>
            <indexterm>Entity</indexterm>
            <indexterm>Entity-Relationship-Diagramm</indexterm>
            <indexterm>Entwicklungsumgebung</indexterm>
            <indexterm>ERD</indexterm>
            <indexterm>Erhebungstechniken</indexterm>
            <indexterm>Extreme Programming</indexterm>
            <indexterm>XP</indexterm>
            <indexterm>FALSE</indexterm>
            <indexterm>Feature Driven Development</indexterm>
            <indexterm>FDD</indexterm>
            <indexterm>foreign key</indexterm>
            <indexterm>Forum</indexterm>
            <indexterm>Martin Fowler</indexterm>
            <indexterm>Fremdschlüssel</indexterm>
            <indexterm>FROM</indexterm>
            <indexterm>Funktionen</indexterm>
            <indexterm>Generieren</indexterm>
            <indexterm>Gleichheitsoperator</indexterm>
            <indexterm>Goldlöckchen-Lösung</indexterm>
            <indexterm>GUI</indexterm>
            <indexterm>Heading</indexterm>
            <indexterm>hierarchisches Modell</indexterm>
            <!--indexterm>HSQL-DB</indexterm-->
            <indexterm>IBM</indexterm>
            <indexterm>ICONIX</indexterm>
            <indexterm>immutable</indexterm>
            <indexterm>Industriestandard</indexterm>
            <indexterm>Informationssysteme</indexterm>
            <indexterm>Inkrement</indexterm>
            <indexterm>INSERT</indexterm>
            <indexterm>Installation</indexterm>
            <indexterm>INTEGER</indexterm>
            <indexterm>Integrität</indexterm>
            <indexterm>Integritätsprüfungen</indexterm>
            <indexterm>Internationalisierung</indexterm>
            <indexterm>IS NOT NULL</indexterm>
            <indexterm>IS NULL</indexterm>
            <indexterm>ISO/IEC 14077-Standard</indexterm>
            <indexterm>Iteration</indexterm>
            <indexterm>iterativ-inkrementell</indexterm>
            <indexterm>Java</indexterm>
            <indexterm>JOIN</indexterm>
            <indexterm>Kardinalität</indexterm>
            <indexterm>Key-Spalte</indexterm>
            <indexterm>Klammerung</indexterm>
            <indexterm>Klasse</indexterm>
            <indexterm>Klassendiagramm</indexterm>
            <indexterm>Klassenmodell</indexterm>
            <indexterm>Kommandozeilenclient</indexterm>
            <indexterm>konsistent</indexterm>
            <indexterm>Konsole</indexterm>
            <indexterm>Konzept-Modell</indexterm>
            <indexterm>Körper</indexterm>
            <indexterm>künstlicher Schlüssel</indexterm>
            <indexterm>Lastenheft</indexterm>
            <indexterm>legacy applications</indexterm>
            <indexterm>legacy data</indexterm>
            <indexterm>Lektionen</indexterm>
            <indexterm>Lerneinheiten</indexterm>
            <indexterm>Library</indexterm>
            <indexterm>LIKE</indexterm>
            <indexterm>LIMIT</indexterm>
            <indexterm>Locks</indexterm>
            <indexterm>Manipulation</indexterm>
            <indexterm>MAX</indexterm>
            <indexterm>Mehrbenutzerfähigkeit</indexterm>
            <indexterm>Menge</indexterm>
            <indexterm>Mengenschreibweise</indexterm>
            <indexterm>Metasprache</indexterm>
            <indexterm>Methoden</indexterm>
            <indexterm>Migration</indexterm>
            <indexterm>Migrationsskript</indexterm>
            <indexterm>MIN</indexterm>
            <indexterm>Modellierung</indexterm>
            <indexterm>Modellierungssprache</indexterm>
            <indexterm>Modellierungstätigkeiten</indexterm>
            <indexterm>Muster</indexterm>
            <indexterm>my.cnf</indexterm>
            <!--<indexterm>MySQL</indexterm>-->
            <indexterm>MySQL AB</indexterm>
            <indexterm>MySQL Utility Statements</indexterm>
            <indexterm>n:m-Beziehung</indexterm>
            <indexterm>Nachrichtensystem</indexterm>
            <indexterm>Netzwerkmodell</indexterm>
            <indexterm>nicht existent</indexterm>
            <indexterm>Nichtterminal</indexterm>
            <indexterm>Nomen</indexterm>
            <indexterm>NOT</indexterm>
            <indexterm>NOT NULL</indexterm>
            <indexterm>NOW</indexterm>
            <indexterm>NULL-Marker</indexterm>
            <indexterm>NULL-Operatoren</indexterm>
            <indexterm>Object Constraint Language</indexterm>
            <indexterm>Object Management Group</indexterm>
            <indexterm>Objektmodellierung</indexterm>
            <indexterm>Objekt-Orientierung</indexterm>
            <!--indexterm>objekt-relationale Kluft</indexterm-->
            <indexterm>objekt-relationales Mapping</indexterm>
            <indexterm>OCL</indexterm>
            <!--indexterm>Oder (BNF)</indexterm-->
            <indexterm>Offset</indexterm>
            <indexterm>OMG</indexterm>
            <indexterm>Online-Shops</indexterm>
            <indexterm>OpenSource</indexterm>
            <indexterm>Operatoren</indexterm>
            <indexterm>arithmetische Operatoren</indexterm>
            <indexterm>logische Operatoren</indexterm>
            <indexterm>Vergleichsoperatoren</indexterm>
            <indexterm>Option</indexterm>
            <indexterm>OR</indexterm>
            <indexterm>Oracle</indexterm>
            <indexterm>ORDER BY</indexterm>
            <indexterm>ORM</indexterm>
            <indexterm>OR-Mapper</indexterm>
            <indexterm>Pattern</indexterm>
            <indexterm>Performance</indexterm>
            <indexterm>Persistenz</indexterm>
            <indexterm>Pflichtenheft</indexterm>
            <indexterm>Phasenmodell</indexterm>
            <indexterm>PHP</indexterm>
            <indexterm>physisches Datenmodell</indexterm>
            <indexterm>Planning Game</indexterm>
            <indexterm>Platzhalter</indexterm>
            <indexterm>Point-In-Time-Recovery</indexterm>
            <indexterm>PostgreSQL</indexterm>
            <indexterm>Prädikatenlogik</indexterm>
            <indexterm>Praktiken</indexterm>
            <indexterm>Präzedenz</indexterm>
            <indexterm>Primärschlüssel</indexterm>
            <indexterm>PRIMARY KEY</indexterm>
            <indexterm>primary key</indexterm>
            <indexterm>Produktdatenbanken</indexterm>
            <indexterm>Programmiersprache</indexterm>
            <indexterm>Python</indexterm>
            <indexterm>Quellen</indexterm>
            <indexterm>Query</indexterm>
            <indexterm>RDM</indexterm>
            <indexterm>record</indexterm>
            <indexterm>Refactoring</indexterm>
            <indexterm>Referenzen</indexterm>
            <indexterm>relationale Datenbank</indexterm>
            <indexterm>relationales Datenbankmodell</indexterm>
            <indexterm>Relationen</indexterm>
            <indexterm>Relationship</indexterm>
            <indexterm>Relationsvariablen</indexterm>
            <indexterm>RENAME</indexterm>
            <indexterm>rekursive Definition</indexterm>
            <indexterm>Replikation</indexterm>
            <indexterm>Requirements Engineering</indexterm>
            <indexterm>Richtlinien</indexterm>
            <indexterm>ROUND</indexterm>
            <indexterm>row</indexterm>
            <indexterm>Winston W. Royce</indexterm>
            <indexterm>Ruby</indexterm>
            <indexterm>Schlüsselwort</indexterm>
            <indexterm>Scrum</indexterm>
            <indexterm>Security</indexterm>
            <indexterm>SELECT</indexterm>
            <!--indexterm>SELECT-FROM-WHERE-Block</indexterm-->
            <indexterm>Serversystem</indexterm>
            <indexterm>Service</indexterm>
            <indexterm>SHOW COLUMNS</indexterm>
            <indexterm>SHOW TABLES</indexterm>
            <indexterm>Social Networks</indexterm>
            <indexterm>Sortierung</indexterm>
            <indexterm>Spalte</indexterm>
            <indexterm>Speicherplatz</indexterm>
            <indexterm>Sperren</indexterm>
            <indexterm>Spiralcurriculum</indexterm>
            <!--<indexterm>SQL</indexterm>-->
            <indexterm>Fehler</indexterm>
            <indexterm>SQLite</indexterm>
            <indexterm>SQL-Standard</indexterm>
            <indexterm>statische Webseiten</indexterm>
            <indexterm>Stille Post</indexterm>
            <indexterm>Strings</indexterm>
            <indexterm>Struktur</indexterm>
            <indexterm>SUBSTR</indexterm>
            <indexterm>Suchabfragen</indexterm>
            <indexterm>SUM</indexterm>
            <indexterm>Symfony</indexterm>
            <indexterm>synthetic key</indexterm>
            <!--<indexterm>Tabelle</indexterm>-->
            <indexterm>Tabellenkalkulation</indexterm>
            <indexterm>Terminal</indexterm>
            <indexterm>TEXT</indexterm>
            <indexterm>Textdateien</indexterm>
            <indexterm>Textverarbeitung</indexterm>
            <indexterm>Third Manifesto</indexterm>
            <indexterm>Thought Works</indexterm>
            <indexterm>TIME</indexterm>
            <indexterm>Transaktionen</indexterm>
            <indexterm>Transformation</indexterm>
            <indexterm>TRUE</indexterm>
            <indexterm>Tupel</indexterm>
            <indexterm>Typ</indexterm>
            <indexterm>Überschrift</indexterm>
            <indexterm>UML</indexterm>
            <indexterm>UML-Profil</indexterm>
            <indexterm>UML-Standard</indexterm>
            <indexterm>unbekannte Werte</indexterm>
            <indexterm>Unified Modeling Language</indexterm>
            <indexterm>UNIQUE KEY</indexterm>
            <indexterm>unwahr</indexterm>
            <indexterm>UPDATE</indexterm>
            <indexterm>UPPER</indexterm>
            <indexterm>USE</indexterm>
            <indexterm>UTF</indexterm>
            <indexterm>VARCHAR</indexterm>
            <indexterm>Variable</indexterm>
            <!--indexterm>Variable (BNF)</indexterm-->
            <indexterm>Verben</indexterm>
            <indexterm>Vergleichsoperatoren</indexterm>
            <indexterm>Verschachtelung</indexterm>
            <indexterm>Versionieren</indexterm>
            <indexterm>VHIT-Methode</indexterm>
            <indexterm>V-Modell</indexterm>
            <indexterm>Vorgehensmodell</indexterm>
            <indexterm>wahr</indexterm>
            <indexterm>Wahrheitstabelle</indexterm>
            <indexterm>Wahrheitswerte</indexterm>
            <indexterm>Wasserfallmodell</indexterm>
           <!-- <indexterm>Web 2.0</indexterm>-->
            <indexterm>Webanwendung</indexterm>
            <indexterm>Webentwicklung</indexterm>
            <indexterm>Webframeworks</indexterm>
            <indexterm>Webkomponenten</indexterm>
<!--            <indexterm>Wert</indexterm>-->
<!--            <indexterm>WHERE</indexterm>-->
            <indexterm>Wiederholung</indexterm>
            <indexterm>Wiki</indexterm>
            <indexterm>Wildcards</indexterm>
            <indexterm>World Wide Web</indexterm>
            <indexterm>XML</indexterm>
            <indexterm>ganze Zahl</indexterm>
            <indexterm>reelle Zahlen</indexterm>
            <indexterm>Zahlen</indexterm>
            <indexterm>Zahlentypen</indexterm>
            <indexterm>Zeichenketten</indexterm>
            <indexterm>Zeichenkodierung</indexterm>
            <indexterm>Zeile</indexterm>
            <indexterm>Zeit- und Datumsangaben</indexterm>
            <indexterm>Zugriffsrechte</indexterm>
            <indexterm>Zugriffssynchronisations-Mechanismen</indexterm>
            <indexterm>Zwischentabelle</indexterm>
        </indexterms>
        <learning_objectives>
            <li>Allgemeine Datenbank-Konzepte (z.B. DBMS, Client-Server-Prinzip, Anforderungen, ...) erklären.</li>
            <li>BNF-Dokumentation zu SQL lesen und ausprägen.</li>
            <li>Ein Domänenmodell (für Datenhaltung) zu einer fachlichen Anforderung erstellen.</li>
            <li>UML-Klassendiagramme mit einem grafischen Werkzeug darstellen.</li>
            <li>Ein physisches DB-Modell zu einem gegebenen Domänenmodell erstellen.</li>
            <li>Ein Datenbank-Schema mittels SQL aus einem physischen Datenbankmodell erstellen.</li>
            <li>Begriffe des Relationalen DB-Modells erläutern.</li>
            <li>Geeignete Datentypen auswählen und erläutern.</li>
            <li>Tabellen in SQL anlegen und löschen.</li>
            <li>Schlüssel in Relationen bestimmen.</li>
            <li>Primär- und Alternativschlüssel in SQL beschreiben und anlegen.</li>
            <li>Datensätze mit SQL einfügen und auslesen.</li>
            <li>Datensätze mit SQL ändern und löschen.</li>
            <li>Bestehende Tabellen in SQL ändern.</li>
            <li>Ausdrücke und Funktionen in SQL programmieren.</li>
            <li>Aggregationsfunktion von SQL verwenden.</li>
            <li>Select-Ausgaben mit SQL sortieren und begrenzen.</li>
            <li>NULL-Wert erläutern und mit SQL umsetzen.</li>
            <li>1:n- und n:m-Beziehungen im Domänenmodell darstellen.</li>
            <li>1:n- und n:m-Beziehungen im physischen Datenmodell darstellen.</li>
            <li>1:n- und n:m-Beziehungen mit SQL umsetzen.</li>
            <li>SQL-Migrationsdateien anlegen.</li>
        </learning_objectives>
    </head>
    <preface>
        <p>Kaum noch eine Website kann es sich heutzutage erlauben, mit rein statischen Inhalten aufzuwarten. So ist auf vielen Websites die Interaktion mit den Besuchern gefragt. Onlineshops aktualisieren ständig ihre Inhalte. Selbst anscheinend statische Webseiten verwenden meist ein ausgeklügeltes <keyword>CMS</keyword> (Content Management System), um die Pflege zu erleichtern.</p>
        <p>Das moderne <i>World Wide Web</i> verarbeitet täglich eine gigantische Datenflut, die außerdem stetig wächst. Wohin also mit all den Daten?</p>
        <p>Ein Konzept, das sich seit fast 40 Jahren als <b>das</b> Konzept der Datenhaltung schlechthin erwiesen hat, hat auch die Webentwicklung im Sturm erobert. Die Rede ist vom <keyword>relationalen Datenbankmodell</keyword>. Ein Modell, das allen Versuchen es abzulösen trotzte und bis heute als stabil, fundiert und ausgereift gilt. Wenn der führende Datenbankexperte <i>C. J. Date</i> recht behält, wird das relationale Datenbankmodell auch in 100 Jahren noch vorherrschend sein (Date 2005).</p>
        <blockquote>
            <p>Hundert Jahre in die Zukunft blickend, erwarte ich, dass Datenbanksysteme immer noch auf Codds relationalem Modell basieren. Warum? Die Grundlagen des Modells – Mengenlehre und Prädikatenlogik – sind ihrerseits grundsolide. Elemente der Prädikatenlogik im Besonderen reichen gut 2000 Jahre zurück – wenigstens bis zu Aristoteles (384-322 v.Chr.).</p>
            <!--<p>A hundred years from now, I fully expect database systems still to be based on Codd's
        relational model. Why? Because the foundations of that model – namely, set theory and
        predicate logic – are themselves rock solid in turn. Elements of predicate logic in
        particular go back well over 2,000 years, at least as far as Aristotle (384-322 BCE).</p>-->
        </blockquote>
        <p>Keine Sorge, Sie lernen hier nicht nur 40 Jahre alte Konzepte, sondern gewinnen auch moderne Erkenntnisse. Erkenntnisse, die erst kürzlich den Schritt in den Mainstream der Softwareentwicklung geschafft haben und die den Unternehmen, die sie bereits anwenden, enorme Wettbewerbsvorteile bescheren. Dazu zählen beispielsweise Datenbankmigrationen oder objekt-relationales Mapping. Auch die Datenbanktheorie lernen Sie in der aktuellsten Version kennen. Sie bekommen die Mittel an die Hand, die Sie benötigen, um erfolgreich moderne <keyword>datenbankgestützte Webanwendungen</keyword> zu entwickeln.</p>
        <p>Ich werde Ihnen sowohl ein tiefes Verständnis des relationalen Datenbankmodells als auch alle wichtigen Handgriffe für die Praxis vermitteln. Sie werden von meiner langjährigen Berufserfahrung in der Webentwicklung profitieren und lernen, wie Sie typische Klippen gekonnt umschiffen.</p>
        <p>Ich freue mich, Sie nun in die spannende Welt hinter den Kulissen der datenbankgestützten Webanwendungen mitzunehmen.</p>
        <p>Viel Spaß beim Lernen und viel Erfolg beim Bau Ihrer Webanwendungen!</p>
        <p>Ihr Marco Emrich</p>
    </preface>
    <lessons>
        <lesson>
            <lesson_name>Einführung</lesson_name>
            <topics>
                <li>wie diese »Class« aufgebaut ist.</li>
                <li>welche Persönlichkeiten aus dem Datenbankumfeld Sie kennen sollten.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Wenn ich weiter geblickt habe, so deshalb, weil ich auf den Schultern von Riesen stehe.</p>
                </blockquote>
                <figcaption>Isaac Newton (1676), gefunden bei C.J. Date</figcaption>
            </figure>
            <h1>Aufbau</h1>
            <p>Diese »Class« ist in kleine Lerneinheiten – genannt Lektionen – aufgeteilt. Jede Lektion schließt mit Zusammenfassung, Wiederholungsfragen (<i>Testen Sie Ihr Wissen</i>) und einem Übungsblock ab. An die »normalen« Übungen schließt sich dann ein Block mit <i>Zusatzübungen</i> an. Ich empfehle Ihnen, die Übungen immer vollständig zu bearbeiten. Sie helfen Ihnen, das Erlernte zu festigen – getreu dem Grundsatz <i>learning by doing</i>. Die Zusatzübungen sind nicht zwingend erforderlich. Sie sind manchmal etwas schwieriger und geben Ihnen Gelegenheit, über das Geforderte hinauszugehen. Falls Sie der Meinung sind, dass Ihnen einfach noch etwas mehr Übung nicht schaden könnte, kann ich Ihnen die Zusatzübungen natürlich auch empfehlen.</p>
            <h1>Auf den Schultern von Riesen…</h1>
            <p>In der Welt der relationalen Datenbanken gibt es viele verschiedene Meinungen. Diese weichen oft nur in Details, manchmal aber auch sehr stark voneinander ab. Unter anderem betrifft das …</p>
            <ul>
                <li>das Verständnis des relationalen Datenbankmodells.</li>
                <li>Konzepte des Datenbankentwurfs.</li>
                <li>die allgemeine Vorgehensweise bei der Softwareentwicklung in Bezug auf Datenbanken.</li>
            </ul>
            <p>Meine Sichtweise ist aus jahrelanger Praxiserfahrung in der Webentwicklung gewachsen. Außerdem schließe ich mich der Meinung bekannter Forscher und praktizierender Entwickler an. Insbesondere sind das diese vier:</p>
            <ul>
                <li>Edgar Frank »Ted« Codd</li>
                <li>Christopher J. Date</li>
                <li>Scott W. Ambler</li>
                <li>Martin Fowler</li>
            </ul>
            <p>Hier finden Sie einen kurzen Abriss zu diesen wichtigen Personen der Datenbankgeschichte. Es sind die Lehren dieser vier, auf denen die Inhalte dieser Class im Wesentlichen basieren.</p>
            <h3>Edgar Frank Codd</h3>
            <p>Edgar Frank Codd – »Ted«, wie ihn seine Freunde nannten – wurde 1923 in England geboren und ist der Erfinder des relationalen Datenbankmodells. 1969 stellte er seinem Arbeitgeber IBM das erste Werk über das relationale Datenbankmodell vor (Codd, 1969). Zusammen mit Christopher J. Date gründete er 1984 ein Consulting-Unternehmen (Campbell-Kelly, 2003) und arbeitete mit ihm an der Weiterentwicklung des Modells. Bis zu seinem Tod 2003 veröffentlichte er noch neue Erkenntnisse. Mehr zu seinem Leben erfahren Sie bei Spicer (2003) und bei <a href="https://de.wikipedia.org/wiki/Edgar_F._Codd">Wikipedia</a>.</p>
            <h3>Christopher J. Date</h3>
            <p>Christopher J. Date (geboren 1941) ist Autor zahlreicher Bücher und Artikel und gilt heute als <b>der</b> Experte für relationale Datenbanken. Codd lernte er 1970 kennen und wurde einer der ersten Befürworter des relationalen Modells. </p>
            <!--Ted was the guy who invented this stuff, I was the one to explain it-->
            <figure>
                <blockquote>
                    <p>Ted war der Typ, der den Kram erfunden hat, und ich derjenige, der es erklären musste.</p>
                </blockquote>
                <figcaption>aus Darrow B. (2004)</figcaption>
            </figure>
            <p>Er sagt also von sich selbst, dass es seine größte Errungenschaft war, Codds Theorien für eine breite Öffentlichkeit verständlich darzustellen (Haigh, 2007).</p>
            <p>Heute wartet und verbessert er noch immer das relationale Modell. Aktuellere Fassungen können Sie in Date (2004, 2005 und 2007) nachlesen und mehr zu seinem Leben erfahren Sie bei Wikipedia und Haigh (2007).</p>
            <h3>Scott Ambler</h3>
            <p>Bekannt geworden ist Scott Ambler durch seine agilen Vorgehensmodelle, seine Arbeit im Modellierungssektor und seine Errungenschaften beim objekt-relationalen Mapping. Er ist Autor und Co-Autor mehrerer Bücher zu den genannten Themen. Seine beiden Datenbank-Bücher (Ambler, 2003, 2006) berücksichtigen nicht nur die technischen, sondern auch die menschlichen Aspekte der Datenbankentwicklung.</p>
            <p>Unter <a href="https://www.ambysoft.com">www.ambysoft.com</a> finden Sie viele interessante Artikel von ihm, und unter <a href="http://www.agiledata.org">www.agiledata.org</a> widmet er sich exklusiv der Datenbankentwicklung. Sie können Scott auch bei einer Präsentation im <a href="https://www.infoq.com/presentations/ambler-database-refactoring">Video</a> zusehen.</p>
            <h3>Martin Fowler</h3>
            <p>Martin Fowler ist der leitende Wissenschaftler bei Thought Works. Er hat sich in vielen Bereichen der Softwareentwicklung verdient gemacht. Lassen wir ihn sich kurz vorstellen (Fowler 2003):</p>
            <blockquote>
                <p>Ich bin Autor, Konferenzsprecher, freier Berater und hab generell ein großes Mundwerk im Bereich der Softwareentwicklung. Ich konzentriere mich auf das Design von Enterprise-Software, verfolge, was gutes Design ausmacht und welche Praktiken dazu nötig sind. Ich bin Pionier in der Objektorientierung, im Refactoring, bei Mustern, Agilen Methoden, Domain Modellierung, Extreme Programming und der Unified Modeling Language (UML).</p>
            </blockquote>
            <p>Viele moderne Webframeworks wie <i>Rails</i>, <i>Django</i>, <i>Doctrine</i> oder <i>Symfony</i> greifen auf seine Muster wie <i>Active Record</i> oder <i>Data Mapper</i> aus (Fowler, 2002) zurück. Wenn Sie Martin als Redner sehen möchten, werfen Sie einen Blick auf seine Keynote von der <a href="https://www.youtube.com/watch?v=G_y2pNj0zZg">Agile Australia 2018</a>.</p>
            <h1 id="voraussetzungen">Voraussetzungen</h1>
            <p>Das Wissensumfeld relationaler Datenbanken ist recht umfangreich. Es gibt viele konkurrierende Ansätze zum Entwurf und zur Verwendung von Datenbanken. Diese Einführung will und kann keine wändefüllende Enzyklopädie sein, sondern Ihnen einen möglichst schnellen praxisnahen Einstieg ermöglichen. Deswegen stelle ich Ihnen nicht alle Möglichkeiten und Strategien vor, sondern beschränke mich auf eine Vorgehensweise, die vor allem für Webanwendungen gut geeignet ist. Am meisten werden Sie profitieren, wenn folgende Voraussetzungen gegeben sind:</p>
            <ul>
                <li>Sie entwickeln eine Webanwendung auf Kundenwunsch.</li>
                <li>Die Anwendung wird praktisch eingesetzt und ist kein Forschungsprojekt.</li>
                <li>Eine Datenbank sorgt für die persistente Datenspeicherung. Es ist nicht erforderlich, dass weitere Anwendungen, außer Ihrer Webanwendung, (direkt) auf die Daten zugreifen. </li>
                <li>Es ist auch nicht erforderlich, dass ein Benutzer direkt mit der Datenbank arbeitet. Früher war es üblich, dass Anwender direkt mit Hilfe einer Datenbankabfragesprache wie z.B. SQL gearbeitet haben. Heutzutage arbeiten Endanwender aber nur noch mit grafischen Oberflächen (GUI) – oftmals in Form von Webseiten. Das SQL bleibt Anwendungsentwicklern vorbehalten. </li>
                <li>Es gibt keinen Grund, Daten in mehreren (verschiedenen) Datenbanken für die gleiche Anwendung zu speichern. Anders ausgedrückt: Zu genau einer Webanwendung gehört genau eine Datenbank.</li>
                <li>Es sind keine Altdaten (<keyword>legacy data</keyword>) zu übernehmen.</li>
                <li>Es sind kein Altanwendungen (<keyword>legacy applications</keyword>) anzubinden.</li>
            </ul>
            <p>Sollten Sie in der Praxis nicht diese Situation vorfinden, so können Sie die hier vorgestellten Konzepte natürlich dennoch anwenden. Sie müssen dann zusätzliche Punkte beachten (zum Beispiel den Import von Altdaten), auf die ich hier nicht eingehen kann.</p>
            <hint>
                <h3>Begriffe und Definitionen</h3>
                <p><b>Eine kleine Warnung vorab:</b> Das Datenbankumfeld ist komplex und über viele Jahrzehnte gewachsen. Entsprechend finden Sie die gleichen Begriffe oft mit unterschiedlichen Bedeutungen — es kann sogar vorkommen, dass sich Definitionen aus unterschiedlichen Quellen scheinbar widersprechen.</p>
                <p>Ich möchte Ihnen keinesfalls davon abraten zu googeln oder andere Recherchen zu betreiben. Im Gegenteil, unterschiedliche Perspektiven und Quellen helfen dabei, ein umfassendes Verständnis zu bekommen. Allerdings kann es passieren, dass Sie das am Anfang mehr verunsichert als es Ihnen hilft. Verwenden Sie im Zweifelsfall die Definitionen aus diesem Kurs und schauen Sie sich alternative Bedeutungen erst dann an, wenn Sie sich bereits sicher genug fühlen.</p>
            </hint>
        </lesson>
        <lesson>
            <lesson_name>Datenbanken</lesson_name>
            <topics>
                <li>wozu Datenbanken verwendet werden.</li>
                <li>welche Rolle relationale Datenbanken im World Wide Web spielen.</li>
                <li>was genau eine Datenbank eigentlich ist.</li>
                <li>welche Datenbank-Management-Systeme es gibt.</li>
            </topics>
            <figure>
                <blockquote>
                    <p><!--Worldwide relational database management systems (RDBMS) total software revenue totaled
        
5.2 billion in 2006.--> 2006 wurden weltweit über 15.2 Milliarden Euro für relationale Datenbanken ausgegeben. </p>
                </blockquote>
                <figcaption>SQL Industry News (2007)</figcaption>
            </figure>
            <h1>Warum Datenbanken?</h1>
            <p>Datenbanken werden überall dort benötigt, wo Daten strukturiert gespeichert werden müssen. Firmen z.B. benötigen Datenbanken, um ihre Kundenkontakte zu speichern oder ihre Aufträge zu verwalten.</p>
            <h1>Datenbanken im Web</h1>
            <p>Auch im World Wide Web spielen Datenbanken eine große Rolle. Viele Webanwendungen wären mit rein statischen HTML-Seiten nicht realisierbar. Webanwendungen nutzen serverseitige Programmierung (z.B. mit PHP, Ruby, Python oder Java), um auf Datenbanken zuzugreifen und die darin gespeicherten Daten in Webseiten zu integrieren. Mit Hilfe dieser Technologien können Sie <keyword>dynamische Webseiten</keyword> programmieren.</p>
            <hint>
                <p>Dynamische Webseiten sind Webseiten, die erst zum Zeitpunkt des Aufrufs durch einen Webseiten-Besucher <keyword>generiert</keyword> werden. Auf diesen Seiten können die aktuellsten Informationen aus einer Datenbank angezeigt werden.</p>
            </hint>
            <h3>Beispiel</h3>
            <p>In <a href="#waportal_mitarbeiter"/> z.B. sehen Sie die Mitarbeiteransicht einer Seminarverwaltung. Damit pflegt ein Mitarbeiter einer Bildungseinrichtung Seminare mit Name, Beschreibung, Kategorie usw. ein. Alle Änderungen sind in der Kundenansicht für Kunden und Besucher sofort sichtbar (siehe <a href="#waportal_kunden"/>). Aktuelle Informationen entnimmt die Webanwendung bei jedem Aufruf automatisch aus der Datenbank. </p>
            <p>Die Daten manuell in statische HTML-Seiten einzupflegen und aktuell zu halten, wäre dagegen sehr aufwendig und fehleranfällig. Eine Datenbank spart also Zeit und Kosten und hilft, Fehler zu vermeiden.</p>
            <figure width="60%" id="waportal_kunden">
                <img src="images/screenshots/waportal_frontend.png"/>
                <figcaption>Produktdatenbank für Seminare (Kundenansicht)</figcaption>
            </figure>
            <figure width="60%" id="waportal_mitarbeiter">
                <img src="images/screenshots/waportal_backend.png"/>
                <figcaption>Produktdatenbank für Seminare (Mitarbeiteransicht)</figcaption>
            </figure>
            <h2>Webanwendungen</h2>
            <p>Websites, die aus vielen dynamischen Seiten bestehen, werden als <keyword>Webanwendungen</keyword> bezeichnet. In seiner Anfangszeit bestand das Web im Wesentlichen aus statischen Seiten und wurde eher als eine Art Bibliothek betrachtet. Heute sind viele Websites aber als Anwendungen zu verstehen, die mit klassischen Desktop­anwendungen in Konkurrenz treten. Typische Webanwendungen sind z.B.</p>
            <ul>
                <li>
                    <p><b>Produkt-Datenbanken</b><br/>Durch Datenbankanbindung lassen sich z.B. Produkt- und Preislisten sehr effizient ins Web stellen.</p>
                </li>
                <li>
                    <p><b>Informationssysteme</b><br/>Bestimmte Angebote, wie Suchmaschinen (z.B. <a href="https://www.google.de">www.google.de</a>) oder Informationsportale (z.B. Die <i>International Movie Database</i>
                        <a href="https://www.imdb.com">www.imdb.com</a>, wo Sie zu nahezu allen Filmen Schauspieler, Regiesseur, Handlungsverlauf, Bewertungen uvm. finden) wären ohne Datenbanken überhaupt nicht denkbar. Zur Realisierung von Suchfunktionen wird fast immer eine Datenbank eingesetzt.</p>
                </li>
                <li>
                    <p><b>Online-Shops</b><br/>Online-Shops müssen nicht nur Produkte und Preise über das Internet zur Verfügung stellen, sondern auch Features wie Warenkorb, Bestellwesen, Bezahlsystem und eventuell Auftragsverfolgung. Datenbanken verwalten hier Kunden, Produkte, Bestellungen, Rechnungen u.v.m.</p>
                </li>
                <li>
                    <p><b>Online-Spiele</b><br/>Auch der Entertainment-Sektor setzt verstärkt auf Datenbanken. Viele moderne Onlinespiele speichern sowohl die Benutzerdaten als auch die Daten der Spielelemente in Datenbanken. Viele Spiele verwalten z.B. auch eine Rangliste, die Ergebnisse einzelner Partien oder die Errungenschaften der Spieler (Achievements) in einer Datenbank.</p>
                </li>
                <li><b>Social Media/Networks</b><br/>Social Networks (z.B. <a href="https://www.xing.com">www.xing.com</a> oder <a href="https://www.linkedin.com">www.linkedin.com</a>) speichern riesige Datenmengen mit Informationen über die Nutzer, deren Nachrichten, Empfehlungen usw.</li>
            </ul>
            <h2>Web-Komponenten</h2>
            <p>Große Webanwendungen integrieren oftmals verschiedene Komponenten, die für sich alleine schon kleine Anwendungen darstellen. Viele davon müssen ebenfalls ihre Daten permanent speichern. Typische Komponenten sind:</p>
            <ul>
                <li>Benutzerregistrierung</li>
                <li>Forum</li>
                <li>Wiki</li>
                <li>Blog</li>
                <li>Content Management System (CMS)</li>
                <li>Nachrichtensystem</li>
            </ul>
            <h1>Persistenz</h1>
            <p>Zu welchem Zweck setzen Webanwendungen nun Datenbanken ein?</p>
            <p>Webanwendungen nutzen Datenbanken in erster Linie um ihre Daten zu persistieren. Persistenz bedeutet – vereinfacht ausgedrückt – dass die Daten nicht nur im RAM des Webservers gehalten werden, sondern auch einen Reboot überleben. Neben relationalen Datenbanken können dazu auch andere Technologien eingesetzt werden, z.B. einfache Textdateien, XML-Dateien oder NoSQL-Datenbanken. Am häufigsten greifen Webanwendungen jedoch auf relationale Datenbanken zurück.</p>
            <p>Persistenz ist aber nur ein Aspekt. Relationale Datenbanken haben weitere Vorteile, die sie gerade für typische Webanwendungen attraktiv machen. Sie bieten z.B. mächtige Abfragemöglichkeiten, um schnell an die gewünschten Daten heranzukommen. Zudem gibt es die Möglichkeit, Teile der Applikationslogik in die Datenbank zu verlagern. Ob das tatsächlich sinnvoll ist (und in welchem Umfang), hängt von vielen Faktoren ab. <br/>Eine ausführliche Diskussion finden Sie in einem <a href="https://www.martinfowler.com/articles/dblogic.html">Blogartikel</a> von Fowler (2003b).</p>
            <h1>Was ist eine Datenbank?</h1>
            <p>Eine gute Definition des Datenbank-Begriffes finden Sie bei <a href="https://en.wikipedia.org/wiki/Database">Wikipedia</a>.</p>
            <blockquote>
                <p><!--A database is a structured collection of data which is managed to meet the needs of a
          community of users. The structure is achieved by organizing the data according to a
          database model.--> Eine Datenbank ist eine strukturierte Sammlung von Daten, die verwaltet werden, um die Bedürfnisse einer Gruppe von Anwendern zu decken. Die Struktur entsteht durch die Organisation der Daten mit Hilfe eines Datenbankmodells.</p>
            </blockquote>
            <p>Diese Definition beinhaltet drei wichtige Aussagen:</p>
            <ul>
                <li>Eine <keyword>Datenbank</keyword> ist eine strukturierte Sammlung von Daten. </li>
                <li>Die Struktur entsteht durch die Organisation der Daten mit Hilfe eines <keyword>Datenbankmodells</keyword>. </li>
                <li>Die Daten werden <i>verwaltet</i>, um die Bedürfnisse einer Gruppe von Anwendern zu decken. </li>
            </ul>
            <h2>Struktur</h2>
            <blockquote>
                <p>Eine <keyword>Datenbank</keyword> ist eine strukturierte Sammlung von Daten.</p>
            </blockquote>
            <p>
                <keyword>Strukturiert</keyword> bedeutet, dass die Daten nicht »wild verstreut« sind, sondern in irgendeiner Art organisiert. Es gibt verschiedene Möglichkeiten, Daten strukturiert abzulegen, z.B.</p>
            <ul>
                <li>als Liste oder Aufzählung in einer <i>Textverarbeitung</i> (z.B. <i>LibreOffice Writer</i> oder <i>Microsoft Word</i>) </li>
                <li>in einer <i>Tabellenkalkulation</i> (z.B. <i>OpenOffice.org Spreadsheet</i> oder <i>Microsoft Excel</i>) </li>
                <li>als <i>Dateien</i> in ein Dateisystem </li>
                <li>in <i>Auszeichnungssprachen</i> wie XML usw. </li>
            </ul>
            <p>Sie könnten also z.B. auch eine Liste in einer Textverarbeitung als Datenbank bezeichnen – das ist nicht gemeint. Struktur alleine reicht nicht aus. Der zweite Satz sagt, dass der Struktur einer Datenbank ein bestimmtes Datenbankmodell zugrunde liegt.</p>
            <h2>Datenbankmodelle</h2>
            <blockquote>
                <p>Die Struktur entsteht durch die Organisation der Daten mit Hilfe eines <keyword>Datenbankmodells</keyword>. </p>
            </blockquote>
            <p>Es gibt verschiedene sogenannte <keyword>Datenbankmodelle</keyword>, die sich in der Praxis etabliert haben. Die bekanntesten sind:</p>
            <ul>
                <li>Netzwerkmodell</li>
                <li>hierarchisches Modell</li>
                <li>relationales Modell</li>
                <li>objektorientiertes Modell</li>
                <li>dokumentenorientiertes Modell</li>
            </ul>
            <figure width="90%" float="free">
                <img src="images/database_models.jpg"/>
                <figcaption>Datenbankmodelle (Quelle: <a href="https://de.wikipedia.org/wiki/Datenbankmodell">https://de.wikipedia.org/wiki/Datenbankmodell</a>)</figcaption>
            </figure>
            <p>Das Datenbankmodell bestimmt die Struktur zur Ablage der Daten und legt fest, wie Verbindungen zwischen den Daten repräsentiert werden. Beispielsweise folgt das hierarchische Modell einer <b>Baumstruktur</b>. Wollten Sie z.B. Unternehmen repräsentieren, könnten Sie auf der obersten Ebene die Unternehmen angeben und darunter (als Äste) deren Abteilungen (Vertrieb, Service, Einkauf, usw). Diese wiederum untergliedern sich in mehrere Mitarbeiter. Abteilungsübergreifend arbeitende Mitarbeiter lassen sich so nur schwer darstellen. </p>
            <p>Das relationale Model dagegen verwendet (vereinfacht ausgedrückt) <b>Tabellen</b> zur Datenorganisation. Das Unternehmensbeispiel könnten Sie mit Hilfe der Tabellen <i>unternehmen</i>, <i>abteilungen</i> und <i>mitarbeiter</i> realisieren.</p>
            <p>Das relationale ist das mit Abstand meistverbreitete Datenbankmodell. Es ist seit über 40 Jahren im Einsatz und hat sich vielfach bewährt. Andere, längst totgeglaubte Modelle erleben jedoch seit 2009 eine Renaissance. Unter dem Begriff <keyword>NoSQL</keyword> hat sich eine Gegenbewegung von Datenbanksystemen gebildet, die nicht auf dem relationalen Modell basieren. Der Begriff <keyword>NoSQL</keyword> ist an dieser Stelle etwas irreführend. Tatsächlich müsste es »nicht-relational« heißen. </p>
            <p>Das relationale Modell ist ein universales Modell, das sich für eine sehr breite Palette von Problemstellungen einsetzen lässt. Im Gegenzug haben andere Modelle Vorteile, wenn die Problemstellung genau zum Modell passt. So lassen sich z. B. soziale Graphen, wie sie Social Networks verwenden (wer ist mit wem befreundet?), besser in einer spezialisierten Graphendatenbank speichern. Einen guten Überblick über den Stand der NoSQL-Datenbanken gibt <a href="https://www.infoq.com/articles/State-of-NoSQL">Stefan Endlich (2012)</a>.</p>
            <p>Ich möchte Ihnen hier das vorherrschende relationale Model näherbringen, das für eine
                große Menge von Anwendungsfällen bestens geeignet ist. In <a href="#relationales_modell"/> lernen Sie das Model im Detail kennen.</p>
            <h2>Das Datenbank-Management-System</h2>
            <p>Betrachten Sie den noch verbleibenden Teil der Definition:</p>
            <blockquote>
                <p>Die Daten werden verwaltet, um die Bedürfnisse einer Guppe von Anwendern zu decken.</p>
            </blockquote>
            <p>Um Daten zu verwalten, benötigen Sie ein Programm, das diese Aufgabe übernimmt. Solche Programme werden als <keyword>Datenbank-Management-System</keyword> (kurz: <keyword>DBMS</keyword>) bezeichnet. Ein DBMS, das Datenbanken nach dem relationalen Modell verwaltet, ist ein <keyword>relationales DBMS</keyword>, kurz <keyword>RDBMS</keyword>.</p>
            <p>Um es noch einmal klar herauszustellen:</p>
            <hint>
                <p>Eine <keyword>Datenbank (DB)</keyword> ist eine Sammlung von Daten, denen ein Datenbankmodell zugrundeliegt. Ein <keyword>Datenbank-Management-System (DBMS)</keyword> ist ein Programm, das die Daten bzw. Datenbanken verwaltet.</p>
            </hint>
            <p>Im Sprachgebrauch wird häufig der Begriff Datenbank gebraucht, obwohl eigentlich ein DBMS gemeint ist. Ich werde aber, um Verwechslungen zu vermeiden, die beiden Begriffe immer in ihrer korrekten Bedeutung verwenden.</p>
            <hint>
                <h3>Christopher sagt…</h3>
                <figure>
                    <blockquote>
                        <p>Leider wird [der Begriff »Datenbank«] auch noch allzu oft im Sinne von DBMS verwendet, aber diese spezielle Lesart ist streng zurückzuweisen. Wenn wir »Datenbank« für DBMS sagen, wie wollen wir dann eine Datenbank nennen?</p>
                    </blockquote>
                    <figcaption>Date (2007)</figcaption>
                </figure>
            </hint>
            <p>Im übrigen kann ein DBMS auch mehrere Datenbanken verwalten, z.B. eine Datenbank für Kunden und Bestellungen, eine weitere für Lieferanten usw.</p>
            <h1 id="dbms_anforderungen">Anforderungen an ein DBMS</h1>
            <p>Ein DBMS ist aber kein einfaches Stück Software. Es muss eine ganze Reihe spezieller Anforderungen erfüllen. Welche Anforderungen das aber genau sind – nun, da gehen die Meinungen »ein wenig« auseinander. Ich beschränke mich deswegen auf lediglich vier Anforderungen, die allgemein anerkannt sind und gerade auch für Webanwendungen als essenziell gelten.</p>
            <ul>
                <li>Unterstützung spezieller Suchabfragen</li>
                <li>Datensicherheit</li>
                <li>Datenintegrität</li>
                <li>Mehrbenutzerfähigkeit</li>
            </ul>
            <p>Betrachten wir die Anforderungen im Detail:</p>
            <h3>Unterstützung spezieller Suchabfragen</h3>
            <p>Soll beispielsweise in einer Personaldatenbank nach allen Mitarbeitern gesucht werden, die mehr als 2000,- Euro verdienen, höchstens 40 Jahre alt sind und in der Abteilung <i>Softwareentwicklung</i> arbeiten, so ist eine spezielle Suchfunktion erforderlich.</p>
            <p>Insbesondere müssen Sie sogenannte <keyword>Ad-Hoc-Querys</keyword> absetzen können. Das sind Suchanfragen, die Sie bei der ursprünglichen Datenbankplanung nicht berücksichtigt haben. In einem realen Projekt kommt es aber immer wieder vor, dass Sie unvorhergesehene Anfragen stellen müssen. Glücklicherweise unterstützen alle gängigen modernen relationalen DBMS solche Anfragen mit Hilfe der Sprache <i>SQL</i>.</p>
            <h3>Datensicherheit</h3>
            <p>Durch Betriebssystemfehler, Stromausfall, Anwendungsfehler und andere Probleme können Datenverluste auftreten. Ein DBMS verfügt deswegen über Mechanismen zum Schutz der Daten. Beispielsweise kann ein DBMS einen sogenannten <keyword>Dump</keyword> erstellen. Ein Dump ist eine Sicherung (<keyword>Backup</keyword>) des aktuellen Stands einer Datenbank, den Sie im Notfall wieder einspielen können. Weitergehende Features sind z.B. das <keyword>Point-In-Time-Recovery</keyword>, mit dem sich jeder beliebige Zeitpunkt des Datenstandes wiederherstellen lässt. Falls Sie auf eine schnelle Wiederherstellung oder hohe Ausfallsicherheit Wert legen, bieten viele Datenbank-Management-Systeme <keyword>Replikationsmechanismen</keyword>, die es erlauben, den Datenbestand auf einem zweiten System aktuell zu halten. Falls gewünscht, kann das zweite System dann beim Ausfall des ersten automatisch einspringen.</p>
            <p>Bestehende Datenbank-Management-Systeme unterscheiden sich sehr stark in ihren Datensicherheitsmechanismen. Zum einen unterstützen verschiedene Systeme unterschiedliche Mechanismen. Zum anderen unterscheiden sich selbst die gleichen Mechanismen erheblich in ihrer Umsetzung. Allein mit den verschiedenen Konzepten der Replikation ließen sich mehrere Bücher füllen.</p>
            <h3>Datenintegrität</h3>
            <p>
                <keyword>Datenintegrität</keyword> bedeutet, dass die abgelegten Daten konsistent, d.h. nicht widersprüchlich sind. Beispielsweise darf der gleiche Benutzer nicht zweimal mit unterschiedlichem Geburtsdatum hinterlegt sein.</p>
            <p>Außerdem können weitere Regeln hinterlegt werden, die zusätzliche logische Fehler verhindern. Als logischer Fehler könnte z.B. das Eintragen eines negativen Preises gelten. So ein Fehler kann dramatische Folgen haben. Stellen Sie sich vor, ein Mitarbeiter eines Onlineshops hat für den Preis eines Buches -30 € eingetragen. Ich bin mir sicher, dass das Buch reißenden Absatz findet – über den sich die Geschäftsführung aber nicht unbedingt freuen wird…</p>
            <p>Viele Anwenderfehler können durch sogenannte Integritätsprüfungen schon vor dem Speichern in der Datenbank abgefangen werden. Bei der Webentwicklung müssen Sie sich entscheiden, welche Integritätsprüfungen Sie in der Datenbank (mit SQL) und welche Sie in der Anwendung (z.B. mit PHP oder Ruby) hinterlegen.</p>
            <h3>Mehrbenutzerfähigkeit</h3>
            <p>Zugriffssynchronisations-Mechanismen regeln den gleichzeitigen Zugriff mehrerer Benutzer auf die Daten einer Datenbank. Änderungen dürfen nicht zu Inkonsistenzen führen. Wenn etwa zwei Reisebüros gleichzeitig versuchen, den letzten Platz des gleichen Flugs zu buchen, darf dieser Platz natürlich nur einmal vergeben werden. Um Probleme beim gleichzeitigen Zugriff zu vermeiden, verwenden Datenbank-Management-Systeme üblicherweise sogenannte <keyword>Sperren</keyword> (<keyword>Locks</keyword>) und <keyword>Transaktionen</keyword> (<keyword>Transactions</keyword>).</p>
            <h1>Verbreitete RDBMS</h1>
            <table id="rdbms_uebersicht">
                <caption>Beispiele für relationale Datenbank-Management-Systeme</caption>
                <thead>
                    <tr>
                        <th>DBMS</th>
                        <th>Hersteller/Entwickler</th>
                        <th>Lizenzmodell</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>MySQL<br/><a href="https://www.mysql.com">www.mysql.com</a></td>
                        <td>Oracle</td>
                        <td>OpenSource / kommerziell</td>
                    </tr>
                    <tr>
                        <td>PostgreSQL<br/><a href="https://www.postgresql.org">www.postgresql.org</a></td>
                        <td>PostgreSQL Global Development Team</td>
                        <td>OpenSource</td>
                    </tr>
                    <tr>
                        <td>MariaDB<br/><a href="https://mariadb.org">mariadb.org</a></td>
                        <td>Monty Program Ab</td>
                        <td>OpenSource</td>
                    </tr>
                    <tr>
                        <td>SQLite<br/><a href="https://www.sqlite.org">www.sqlite.org</a></td>
                        <td>SQLite International Team</td>
                        <td>OpenSource</td>
                    </tr>
                    <tr>
                        <td>HSQL-DB<br/><a href="http://hsqldb.org/">http://hsqldb.org/</a></td>
                        <td>HSQL-DB Development Team</td>
                        <td>OpenSource</td>
                    </tr>
                    <tr>
                        <td>Oracle<br/><a href="https://www.oracle.com">www.oracle.com</a></td>
                        <td>Oracle</td>
                        <td>kommerziell</td>
                    </tr>
                    <tr>
                        <td>DB2<br/><a href="https://www.ibm.com">www.ibm.com</a></td>
                        <td>IBM</td>
                        <td>kommerziell</td>
                    </tr>
                </tbody>
            </table>
            <p><a href="#rdbms_uebersicht"/> zeigt einen kleinen Ausschnitt gängiger relationaler
                DBMS. Eine umfangreiche Liste finden Sie auf <a href="https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems">Wikipedia</a>. In den letzten zehn Jahren haben sich im Bereich der
                Webentwicklung insbesondere OpenSource-Produkte etabliert. Sie lassen sich kostenlos
                einsetzen und sind auch im Quellcode erhältlich. Hier treffen alle bekannten
                Vorteile der OpenSource-Entwicklung zu, wie sie z.B. <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/">Raymond (2000)</a> beschreibt.. Außerdem müssen sie sich nicht hinter ihren
                kommerziellen Gegenstücken verstecken. Im Funktionsumfang sind geringfügige
                Abstriche zu machen – wie z.B. das Fehlen von <a href="http://de.wikipedia.org/wiki/Materialized_View#Materialized_View">Materialized Views</a>. In Sachen Performance, Administration und Support sind
                sie aber gleichauf und teilweise sogar überlegen <a href="http://www.heise.de/open/Freie-Datenbanken-im-Unternehmenseinsatz-Ein-Vergleich--/artikel/70100/0"><?oxy_comment_start author="admin" timestamp="20201020T141425+0200" comment="die Seite gibt es nicht mehr (404)"?>(Horstmann,
                    2006)<?oxy_comment_end ?></a>. Die zusätzlichen Features sind für die Praxis von
                Webanwendungen auch weitestgehend irrelevant. Deswegen gilt:</p>
            <hint>
                <p>OpenSource-DBMS lassen sich für den Einsatz in Webanwendungen uneingeschränkt empfehlen.</p>
            </hint>
            <p>Einen ausführlichen Vergleich aktueller OpenSource-Datenbanken finden Sie bei Horstmann (2006).</p>
            <h1>MySQL</h1>
            <p>In dieser Class lernen Sie das DBMS <i>MySQL</i> kennen. MySQL ist laut <a href="https://db-engines.com/en/ranking">DB-Engines Ranking</a>, einer Marktstudie der Website <i>DB-Engines</i>, nach dem kommerziellen DBMS <i>Oracle</i> das beliebteste DBMS und das mit Abstand weltweit am häufigsten eingesetzte Open Source DBMS. MySQL gilt als erste Wahl für Webanwendungen. Deswegen ist es in vielen Hostingpaketen bereits integriert. Als Hauptvorteile gelten <b>Hohe Performance</b> und <b>einfache Handhabung</b>.</p>
            <figure float="free" width="100%">
                <img src="images/db-engines-ranking2020.png"/>
                <figcaption>Die zehn beliebtesten DBMS im Februar 2020 laut <a href="https://db-engines.com/en/ranking">DB-Engines Ranking</a>. </figcaption>
            </figure>
            <p>Im OpenSource-Bereich sind die RDBMS <i>MariaDB</i> und <i>PostgresQL</i> direkte Konkurrenten. Bei MariaDB handelt es sich um einen voll-kompatiblen Ersatz für MySQL, sodass alle Codebeispiele und Übungen auch mit MariaDB funktionieren. PostgresQL ist ebenfalls eine sehr gute Alternative, erfordert aber stellenweise eine andere SQL-Syntax als MySQL, sodass Sie nicht alle Beispiele direkt übertragen können.</p>
            <hint>
                <h3>Fun-Fakt</h3>
                <p>MySQL ist nach Monty Widenius' (dem MySQL-Erfinder) ältester Tochter »My« benannt. Seine beiden anderen DBMS-Produkte/Kinder heißen Max(DB) und Maria(DB).</p>
            </hint>
            <h1>Das Client-Server-Prinzip</h1>
            <p>Ein DBMS liegt meist als <keyword>Serversystem</keyword> vor, das dann als <keyword>Dienst</keyword> (engl. <keyword>Service</keyword>) arbeitet. Dienste verfügen nicht über grafische Benutzerschnittstellen und werden auch nicht von Benutzern gestartet, sondern vom Betriebssystem verwaltet. Ein Dienst bietet Ihnen keine direkte Bedienmöglichkeit an, er arbeitet im Hintergrund. Um auf die Daten zugreifen zu können, sind <keyword>Datenbank-Clients</keyword> (kurz: <keyword>DB-Clients</keyword>) notwendig.</p>
            <figure width="70%" float="free">
                <img src="images/screenshots/dienste_linux.png"/>
                <figcaption>Dienste unter Ubuntu-Linux</figcaption>
            </figure>
            <figure width="70%" float="free">
                <img src="images/screenshots/dienste_windows.png"/>
                <figcaption>Dienste unter Windows</figcaption>
            </figure>
            <p>Stellen Sie sich einen Dienst einfach wie einen guten englischen Butler vor. Er ist immer da, fällt nicht weiter auf und nimmt gerne jeden Auftrag entgegen.</p>
            <p>
                <b>Anwender:</b>
                <i>Besorg' mir bitte eine Liste aller Kunden, die letzte Woche für mehr als 100 € bei uns eingekauft haben.</i>
            </p>
            <p>
                <b>Dienst:</b>
                <i>Sehr wohl, Sir.</i>
            </p>
            <hint>
                <h3>Serversystem Alternative</h3>
                <p>Die Alternative zu DBMS als Serversystem sind DBMS als Bibliothek (engl. Library) – sogenannte eingebettete Datenbanksysteme (engl.: Embedded Databases). Sie werden direkt in eine Anwendung integriert. Viele Anwendungen, die lokal auf dem Rechner ausgeführt werden, verwenden im Hintergrund ein DBMS, um ihre Daten zu organisieren. So benutzen z. B. der Firefox-Browser und das Fotoalbum Digikam zur Speicherung ihrer Daten das DBMS SQLite.</p>
            </hint>
            <h1>Datenbank-Clients</h1>
            <p>Der Zugriff auf die Daten einer Datenbank erfolgt über einen Datenbank-Client, der sich mit dem DBMS verbindet. Ein Client kann ganz unterschiedlich aussehen. Im Grunde ist jede Webanwendung ein Datenbank-Client. Es ist dabei unerheblich, ob es sich um die öffentliche Ansicht für Kunden und Besucher oder um die interne Ansicht für Mitarbeiter und Administratoren handelt (siehe Screenshots <a href="#waportal_kunden"/> und <a href="#waportal_mitarbeiter"/>).</p>
            <p>Bei der Entwicklung einer Datenbank können Sie aber auch bereits fertige Clients verwenden, die es Ihnen als Entwickler erlauben, direkt mit der Datenbank zu kommunizieren. In diesem Kurs werden Sie den MySQL-Kommandozeilenclient verwenden, den Sie in <a href="#mysql_clc"/> sehen.</p>
            <figure width="75%" id="mysql_clc">
                <img src="images/screenshots/mysql_prompt.png"/>
                <figcaption>Der MySQL-Kommandozeilen-Client</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Relationale Datenbanken sind eine der größten Industrien im IT-Sektor.</li>
                <li>Viele Webanwendungen verwenden Datenbanken zur persistenten Speicherung – so können sie auf Anforderung dynamische Seiten generieren. </li>
                <li>Eine <keyword>Datenbank (DB)</keyword> ist eine Sammlung von Daten, denen ein Datenbankmodell zugrundeliegt. </li>
                <li>Ein <keyword>Datenbank-Management-System (DBMS)</keyword> ist ein Programm, das die Daten bzw. Datenbanken verwaltet. </li>
                <li>Ein <keyword>Datenbank-Client</keyword> ist ein Programm, mit dem Sie auf die Daten einer Datenbank zugreifen können. </li>
                <li>Die meisten DBMS im Web arbeiten nach dem <keyword>Client-Server-Prinzip</keyword>. </li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Nennen Sie <b>Arten von Webanwendungen</b>, die Datenbanken verwenden!</p>
                    </question_text>
                    <answer correct="correct">Produktdatenbanken</answer>
                    <answer correct="correct">Informationssysteme</answer>
                    <answer correct="correct">Online-Spiele</answer>
                    <answer correct="correct">Online-Shops</answer>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: sprachlich Antworten zu vollständigen Sätzen umformliert -->
                    <question_text>
                        <p>Was ist ein <i>Datenbank-Management-System (DBMS)</i>?</p>
                    </question_text>
                    <answer>Ein DBSM ist ein Großrechner, auf dem eine Datenbank läuft.</answer>
                    <answer>DBMS ist eine Systemsprache zur Datenverwaltung</answer>
                    <answer>Ein DBMS ist die eigentliche Sammlung der Daten.</answer>
                    <answer correct="correct">Ein DBMS ist das Software-System, das die Daten verwaltet.</answer>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: Frage klarer und eben auch als Frage formuliert, MongoDB als Distraktor herausgenommen, den das kennen die TN nicht. Woher sollen sie das dann wissen? Nur weil hier etwas nicht besprochen wird, kann man nicht automatisch daraus den Schluss ziehen, dass es sich dabei um eine nicht-relationale handelt. Google geht hier auch nicht. -->
                    <question_text>
                        <p>Bei welchen der folgenden Datenbank-Management-Systemen handelt es sich um relationale Datenbank-Management-Systeme? </p>
                    </question_text>
                    <answer correct="correct">SQLite</answer>
                    <answer correct="correct">PostgreSQL</answer>
                    <answer correct="correct">Oracle</answer>
                    <answer correct="correct">MySQL</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt (WE-ID 5748)-->
                    <question_text>
                        <p>Was ist MySQL?</p>
                    </question_text>
                    <answer>
                        <p>eine Datenbank</p>
                    </answer>
                    <answer correct="correct">
                        <p>Datenbankmanagementsystem (DBMS)</p>
                    </answer>
                    <answer>
                        <p>eine Datenbank-Abfragesprache</p>
                    </answer>
                    <answer>
                        <p>eine schwedische Firma</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">

                    <question_text>
                        <p>Zum Entwickeln einer Datenbank benötigen Sie zwingend:</p>
                    </question_text>
                    <answer correct="correct">
                        <p>ein DBMS</p>
                    </answer>
                    <answer correct="correct">
                        <p>einen DB-Client</p>
                    </answer>
                    <answer>
                        <p>einen Browser</p>
                    </answer>
                    <answer>
                        <p>eine komfortable IDE</p>
                    </answer>
                </question>
            </questions>
        </lesson>
        <lesson id="db_praxis">
            <lesson_name>Datenbanken in der Praxis</lesson_name>
            <topics>
                <li>welche Programme Sie zur Datenbankentwicklung benötigen.</li>
                <li>wie Sie Datenbanken erstellen, auflisten und löschen.</li>
                <li>wie Sie in BNF jemanden an einen Löwen verfüttern.</li>
            </topics>
            <h1>Einrichten einer Entwicklungsumgebung</h1>
            <p>Damit Sie Datenbanken erstellen können, müssen Sie zumindest ein DBMS und einen Datenbank-Client installieren. MySQL ist sowohl unter der OpenSource-Lizenz <i>GPL</i> als auch kommerziell erhältlich. In dieser Class setzen Sie das freie DBMS <i>MySQL</i> ein. <i>MySQL</i> ist das am weitesten verbreitete Open-Source DBMS<footnote>Quelle: <a href="https://db-engines.com/de/ranking">DB-Engines Ranking</a> abgerufen am 24.02.2020</footnote>. Es ist eine kostengünstige und effektive Lösung für kleine und mittlere Projekte und wird oft sogar von großen Organisationen wie z.B. <i>Yahoo!</i>, <i>Slashdot</i> oder der <i>NASA</i> eingesetzt.</p>
            <p>Eine vollständige Entwicklungsumgebung besteht, neben dem DBMS, aus weiteren Paketen wie z.B. Webserver, Programmiersprachen, Editor und Datenbank-Client. Die Installation und Konfiguration all dieser Werkzeuge, Sprachen etc. ist nicht immer ganz einfach. Deswegen gibt es <keyword>Distributionen</keyword>, die eine Auswahl an Paketen bündeln und somit sowohl eine einfache Installation als auch eine bereits angepasste Konfiguration bieten. </p>
            <figure float="right" width="15%">
                <img src="images/mamp_logo.gif"/>
                <figcaption>MAMP Logo</figcaption>
            </figure>
            <p>Ich empfehle Ihnen, die kostenlose Distribution <keyword>MAMP</keyword> (für macOS und Windows) zu verwenden. Die Distribution enthält unter anderem folgende Pakete:</p>
            <ul>
                <li>
                    <i>MySQL</i> (DBMS)</li>
                <li>
                    <i>Apache</i> (Webserver)</li>
                <li>
                    <i>PHP</i> (Programmiersprache)</li>
            </ul>
            <p>Unter  <a href="https://www.mamp.info">www.mamp.info</a> erhalten Sie <i>MAMP</i> und die dazugehörige Installationsanleitung.</p>
            <p>Sollten Sie unter einem Debian-basierten Linux – wie z.B. Ubuntu – arbeiten, installieren Sie MySQL mittels: <code>apt-get install mysql-server mysql-client</code>.</p>
            <hint>
                <h3>Achtung</h3>
                <p>
                    <i>MAMP</i> ist eine Distribution, die ausschließlich für die Entwicklung verwendet werden sollten. In Ihrer Basiskonfiguration erfüllt Sie nicht die Sicherheitsanforderungen, die notwendig sind, um einen Produktivbetrieb (insbesondere im Internet) zu gewährleisten.</p>
                <p>Für den produktiven Betrieb von Webanwendungen sind meist Unix- oder Linux-basierte Server im Einsatz. Es empfiehlt sich, im Produktivbetrieb eine Linux-Installation mit den entsprechenden Paketen zu verwenden, die vorher sorgfältig manuell konfiguriert und auf Sicherheitsaspekte getestet wurde. Wenn Sie später Anwendungen bei einem Webhoster betreiben, wird dieser das für Sie übernehmen.</p>
            </hint>
            <exercise>
                <name>MySQL-Installation</name>
                <content>
                    <ul>
                        <li>Installieren Sie nun MySQL für Ihr Betriebsstem.</li>
                    </ul>
                </content>
            </exercise>
            <h1>Starten und Stoppen von MySQL</h1>
            <h3>unter Windows und macOS</h3>
            <figure width="50%">
                <img src="images/screenshots/mamp_control_panel.png"/>
                <figcaption>Das MAMP Control-Panel</figcaption>
            </figure>
            <p>MAMP enthält ein Control Panel. Mit diesem können Sie den MySQL-Server jederzeit starten und stoppen.</p>
            <h3>unter Linux</h3>
            <p>Unter Linux können Sie MySQL mit dem Befehl</p>
            <blockcode src="code/1.txt"/>
            <p>starten und mit</p>
            <blockcode src="code/2.txt"/>
            <p>wieder anhalten.</p>
            <exercise>
                <name>MySQL-Server starten und stoppen</name>
                <content>
                    <p>Probieren Sie nun das Starten und Stoppen aus! Achten Sie darauf, dass der Server nach der Übung wieder gestartet ist!</p>
                </content>
            </exercise>
            <h1>SQL</h1>
            <p>Innerhalb des DBMS gibt es mehrere Datenbanken. Wenn Sie wissen möchten, welche Datenbanken es bereits gibt, können Sie das DBMS (oder genauer den DB-Server) einfach fragen. Sie können eine Frage nicht auf Deutsch stellen. Verwenden Sie die Sprache, die der Server versteht. Praktischerweise verstehen fast alle modernen relationalen DBMS die Sprache <i>SQL</i>. Dazu benötigen Sie einen Client, der die Anfrage stellen kann. Später werden Sie Ihre eigenen Clients in Form von Webanwendungen programmieren. Im einfachsten Fall reicht uns zum Testen und Üben aber der von MySQL mitgelieferte Kommandozeilen-Client. Damit Sie diesen Client von überall aus aufrufen können, müssen Sie ihn noch in den Pfad der ausführbaren Dateien eintragen.</p>
            <ul>
                <li><b>Linux/MySQL:</b> Geschieht automatisch. Sie müssen nichts tun.</li>
                <li><?oxy_comment_start author="admin" timestamp="20201020T141849+0200" comment="ich fand diese Anleitungen nicht sehr hilfreich"?><b>macOS/MAMP:</b>
                    Fügen Sie den <a href="https://sites.google.com/site/mamppro/de/mamp/howtos/mysql-ueber-die-komandozeile-nutzen">Pfad</a>
                    <i>/Applications/MAMP/Library/bin/mysql</i> zu den Systempfaden hinzu. Fall Sie
                    auf Schwierigkeiten stoßen, hilft Ihnen vielleicht dieser <a href="https://macokratie.blogspot.com/2014/10/path-umgebungsvariable-shell-variable.html">Blogbeitrag</a> weiter.<?oxy_comment_end ?></li>
                <li><b>Windows/MAMP:</b> Drücken Sie <kbd>win+Pause</kbd>, um die Systemeigenschaften zu öffnen. Wählen Sie den Reiter <i>Erweitert</i> bzw. <i>erweiterte Systemeinstellungen</i> und klicken Sie dort auf <i>Umgebungsvariablen</i>. Bearbeiten Sie die Variable <code>PATH</code> und ergänzen Sie <i>;C:\MAMP\bin\mysql\bin</i>. Starten Sie anschließend Windows neu. </li>
            </ul>
            <exercise>
                <name>MySQL-Client starten</name>
                <content>
                    <p>Starten Sie jetzt den Kommandozeilenclient:</p>
                    <ol>
                        <li>
                            <p>Öffnen Sie eine <keyword>Kommandozeile</keyword> in einem <keyword>Konsolen</keyword>- bzw. <keyword>Terminal-Fenster</keyword>.</p>
                            <p><b>Windows:</b> Entweder per <i>Start</i> &gt; <i>Programme</i> &gt; <i>Zubehör</i> &gt; <i>Eingabeaufforderung</i> oder durch Drücken der Taste <kbd>win+R</kbd> (run) und Eingabe von <code>cmd</code>.</p>
                            <p>
                                <b>macOS:</b> Öffnen Sie <i>Spotlight</i> mit der Tastenkombination <kbd>cmd-Space</kbd>. Geben Sie <i>Terminal</i> ein.</p>
                            <p>
                                <b>Linux: </b> Unter Ubuntu dient die Tastenkombination <kbd>ctrl-alt-T</kbd> als Shortcut.</p>
                        </li>
                        <li>Starten Sie den MySQL-Client in der Konsole mittels <code>mysql -u root</code>.</li>
                        <li>Wenn Sie den folgenden Fehler erhalten, ist ein Passwort voreingestellt. <command>ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)</command> Verwenden Sie nachfolgenden Befehl und geben bei der Aufforderung das Passwort <i>root</i> ein. <command>mysql -u root -p</command></li>
                    </ol>
                </content>
            </exercise>
            <p><code>mysql</code> ist das Programm. Die Angabe <code>-u root</code> bedeutet, dass es unter dem Benutzer (user) <i>root</i> gestartet wird. Dieser Benutzer besitzt alle Rechte und ist bereits angelegt. Normalerweise benötigen Sie noch ein Passwort. Nach der Installation ist das Passwort aber standardmäßig deaktiviert. Teilweise wird das Passwort <i>root</i> als Standardpasswort gesetzt. Dies kommt aber auf die Version der Distribution an. Da Sie die Datenbank im Moment nur lokal zur Entwicklung einsetzen, stellt das kein Problem dar. Für den Produktivbetrieb später müssen Sie selbstverständlich ein sicheres Passwort festlegen.</p>
            <p>Sie sollten nun den MySQL-Prompt <code>mysql&gt;</code> sehen, der es Ihnen erlaubt, SQL-Befehle einzugeben.</p>
            <figure width="100%">
                <img src="images/screenshots/mysql_prompt.png"/>
                <figcaption>MySQL-Kommandozeilen-Client</figcaption>
            </figure>
            <p>MySQL liefert bereits einige Datenbanken mit. Welche das sind, können Sie mit einem SQL-Befehl herausfinden.</p>
            <exercise>
                <name>Vorhandene Datenbanken auflisten</name>
                <content>
                    <p>Geben Sie Ihren ersten SQL-Befehl ein:</p>
                    <blockcode type="sql" src="code/3.sql"/>
                    <p>Achten Sie insbesondere darauf, dass Sie den Befehl mit einen Semikolon »;« abschließen. Sie sollten folgende Liste erhalten:</p>
                    <figure width="40%" id="show_databases">
                        <img src="images/screenshots/show_databases.png"/>
                        <figcaption>Ausgabe von <code>show databases</code></figcaption>
                    </figure>
                    <p>Falls Sie eine Datenbank mehr oder weniger als in <a href="#show_databases"/> sehen, ist das nicht weiter schlimm. Die mitgelieferten Datenbanken können sich je nach MySQL-Version und Distribution geringfügig unterscheiden.</p>
                </content>
            </exercise>
            <p>In Zukunft werde ich Ihnen übrigens bei MySQL-Ausgaben statt eines Screenshots lediglich die reine Ausgabe zeigen – immer direkt nach der dazugehörigen SQL-Anweisung. Der Informationsgehalt ist der gleiche, die Ausgabe in Codeform ist aber besser lesbar. Die obige Ausgabe lässt sich also auch so darstellen:</p>
            <blockcode type="sql" src="code/4.sql"/>
            <blockcode src="code/5.txt"/>
            <p>Ihr erstes Beispielprojekt ist eine <i>Seminarverwaltung</i> für eine private Akademie – mehr dazu erfahren Sie in der nächsten Lektion. Für diese Seminarverwaltung benötigen Sie eine eigene Datenbank.</p>
            <exercise>
                <name>Datenbank erstellen</name>
                <content>
                    <p>Legen Sie die Datenbank <i>seminarverwaltung</i> mit folgenden SQL-Befehl an:</p>
                    <blockcode type="sql" src="code/6.sql"/>
                    <blockcode src="code/7.txt"/>
                </content>
            </exercise>
            <p>Ein SQL-Befehl wird auch als <keyword>Anfrage</keyword> (engl. <keyword>Query</keyword>) bezeichnet. Sie erhalten die Bestätigung <code>Query OK</code> immer dann, wenn der Befehl etwas verändert. Die Zeit in Klammern <code>(0.01 sec)</code> sagt Ihnen, dass das Anlegen der neuen Datenbank insgesamt gerade mal eine hundertstel Sekunde gedauert hat.</p>
            <p>Um zu prüfen, ob es wirklich funktioniert hat, können Sie sich auch nochmals die vorhandenen Datenbanken anzeigen lassen.</p>
            <exercise>
                <name>Datenbankerstellung prüfen</name>
                <content>
                    <p>Geben Sie die vorhandenen Datenbanken aus:</p>
                    <blockcode type="sql" src="code/8.sql"/>
                    <blockcode src="code/9.txt"/>
                    <p>Sie sollten sehen, dass Ihre neue Datenbank <i>seminarverwaltung</i> nun dabei ist.</p>
                </content>
            </exercise>
            <p>Bei dieser Gelegenheit können Sie noch die überflüssige Datenbank
                    <?oxy_comment_start author="admin" timestamp="20201020T142115+0200" comment="bei mir gab es diese Datenbank von Anfang an nicht"?><i>cdcol</i><?oxy_comment_end ?>
                löschen. <i>cdcol</i> ist eine Beispieldatenbank. Sie benötigen sie nicht
                weiter.</p>
            <exercise>
                <name>Datenbank Löschen</name>
                <content>
                    <ol>
                        <li>
                            <p>Löschen Sie die Datenbank <i>cdcol</i> mit folgenden Befehl:</p>
                            <code>DROP DATABASE cdcol;</code>
                            <code>
              Query OK, 0 rows affected (0.00 sec)
            </code>
                        </li>
                        <li>
                            <p>Ein erneutes Auflisten der Datenbanken sollte zeigen, dass die <i>cdcol</i> tatsächlich gelöscht wurde.</p>
                        </li>
                    </ol>
                    <blockcode type="sql" src="code/10.sql"/>
                    <blockcode src="code/11.txt"/>
                </content>
            </exercise>
            <h1>Was ist nun eigentlich SQL?</h1>
            <p>Kurz gesagt ist SQL eine sogenannte <keyword>Abfragesprache</keyword>. Sie wird von vielen DBMS verwendet, um mit einer Anwendung (d.h. einem Client) zu kommunizieren. Abfragesprache bedeutet, dass Sie damit das DBMS ansteuern können. Sie können Daten in jede Richtung übertragen oder Befehle zur Verwaltung der Daten absenden. Auch Konfigurationseinstellungen lassen sich per SQL übermitteln.</p>
            <p>Heute wird SQL als Abkürzung für <keyword><b>S</b>tructured <b>Q</b>uery <b>L</b>anguage</keyword> gedeutet. Ursprünglich kommt der Begriff aber von <keyword>SEQUEL</keyword> (Structured English Query Language bzw. Nachfolger). Die Buchstaben dazwischen wurden wegen einer Markenrechtsverletzung gestrichen.</p>
            <p>SQL ist aber keine Programmiersprache – Sie können keine vollständigen Anwendungen in SQL schreiben. Dazu müssen Sie einen Client in einer anderen Sprache programmieren (wie z.B. PHP oder Ruby). Von dieser Sprache aus greifen Sie dann mit Hilfe von eingebundenem SQL auf das DBMS zu.</p>
            <p>Es gibt einen SQL-Standard, der die Sprache grundsätzlich beschreibt. Kein DBMS hält sich aber genau an den Standard. Stattdessen verwendet jedes DBMS seinen eigenen Dialekt. Der lässt dann meist große Teile des Standards außer Acht, bietet dafür aber viele eigene Erweiterungen. Dies gilt insbesondere auch für MySQL.</p>
            <h1>BNF</h1>
            <p>Um SQL-Befehle in einer allgemeinen Form angeben zu können, verwende ich die sogenannte <keyword>BNF</keyword>. BNF steht für <keyword>Backus-Naur-Form</keyword>, nach den Namen der beiden Entwickler. Es handelt sich dabei um eine sogenannte <keyword>Metasprache</keyword>, mit der sich andere Sprachen, wie z.B. Programmiersprachen beschreiben und definieren lassen. Sie lernen im Laufe dieses Kurses immer mal wieder neue BNF-Symbole kennen. Von der BNF gibt es viele verschiedene Versionen. Einen guten Überblick finden Sie in <a href="https://homepages.uni-regensburg.de/~brf09510/grammartypes.html">Braun (2007)</a>. Wir verwenden hier die BNF-Version von MySQL.</p>
            <p>Dadurch können Sie jederzeit die <a href="https://dev.mysql.com/doc/">offizielle MySQL-Dokumentation</a> verwenden. Sie ist angelehnt an den ISO/IEC 14077-Standard der BNF, der auch im SQL-Standard Verwendung findet.</p>
            <p>In der einfachsten Form lässt sich ein Befehl durch zwei Konzepte beschreiben – durch <keyword>Schlüsselwörter</keyword> und andere fest-definierte Anweisungen auf der einen Seite und <keyword>Platzhalter</keyword> auf der anderen. Schlüsselwörter und andere fest-definierte Anweisungen müssen Sie exakt notieren. Für Platzhalter dürfen Sie eigene Werte einsetzen. Zeichen, die Sie direkt angeben, nennt die BNF <keyword>Terminale</keyword>. Das bedeutet, sie sind »zu Ende«, im Sinne von »sie werden nicht weiter ersetzt«. Die Platzhalter, die Sie später ersetzen, nennt die BNF dementsprechend <keyword>Nichtterminale</keyword> oder <keyword>Variablen</keyword>. Zur Unterscheidung setzen Sie einfach Groß- und Kleinschreibung ein. Terminale schreiben Sie groß, Nichtterminale dagegen klein.</p>
            <h3>Beispiel</h3>
            <p>Betrachten Sie etwa folgenden BNF-Ausdruck:</p>
            <blockcode src="code/12.txt"/>
            <p>Der folgende BNF-Ausdruck etwa könnte wahlweise von einem wütenden Römer oder einem wütenden Bauern stammen. Es kommt eben darauf an, ob Sie für <code>gefrässige_tierart</code> Löwen oder Schweine einsetzen. <code>gefrässige_tierart</code> ist hier ein Nichtterminal, alle anderen Wörter dieses Ausdrucks sind Terminale. Es lassen sich beliebig viele Nichtterminale in einem Ausdruck verwenden, wie z.B. in folgendem:</p>
            <blockcode src="code/13.txt"/>
            <p>Beachten Sie, dass die Variablen ein Underscore-Zeichen »_« verwenden, um einzelne Wörter zu verbinden. Sie können kein Leerzeichen verwenden, da das Wort sonst als zwei Variablen gelesen wird. Schließlich könnten zwei Variablen direkt aufeinander folgen.</p>
            <h3>Beispiel</h3>
            <blockcode src="code/14.txt"/>
            <p>Diese Variablen können Sie z.B. mit <i>rotes Fahrrad</i> oder <i>blaues Auto</i> ausprägen.</p>
            <h3>Datenbanken zeigen, anlegen und löschen in BNF</h3>
            <p>Da Sie die BNF nun kennen, kann ich Ihnen auch die BNF-Form der drei SQL-Befehle zeigen, die Sie schon verwendet haben.</p>
            <p>Bestehende Datenbanken anzeigen:</p>
            <blockcode type="sql" src="code/15.sql"/>
            <p>Hier gibt es keinen Unterschied zum SQL, da Sie nur Schlüsselwörter verwenden.</p>
            <p>Eine Datenbank anlegen:</p>
            <blockcode type="sql" src="code/16.sql"/>
            <p>Eine Datenbank löschen:</p>
            <blockcode type="sql" src="code/17.sql"/>
            <h1>Konfiguration</h1>
            <p> Um von Anfang an durchgängig Internationalisierung zu ermöglichen, empfehle ich Ihnen, MySQL auf die Zeichenkodierung <i>UTF-8</i> umzustellen. Außerdem sollten Sie den SQL-Modus umstellen, damit sich MySQL möglichst konform zum SQL-Standard verhält.</p>
            <exercise>
                <content>
                    <ol>
                        <li>
                            <p><b>Windows/MAMP:</b> Öffnen Sie die MySQL-Konfigurationsdatei in einem Texteditor. Sie finden diese Datei unter <i>‪C:\MAMP\conf\mysql\my.ini</i>.</p>
                            <p><b>macOS MAMP:</b> Legen Sie die Datei <i>my.cnf</i> unter <i>/Applications/MAMP/conf</i> neu an.</p>
                            <p><b>Linux:</b> Öffnen Sie die MySQL-Konfigurationsdatei in einem Texteditor. Sie finden diese Datei unter <i>/etc/mysql/my.cnf</i> (Linux).</p>
                        </li>
                        <li>
                            <p>Tragen Sie folgende Konfigurationen ein:</p>
                            <code>
              [mysqld]
              character-set-server=utf8
              sql-mode="TRADITIONAL"
            </code>
                        </li>
                        <li>Starten und Stoppen Sie den MySQL-Server.</li>
                    </ol>
                </content>
            </exercise>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>MAMP hilft Ihnen dabei, schnell eine funktionierende Entwicklungsumgebung einzurichten.</li>
                <li>Verwenden Sie SQL, um mit dem DBMS zu kommunizieren.</li>
                <li>Die BNF ist eine Metasprache, die die Syntax eines SQL-Befehls darstellen kann. Lesen Sie BNF-Ausdrücke, wenn Sie neue SQL-Befehle verstehen möchten!</li>
            </ul>
            <h3>BNF</h3>
            <table>
                <caption>Bisherige BNF-Konzepte</caption>
                <thead>
                    <tr>
                        <th>Konzept</th>
                        <th>Darstellung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Terminale</td>
                        <td>Wort in Großbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Nichtterminale (Variablen)</td>
                        <td>Wort in Kleinbuchstaben</td>
                    </tr>
                </tbody>
            </table>
            <h3>SQL</h3>
            <table>
                <caption>Bisheriges SQL</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbanken auflisten</td>
                        <td><code>SHOW DATABASES</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <!-- rvh: fehlerhaft. erstens: SQL ist mehrdeutig (siehe Wikipedia) und 2. Abfragesprache ist auch zu ungenau. Wenn dann Datenbank-Abfragesprache
      me: richtige Antwort korrigiert. Die Mehrdeutigkeit sehe ich nicht, der Kontext ist klar, es geht sicher nicht um das "standard quantum limit"
-->
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Was ist SQL?</p>
                    </question_text>
                    <answer>eine Programmiersprache</answer>
                    <answer correct="correct">eine Datenbank-Abfragesprache.</answer>
                    <answer>ein DBMS</answer>
                    <answer>eine Datenbank</answer>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Eine Bündelung von verschiedenen Software-Paketen mit gemeinsamen Installer nennt man …</p>
                    </question_text>
                    <answer correct="correct">Distribution</answer>
                    <answer>Packet</answer>
                    <answer>Repository</answer>
                    <answer>Datenbank</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Symbole in der BNF, die nicht weiter ersetzt werden können, heißen…</p>
                    </question_text>
                    <answer correct="correct">Terminale</answer>
                    <answer>Nichtterminale</answer>
                    <answer>Variablen</answer>
                    <answer>Operatoren</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Symbole in der BNF, die sich weiter ersetzen lassen, heißen…</p>
                    </question_text>
                    <answer>Terminale</answer>
                    <answer correct="correct">Nichtterminale</answer>
                    <answer correct="correct">Variablen</answer>
                    <answer>Operatoren</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>BNF ausprägen</name>
                <content>
                    <p>Entwickeln Sie jeweils zwei Ausprägungen der folgenden BNF-Ausdrücke:</p>
                    <ul>
                        <li>farbe IST MEINE LIEBLINGSFARBE.</li>
                        <li>IN MEINEM NÄCHSTEN JOB WERDE ICH MINDESTENS gehalts_betrag währung VERDIENEN.</li>
                    </ul>
                </content>
                <answer>
                    <p>1. farbe IST MEINE LIEBLINGSFARBE.</p>
                    <ul>
                        <li>blau IST MEINE LIEBLINGSFARBE.</li>
                        <li>schwarz IST MEINE LIEBLINGSFARBE.</li>
                    </ul>
                    <p>2. IN MEINEM NÄCHSTEN JOB WERDE ICH MINDESTENS gehalts_betrag währung VERDIENEN.</p>
                    <ul>
                        <li>IN MEINEM NÄCHSTEN JOB WERDE ICH MINDESTENS 1800 Euro VERDIENEN.</li>
                        <li>IN MEINEM NÄCHSTEN JOB WERDE ICH MINDESTENS 2500 Dollar VERDIENEN.</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Datenbanken Löschen und Anlegen</name>
                <content>
                    <ol>
                        <li>
                            <p>Zeigen Sie erneut alle Datenbanken an.</p>
                        </li>
                        <li>
                            <p>Löschen Sie die Datenbank <i>test</i>.</p>
                        </li>
                        <li>
                            <p>Legen Sie folgende neuen Datenbanken an:</p>
                            <ul>
                                <li>fluggesellschaft</li>
                                <li>filmverleih</li>
                                <li>partnervermittlung</li>
                            </ul>
                        </li>
                        <li>
                            <p>Prüfen Sie, ob das Anlegen der neuen Datenbanken gelungen ist.</p>
                        </li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li><code>SHOW DATABASES;</code></li>
                        <li><code>DROP DATABASE test;</code></li>
                        <li><blockcode src="code/18.txt"/>
                        </li>
                        <li><code>SHOW DATABASES;</code></li>
                    </ol>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Datenbankdesign: Das Domänenmodell</lesson_name>
            <topics>
                <li>wie Sie Kundenanforderungen in ein Domänenmodell übertragen.</li>
                <li>die Modellierungssprache UML kennen.</li>
                <li>wie Sie Klassendiagramme zeichnen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Das Schöne an Standards ist, dass es so viele gibt, aus denen man wählen kann.</p>
                </blockquote>
                <figcaption>Andrew S. Tanenbaum</figcaption>
            </figure>
            <p>Willkommen zu Ihrem ersten Projekt. Natürlich ist es Ihr erklärtes Ziel, mit der Entwicklung von Software genug Geld zu verdienen, damit Sie sich bald möglichst in die Karibik absetzen können. Dazu brauchen Sie aber Kunden – und diese sollten Sie optimal zufriedenstellen. Dann kommen weitere, die auch wieder Geld mitbringen.</p>
            <p>Die folgenden Lektionen werden Sie anhand eines kleines Projektes durcharbeiten. Das Projekt verwendet ein sogenanntes iterativ-inkrementelles Vorgehen, wie es in agilen Entwicklungmethoden üblich ist. Eine ausführliche Erläuterung dazu finden Sie im Anhang.</p>
            <h1>Ein Kundengespräch</h1>
            <p>Stellen Sie sich vor, Ihr erster Kunde ist eine private Akademie, die ihre Kurse im Internet anbieten möchte. Mit der aktuellen Website des Unternehmens ist das zwar möglich, die Pflege der statischen Seiten ist jedoch sehr aufwendig und fehleranfällig. Da die neue Site Datenbank-basiert sein soll, hat sich die Akademie an einen Spezialisten gewandt: An Sie!</p>
            <p>Sie treffen sich also mit einer Mitarbeiterin der Akademie, die ihre Situation wie folgt schildert:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir benötigen eine Anwendung, um unsere Kurse zu verwalten. Unsere Kunden sollen auf der Website jeweils Titel, Beschreibung und Preis der Seminare einsehen. Unsere Mitarbeiter müssen neue Seminare anlegen, löschen und editieren. Natürlich benötigen wir auch eine Übersicht, die alle Seminare anzeigt. Ach ja, und eine Suchfunktion wäre ganz nützlich, es sind recht viele Seminare.</p>
            </hint>
            <p>Sie legt Ihnen eine Liste von Beispieldaten vor:</p>
            <ul>
                <li>Ruby on Rails<br/>
                    <b>Beschreibung</b>: Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf…<br/>
                    <b>Preis</b>: 1900,00 € </li>
            </ul>
            <ul>
                <li>Ajax &amp; DOM<br/>
                    <b>Beschreibung</b>: Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle…<br/>
                    <b>Preis</b>: 1699,99 € </li>
            </ul>
            <ul>
                <li>JavaScript<br/>
                    <b>Beschreibung</b>: JavaScript ist eine Programmiersprache mit vielseitigen …<br/>
                    <b>Preis</b>: 2500,00 € </li>
            </ul>
            <ul>
                <li>Datenbanken &amp; SQL<br/>
                    <b>Beschreibung</b>: Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …<br/>
                    <b>Preis</b>: 975,00 € </li>
            </ul>
            <p>Sie können die Anforderungen jetzt aufnehmen. In welcher Form Sie das tun, ist weniger entscheidend und hängt vom jeweiligen Vorgehensmodell ab. Alle agilen Vorgehensmodelle sind sich aber darin einig, dass menschliche Kommunikation essenziell ist (Beck K. et al, 2001). Geben Sie sich also nicht mit einer rein textuellen Beschreibung zufrieden, sondern verlangen Sie immer ein persönliches Gespräch mit einem Mitarbeiter, der die Anforderungen kennt! Die Gefahr von Missverständnissen bei sogenannten Lasten- und Pflichtenheften oder anderen textuellen Beschreibungen ist einfach zu hoch, wie viele gescheiterte Projekte beweisen (<a href="https://de.wikipedia.org/wiki/Chaos-Studie">Standish Group, 1994</a>).</p>
            <p>Die geschilderten Anforderungen bilden die erste Iteration. Bevor die Kundin Sie nun noch stundenlang über weitere geplante Features informiert – und glauben Sie mir, die Dame kann reden ohne Luft zu holen – bieten Sie ihr an, diesen Kern an Funktionen erst einmal umzusetzen. Bei einem weiteren Treffen kann sie sich das Ergebnis anschauen und entscheiden, was ihre Firma als nächstes benötigt. Damit vermeiden Sie das <keyword>Big Design Up Front</keyword>-Problem, bei dem am Anfang zu viel Zeit in das Design von Anwendung und Datenbank gesteckt wird – nur um dann später festzustellen, dass der Kunde eigentlich doch etwas anderes möchte.</p>
            <p>Es ist möglich, dass Sie Ihre Kundin missverstehen – das ist leider durchaus nicht ungewöhnlich, sondern liegt im Wesen der menschlichen Kommunikation. Vielleicht ändert die Kundin auch einfach ihre Meinung. Änderungen am Markt oder ein wachsendes Verständnis der Bedürfnisse der Anwender führen oft zu Änderungswünschen bei den Anforderungen. Aber das ist auch gut so – zumindest für den Anwender. Dem Entwickler kann es unter Umständen schlaflose Nächte bereiten.</p>
            <p>In einem realen Projekt würden Sie nun die Anforderungen erheben und dokumentieren. Das ist aber abhängig vom Vorgehensmodell und würde den Rahmen dieses Kurses sprengen. Stattdessen gehen Sie gleich zur Planung über.</p>
            <hint>
                <p>Eine gute Übersicht über agile <keyword>Erhebungstechniken</keyword> für Anforderungen (sogenanntes <keyword>Requirements Engineering</keyword>) finden Sie bei Hruschka, Rupp &amp; Starke (2004).</p>
            </hint>
            <p>Beginnen Sie nicht sofort mit der Programmierung, sondern legen Sie sich zunächst eine sinnvolle Struktur zurecht. Damit sparen Sie Zeit und vermeiden das typische »<i>Ich sehe den Wald vor lauter Bäumen nicht mehr</i>«-Problem. Nur sollten Sie es auch nicht übertreiben, indem Sie tagelang Ihre Planung perfektionieren, ohne sich an den Code heranzutrauen.</p>
            <hint>
                <h3>Die Goldlöckchen-Lösung</h3>
                <p>Eines der Kernprobleme der Softwareentwicklung ist, dass es viele gute Techniken und Prinzipien gibt, die aber durch <i>Zuviel des Guten</i> schnell zu schlechten Techniken und Prinzipien werden. Mit ein wenig Zeit und Erfahrung finden Sie in allem den richtigen Mittelweg. Eine sehr interessante Darstellung des Problems ist das Märchen <i>Die drei Bären</i>. In diesem Märchen versucht ein Mädchen, in verschiedenen Situationen immer einen optimalen Kompromiss zu finden. Wegen der gold-gelockten Haare des Mädchens hat sich in der Softwareentwicklung der Begriff <keyword>Goldlöckchen-Lösung</keyword> (<a href="http://www.c2.com/cgi/wiki?GoldilocksSolution">Goldilocks-Solution</a>) durchgesetzt.</p>
                <blockquote>
                    <p>Zuerst kostete sie aus der größten Schüssel. »Uh«, sagte sie, "das ist viel zu heiß!«, und spuckte den Brei einfach wieder aus. Dann versuchte sie es mit der mittelgroßen Schüssel. »Uh«, schrie sie, »das ist viel zu kalt«. […]</p>
                    <p>Schließlich kostete Goldlöckchen aus der kleinsten Schüssel. Da sagte sie nichts mehr, denn sie war zu beschäftigt damit, alles aufzuessen. Der Brei war nämlich genau richtig. </p>
                </blockquote>
                <figure width="40%">
                    <img src="images/three_bears.jpg"/>
                    <figcaption>Aus dem Projekt Gutenberg E-Book, <a href="https://www.gutenberg.org/etext/17043"><i>English Fairy Tales</i></a>
                    </figcaption>
                </figure>
            </hint>
            <p>Im Umfeld der Softwareentwicklung gibt es eine Unmenge an verschiedenen Analyse‑, Modellierungs- und Designtechniken, einhergehend mit einer genauso großen Unmenge an Diagrammtypen und Notationsformen. Statt nun massenhaft Techniken zu besprechen, zeige ich Ihnen nur einige wenige. Diese wenigen sind aber ausreichend, um eine moderne Webanwendung zu entwickeln.</p>
            <h1>Das Domänenmodell</h1>
            <p>Zunächst erstellen Sie ein sogenanntes <keyword>Domänen-</keyword> oder <keyword>Konzept-Modell</keyword>. Dieses Modell ist noch Technologie-unabhängig und beschreibt die Kernkonzepte der Anwendung. Es heißt <keyword>Domänenmodell</keyword>, da es die Sicht der Anwendungsdomäne (z.B. Seminare &amp; Lehre, Büchershop, Addressverwaltung usw.) vertritt. Anders ausgedrückt: Es verwendet ausschließlich Begriffe aus dem Fachvokabular des Anwenders – nicht des Entwicklers!</p>
            <p>In welcher Form lässt sich ein solches Modell darstellen? Üblicherweise ist ein Diagramm das Mittel der Wahl. Rein textuelle Beschreibungen sind aber durchaus auch möglich. Früher begannen Datenbankentwickler meist mit einem sogenannten <keyword>Entity-Relationship-Diagramm</keyword> (kurz <keyword>ERD</keyword>). In der modernen Softwareentwicklung hat sich jedoch die Modellierungssprache <keyword>UML</keyword> durchgesetzt. Aber auch heute arbeiten noch viele Firmen mit ERDs. Letztendlich ist es auch etwas Geschmacksache. Falls Sie noch nicht mit der UML in Berührung gekommen sind, hier ein kurzer Abriss:</p>
            <h2>UML</h2>
            <p>
                <keyword>UML</keyword> steht für <keyword>Unified Modeling Language</keyword>. Es handelt sich dabei um eine grafische Modellierungssprache. In der Vergangenheit gab es häufig das Problem, dass verschiedene Entwicklergruppen unterschiedliche Diagrammnotationen verwendeten, z.B. OOSE, OMT oder OPEN/OML. Viele Teams definierten gar ihre eigene Notation – was die geradezu babylonische Sprachverwirrung nur noch weiter förderte. Das erschwerte es einem Entwickler, die Diagramme anderer zu verstehen. Schließlich haben sich 1995 drei führende Methodiker (James Rumbaugh, Ivar Jacobson und Grady Booch) zusammengeschlossen, um eine einheitliche Notation hervorzubringen: die UML. Heute ist UML ein Industriestandard der <i>OMG</i> (<i>Object Management Group</i>). Sie besteht aus einer Reihe von Diagrammtypen. Aus der Menge dieser Diagrammtypen sind für Sie zunächst nur <keyword>Klassendiagramme</keyword> relevant.</p>
            <h2>Klassendiagramm</h2>
            <p>Sie erstellen nun das Domänenmodell der Seminarverwaltung in Form eines Klassendiagrammes. Beginnen Sie damit, dass Sie Basiskonzepte identifizieren und als Klasse darstellen. Eine Klasse stellt dabei eine Art Stellvertreter oder auch Blaupause für alle Ihre Exemplare dar. In diesem Fall möchten Sie verschiedene Exemplare von Seminaren verwalten. Somit lässt sich das Seminar als Klasse identifizieren. Andere Beispiele für Klassen in typischen Webanwendungen sind:</p>
            <h3>Beispiel</h3>
            <p><b>Nomen</b>: Benutzer, Gruppen, Adressen, Forumseinträge</p>
            <p>Es sollten jedenfalls immer Dinge – keine Tätigkeiten oder Eigenschaften – sein. Eine erster Check ist deswegen auch die Prüfung der Wortart. Normalerweise handelt es sich um Nomen. Verben und Adjektive sind als Klassen eher ungeeignet.</p>
            <h3>Beispiel</h3>
            <ul>
                <li><b>Verben</b>: lernen, teilnehmen, bearbeiten, löschen </li>
                <li><b>Adjektive</b>: groß, blau, essbar, gefährlich, schön </li>
            </ul>
            <p>Grundsätzlich sollten Sie im Klassendiagramm des Domänenmodells auch nur Klassen modellieren, die aus der realen Welt oder aus der Fachsprache des Anwenders stammen. Rein technische Klassen wie z.B. <i>Cache</i>, <i>Stack</i> oder <i>Fensterdialog</i> haben im Domänenmodell nichts verloren.</p>
            <p>Da es sich also bei diesen Klassen im Domänenmodell um Dinge aus der realen Welt oder der Fachsprache handelt, werden sie als <keyword>Entities</keyword> bezeichnet.</p>
            <p>Sie stellen eine Klasse in der UML grafisch dar, indem Sie sie als Rechteck zeichnen.</p>
            <figure width="25%">
                <img src="images/klassendiagramme/dm_seminar_klasse.png"/>
                <figcaption>Die Klasse <i>Seminar</i> im Domänenmodell</figcaption>
            </figure>
            <p>Um das Klassendiagramm detaillierter auszugestalten, versuchen Sie, Eigenschaften zu finden, die Sie dem Klassendiagramm zuordnen können. Schauen Sie sich nochmal die Anforderungen an.</p>
            <blockquote>
                <p>Unsere Kunden sollen auf der Website jeweils Titel, Beschreibung und Preis der Seminare einsehen.</p>
            </blockquote>
            <p>Offensichtlich lassen sich einem Seminar die Eigenschaften <i>Titel</i>, <i>Beschreibung</i> und <i>Preis</i> zuordnen. Da diese Eigenschaften für alle Exemplare von Seminaren potenziell vorhanden sind, gehören sie in die Klasse. Die einzelnen Seminare können sich in den Werten für diese Eigenschaften durchaus unterscheiden, aber jedes Seminar verfügt prinzipiell über Titel, Beschreibung und Preis.</p>
            <p>In UML erfolgt die Darstellung unterhalb des Namens der Klasse – in einem eigenen Bereich.</p>
            <figure width="25%">
                <img src="images/klassendiagramme/dm_seminar_mit_attributen.png"/>
                <figcaption>Die Klasse <i>Seminar</i> mit Attributen im Domänenmodell</figcaption>
            </figure>
            <p>Angelehnt an objekt-orientierte Programmiersprachen bezeichnet die UML die Eigenschaften als <keyword>Attribute</keyword>. Sie haben nun die Möglichkeit, das Diagramm um Verhalten zu erweitern – wiederum in einem eigenen Bereich.</p>
            <figure width="25%">
                <img src="images/klassendiagramme/dm_seminar_mit_attributen_und_methoden.png"/>
                <figcaption>Die Klasse <i>Seminar</i> mit Attributen und Methoden im Domänenmodell</figcaption>
            </figure>
            <p>Die Tätigkeiten, die Sie auf der Klasse ausführen können, bezeichnet die UML als <keyword>Methoden</keyword>. Die Klammern nach jeder Methode dienen als zusätzliche Kennzeichnung und sind der Syntax Objekt-orientierter Programmiersprachen entliehen. Bei Methoden handelt es sich grundsätzlich um Verben.</p>
            <p>Es ist auch nicht immer zwingend erforderlich, alles anzugeben. Führen Sie nur so viele Details an, wie Sie für die nächsten Schritte benötigen (<a href="http://www.agilemodeling.com/essays/amdd.htm">Agile Model Driven Development – AMDD</a>). Oftmals ist es nicht einmal notwendig, überhaupt Methoden anzugeben. Andererseits dient das Diagramm auch als Dokumentation und hilft späteren Wartungsprogrammierern, sich in Ihren Code und Ihre Datenstrukturen einzufinden. Mit zunehmender Erfahrung werden Sie sicherer bei der Entscheidung, wie viel und wie detailreich Sie modellieren müssen.</p>
            <hint src="images/scott_ambler.png">
                <h3>Scott sagt…</h3>
                <figure>
                    <blockquote>
                        <p><!--Design models need to be just barely good enough. You don't need to model every single
            detail, they don't need to be perfect, and they certainly don't need to be complete.
            Remember the last time you coded from a design spec (if you ever did)? Did you really
            look at all the fine-grained details? No, because you were competent enough to handle
            the details yourself.--> Designmodelle müssen nur gerade so gut genug sein. Man muss nicht jedes einzelne Detail modelieren, sie müssen nicht perfekt sein, und ganz sicher müssen sie nicht vollständig sein. Erinnern Sie sich, wann Sie das letzte Mal zu einer Designspezifikation programmiert hatten (falls überhaupt)? Haben Sie sich wirklich die ganzen Feinheiten angesehen? Nein, weil Sie kompetent genug waren, die Details selbst auszuarbeiten.</p>
                    </blockquote>
                    <figcaption>Dr. Dobb's Magazin May/04: 15 Design Tips</figcaption>
                </figure>
            </hint>
            <p>Das fertige Domänenmodell können Sie übrigens Ihrer Kundin zeigen. Es hat insbesondere den Vorteil, dass es auch Nicht-Entwickler ohne Vorwissen verstehen können.</p>
            <h1>Richtlinien für Klassendiagramme</h1>
            <p>Über die Basisregeln von UML hinausgehend, haben sich bei Klassendiagrammen einige Richtlinien eingebürgert:</p>
            <ul>
                <li>Schreiben Sie Klassennamen groß und im Singular.<br/><b>Beispiel:</b> Benutzer, Gruppe, Adresse, Forumseintrag</li>
                <li>Schreiben Sie Attributnamen klein.<br/><b>Beispiel:</b> titel, beschreibung, preis</li>
                <li>Schreiben Sie Methodennamen klein.<br/><b>Beispiel:</b> buche, kaufe, speichere</li>
            </ul>
            <h1>Mehrere Klassen</h1>
            <p>Sie haben die Seminarklasse gerade fertig modelliert, da ruft Ihre Kundin wieder an:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Hallo. Ich hoffe, ich störe Sie nicht. Mir ist noch etwas eingefallen. Wir benötigen noch ganz dringend die Möglichkeit, dass sich Benutzer in der Anwendung registrieren können. Dabei muss der Zeitpunkt der Registrierung erfasst werden und die Angabe von Vor- und Nachname ist Pflicht.</p>
                <p>Anmelden können sie sich dann mit E-Mail-Adresse und Passwort.</p>
            </hint>
            <p>In der Realität würden Sie diese Anforderungen zwar aufnehmen, jedoch noch nicht umsetzen. Im Sinne des agilen Vorgehens setzen Sie zuerst ein Feature komplett um, bevor Sie weitere analysieren, designen etc. Im Wesentlichen möchte ich Ihnen an dieser Stelle aber einfach nur zeigen, dass ein Diagramm normalerweise mehrere Klassen enthält.</p>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_seminar_und_benutzer.png"/>
                <figcaption>Seminare und Benutzer im Domänenmodell</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Reden Sie mit Ihrem Kunden! Verlassen Sie sich nicht nur auf schriftliche Spezifikationen.</li>
                <li>Ein Domänenmodell beschreibt die Kernkonzepte einer Anwendung aus Sicht des Anwenders – nicht des Entwicklers. </li>
                <li>UML ist eine grafische Modellierungssprache.</li>
                <li>In einem Klassendiagramm stellen Sie Klassen mit Methoden und Attributen dar.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Eine Entität im Sinne der Domänmodellierung…</p>
                    </question_text>
                    <answer correct="correct">…kann ein materielles Objekt darstellen.</answer>
                    <answer correct="correct">…kann ein abstraktes Konzept repräsentieren.</answer>
                    <answer correct="correct">…kann über Attribute verfügen.</answer>
                    <answer>…kann nicht über Attribute verfügen.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welche der folgenden Begriffe eignen sich als Entities?</p>
                    </question_text>
                    <answer>
                        <p>Grün</p>
                    </answer>
                    <answer correct="correct">
                        <p>Auto</p>
                    </answer>
                    <answer correct="correct">
                        <p>Warenkorb</p>
                    </answer>
                    <answer>
                        <p>Ausbilden</p>
                    </answer>
                    <answer correct="correct">
                        <p>Buch</p>
                    </answer>
                  <!--  <answer>
                        <p><?oxy_comment_start author="tschneid" timestamp="20200224T190606+0100" comment="Diese Frage hat sechs Antwortoptionen. Werden diese alle gebraucht?"?>Lesen<?oxy_comment_end?></p>
                    </answer>-->
                </question>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Mit welchem Diagrammtyp begannen Datenbankentwickler die Modellierung, bevor UML zur Verfügung stand? Gesucht ist die Abkürzung.</p>
                        <p><blank>ER</blank>-Diagramm</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Mit welchen grafischen Notationen lassen sich Domänenmodelle darstellen?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>UML</p>
                    </answer>
                    <answer correct="correct">
                        <p>ERD</p>
                    </answer>
                    <answer>
                        <p>SQL</p>
                    </answer>
                    <answer>
                        <p>BNF</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5757), bestätigt: rvh -->
                    <question_text>
                        <p>Aus welchen drei Teilen besteht eine Klasse in einem Klassendiagramm?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>Attribute</p>
                    </answer>
                    <answer correct="correct">
                        <p>Methoden</p>
                    </answer>
                    <answer>
                        <p>Beziehungen</p>
                    </answer>
                    <answer correct="correct">
                        <p>Name der Klasse</p>
                    </answer>
                    <answer>
                        <p>Datensätze</p>
                    </answer>
                   <!-- <answer>
                        <p>SQL-<?oxy_comment_start author="tschneid" timestamp="20200224T190639+0100" comment="Diese Frage hat sechs Antwortoptionen. Werden diese alle gebraucht?"?>Anweisungen<?oxy_comment_end?></p>
                    </answer>-->
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5758) Achtung: korrigiert (Distraktor), muss nachgezogen werden -->
                    <question_text>
                        <p>Welches Modell beschreibt die Anforderungen einer Anwendung aus Kundensicht und zeigt z.B. noch keine SQL-Datentypen?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>das Domänenmodell</p>
                    </answer>
                    <answer>
                        <p>das physische Modell</p>
                    </answer>
                    <answer>
                        <p>das relationale Modell</p>
                    </answer>
                    <answer>
                        <p>das Netzwerkmodell</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Finden Sie die Fehler</name>
                <content>
                    <p>In folgendem Domänenmodell eines Online-Shops haben sich mehrere Fehler eingeschlichen. Finden Sie sie und kreisen Sie sie ein! Notieren Sie Verbesserungsvorschläge, falls möglich.</p>
                    <figure width="70%">
                        <img src="images/klassendiagramme/dm_fehler_finden.png"/>
                    </figure>
                </content>
                <answer>
                    <figure width="50%">
                        <?oxy_comment_start author="admin" timestamp="20201020T142346+0200" comment="&quot;zählen&quot; müsste in der Abbildung eingekreist sein"?>
                        <img src="images/loesungen/datenbankdesign_domaenenmodell/finden_sie_die_fehler.png"/><?oxy_comment_end ?>
                    </figure>
                    <ul>
                        <li>Statt <i>rohlinge</i> sollten Sie <i>Rohling</i> schreiben – groß und im Singular.</li>
                        <li>Attribute werden üblicherweise kleingeschrieben. Deswegen ist <i>cpu</i> besser als <i>CPU</i>.</li>
                        <li>2 kg ist ein Wert. Ein sinnvolles Attribut wäre <i>gewicht</i>.</li>
                        <li>Besser als <i>farbig</i> wäre <i>farbe</i>.</li>
                        <li>Statt <i>zählen</i> sollten Sie <i>anzahl</i> verwenden.</li>
                        <li>Bei <i>liste_auf</i> fehlen die Klammern »()«.</li>
                        <li><i>Anzeige</i> ist kein Verb – besser ist: <i>anzeigen</i> oder idealerweise der Imperativ <i>zeige_an</i>.</li>
                        <li>Die Attribute <i>lagernd</i> und <i>verfügbar</i> sind nicht falsch. Sie könnten sie mit den logischen Werten TRUE/FALSE belegen. Besser eignet sich aber ein Attribut <i>lieferzustand</i>, das Sie mit Werten wie auf <i>lager</i>, <i>verfügbar</i>, <i>vorbestellt</i>, <i>nicht mehr lieferbar usw.</i> belegen.</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Begriffe</name>
                <content>
                    <p>Welche der folgenden Begriffe könnten Entities in einem Domänenmodell sein? Begründen Sie Ihre Wahl!</p>
                    <table>
                        <thead>
                            <tr>
                                <th>Begriff</th>
                                <th>Entity?</th>
                                <th>Begründung falls kein Entity</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>blau</td>
                                <td>nein</td>
                                <td>kein Nomen</td>
                            </tr>
                            <tr>
                                <td>Cache</td>
                                <td>nein</td>
                                <td>technischer Begriff</td>
                            </tr>
                            <tr>
                                <td>Seminar</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>JavaScript-Programmierung</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Person</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Entity</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Unterrichten</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Organisation</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Teilnahme</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Rechnungstabelle</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Variable</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Veranstaltung</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Dienstschnittstelle</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Mahnung</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Cron-Job</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <th>Begriff</th>
                                <th>Entity?</th>
                                <th>Begründung falls kein Entity</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>blau</td>
                                <td>nein</td>
                                <td>kein Nomen</td>
                            </tr>
                            <tr>
                                <td>Cache</td>
                                <td>nein</td>
                                <td>technischer Begriff</td>
                            </tr>
                            <tr>
                                <td>Seminar</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>JavaScript-Programmierung</td>
                                <td>nein</td>
                                <td>'JavaScript-Programmierung' ist ein Wert</td>
                            </tr>
                            <tr>
                                <td>Person</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Entity</td>
                                <td>nein</td>
                                <td>zu allgemein</td>
                            </tr>
                            <tr>
                                <td>Unterrichten</td>
                                <td>nein</td>
                                <td>kein Nomen</td>
                            </tr>
                            <tr>
                                <td>Organisation</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Teilnahme</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Rechnungstabelle</td>
                                <td>nein</td>
                                <td><i>Tabelle</i> ist ein Begriff aus der Implementierung, besser wäre hier <i>Rechnung</i></td>
                            </tr>
                            <tr>
                                <td>Variable</td>
                                <td>nein</td>
                                <td>technischer Begriff</td>
                            </tr>
                            <tr>
                                <td>Veranstaltung</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Dienstschnittstelle</td>
                                <td>nein</td>
                                <td>technischer Begriff</td>
                            </tr>
                            <tr>
                                <td>Mahnung</td>
                                <td>ja</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Cron-Job</td>
                                <td>nein</td>
                                <td>technischer Begriff</td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
        </lesson>
        <lesson id="lesson_uml_tool">
            <lesson_name>Einführung in Draw.io</lesson_name>
            <topics>
                <li>wie Sie mit dem Programm <i>Draw.io</i> UML-Diagramme zeichnen können.</li>
            </topics>
            <h1>Vorteile von UML-Werkzeugen</h1>
            <p>UML-Diagramme können Sie natürlich problemlos mit Stift &amp; Papier zeichnen. Es hat allerdings auch Vorteile, ein spezielles Werkzeug einzusetzen:</p>
            <ul>
                <li>Sie haben Ihre Diagramme in elektronischer Form und können sie zu den anderen Projektdateien ablegen.</li>
                <li>Sie müssen Ihre Zeichnungen nicht erst einscannen, um Sie z.B. per E-Mail zu verschicken.</li>
                <li>Ein UML-Werkzeug kennt bereits die UML-Konzepte und erzwingt somit die Einhaltung des Standards.</li>
            </ul>
            <p>Im Grunde spielt es keine große Rolle, welches UML-Werkzeug Sie einsetzen. Da Sie hier nur grundlegende Features benötigen, sind fast alle geeignet. Ein Werkzeug, das ich Ihnen empfehlen kann, ist <a href="https://www.draw.io">https://www.draw.io</a>. Es handelt sich um ein Illustrationsprogramm, das unter anderem auch Schablonen für UML besitzt. Draw.io ist <a href="https://github.com/jgraph/drawio-desktop">Open Source Software</a>. Sie können es für Windows, Linux, macOS oder Chrome OS kostenlos <a href="https://about.draw.io/integrations/#integrations_offline">herunterladen</a>. Noch einfacher ist es, das Programm direkt im Browser zu verwenden, damit entfällt die Installation komplett.</p>
            <figure>
                <img src="images/screenshots/draw_io.png"/>
                <figcaption>GUI von <i>Draw.io</i></figcaption>
            </figure>
            <h1>Anlegen eines neuen Projektes in Draw.io</h1>
            <p><i>Draw.io</i> verfügt über eine intuitive Bedienung und ist weitgehend selbsterklärend. Um Ihnen den Einstieg zu erleichtern, folgt hier ein kurzes Tutorial:</p>
            <walkthrough>
                <content>
                    <step>Öffnen Sie die Website: <a href="https://www.draw.io/">https://www.draw.io/</a></step>
                    <step>Wählen Sie den Speicherort für Ihre Diagramme. Zur Verfügung stehen <i>Google Drive</i> oder <i>OneDrive</i>. Fall Sie keines davon verwenden, wählen Sie <b>Device</b>. Damit können Sie die Diagramme auf Ihrer lokalen Festplatte speichern.<figure width="50%">
                            <img src="images/screenshots/draw_io_persistance.png"/>
                        </figure></step>
                    <step>Wählen Sie als nächstes <i>Create New Diagram</i>, um eine neues Diagramm anzulegen. <figure width="50%">
                            <img src="images/screenshots/draw_io_start.png"/>
                        </figure></step>
                    <step>Sie können jetzt einen Dateinamen eingeben; die Vorgabe ist <i>Untitled Diagram.xml</i>. Prinzipiell lassen sich hier auch Vorlagen wählen. Für die Zwecke dieses Kurses starten Sie am einfachsten mit einem leeren Diagramm. Wählen Sie <i>Blank Diagram</i> unter <i>Basic</i> und klicken Sie auf <i>create</i>.<figure float="none" width="60%">
                            <img src="images/screenshots/draw_io_blank.png"/>
                        </figure></step>
                    <step>Sie sind jetzt im Hauptteil der Anwendung. Klappen Sie aus dem linken Menü die UML-Schablonen aus. Sie können loslegen!<figure width="50%">
                            <img src="images/screenshots/draw_io_side_menu.png"/>
                        </figure></step>
                </content>
            </walkthrough>
            <h1>Klassen in Draw.io</h1>
            <p>Draw.io verfügt auf der linken Seite über eine Schablonen-Palette. Um ein UML-Diagramm zu erstellen, können Sie auf die UML-Schablonen zugreifen — Sie müssen sie nur ausklappen.</p>
            <figure width="50%">
                <img src="images/screenshots/draw_io_uml.png"/>
                <figcaption>UML-Schablonen in Draw.io</figcaption>
            </figure>
            <p>Um eine Klasse zu erstellen, klicken Sie auf das Klassen-Icon. Das ist das dritte von links. Sie können auch den Mauszeiger über die Icons bewegen, um einen Tooltip zu erhalten. </p>
            <p>Das Anklicken des Klassen-Icons platziert eine neue Klasse im Zeichenfenster. Diese können Sie jetzt bearbeiten.</p>
            <figure width="50%"><img src="images/screenshots/draw_io_clas.png"/><figcaption>Neue Klasse im Zeichenfenster</figcaption></figure>

            <p>Sie können den Namen der Klasse ändern und Attribute und Methoden ergänzen. Auf diese Weise erhalten Sie im Handumdrehen UML-Diagramme wie die in der letzten Lektion vorgestellten.</p>

            <h1>Zusammenfassung</h1>
            <ul>
                <li>Es gibt viele Werkzeuge zur Erstellung von UML-Diagrammen.</li>
                <li>Draw.io ist ein einfaches Open-Source-Programm, mit dem Sie UML-Diagramme zeichnen können.</li>
                <li>Benutzen Sie die UML-Schablonen, um standardkonforme UML-Diagramme zu erzeugen.</li>
            </ul>
            <h1>Übungen</h1>
            <exercise><name>Projekt »Filmverleih«: Anforderungsanalyse</name><content>
                <p>Ein Auftraggeber möchte, dass Sie einen webbasierten Filmverleih für ihn entwickeln. Er sieht für seine spezielle Zielgruppe einen Markt und fürchtet sich nicht vor der Konkurrenz. Die Website muss über Frontends für Kunden und Mitarbeiter verfügen.</p>
                <p>Ihr Auftraggeber formuliert folgende Anforderung:</p>
                <blockquote>
                    <p>Meine Mitarbeiter sollen Filme verwalten. Filme bestehen aus Titel und
                        Spieldauer. Letztere wird in Minuten angegeben. Manche Leute interessieren
                        sich auch für das Erscheinungsjahr. Außerdem wollen wir später eine
                        Internetsuche anbieten, die es erlaubt, anhand des Regisseurs (Name, Vorname
                        und Geburtsdatum) zu suchen. Zum gefundenen Film muss dann eine
                        Kurzbeschreibung angezeigt werden. Im Moment ist es noch nicht wichtig,
                        welcher Film von welchem Regisseur stammt. Meine Mitarbeiter sollen aber
                        schon mal eine Liste von Regisseuren erfassen können.</p>
                </blockquote>
                <p>Markieren Sie Entities und Attribute im Anforderungstext. Kreisen Sie dazu die Entities ein, und unterstreichen Sie die Attribute.</p>

            </content><answer><i>Film</i> ist ein Entity, das sich aus den Attributen
                        <i>titel</i>, <i>spieldauer</i>, <i>erscheinungsjahr</i>
                    und <i>kurzbeschreibung</i> zusammensetzt. Das zweite Entity ist
                        <i>Regisseur</i>, bestehend aus <i>name</i>,
                        <i>vorname</i> und <i>geburtsdatum</i>.</answer></exercise>

            <exercise><name>Projekt »Filmverleih«: Domänenmodell</name><content>
                <p>Erarbeiten Sie ein Domänenmodell in UML zum Projekt <i>Filmverleih</i>.</p>

            </content><answer>
                    <figure width="60%"><img src="images/loesungen/lektion_05/film_verleih_dm.png"/></figure>
                    <p>Übrigens: Wenn Ihre Lösung nicht exakt mit der Musterlösung übereinstimmt, heißt das noch lange nicht, dass sie falsch ist. Gerade bei Analyse und Modellierung gibt es oft viele Möglichkeiten, die eine richtige Lösung darstellen.</p>
                </answer></exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Projekt »Fluggesellschaft«: Domänenmodell</name>
                <content>
                    <p>Eine Fluggesellschaft beauftragt Sie, eine Inventardatenbank zu erstellen. Dabei sind alle vorhandenen Flugzeugtypen mit folgenden Daten zu erfassen:</p>
                    <ul>
                        <li>Modell</li>
                        <li>Hersteller</li>
                        <li>Flugstunden (aller Piloten auf diesem Flugzeugtyp) – d.h. gewissermaßen die Erfahrung, die die Gesellschaft mit diesem Modell gesammelt hat</li>
                        <li>Höchstgeschwindigkeit</li>
                        <li>Erstflug</li>
                        <li>typische Sitzanzahl</li>
                    </ul>
                    <p>Außerdem möchte die Gesellschaft alle ihre Piloten erfassen mit:</p>
                    <ul>
                        <li>Name</li>
                        <li>Vorname</li>
                        <li>Geburtsdatum</li>
                        <li>Flugstunden (Erfahrung)</li>
                    </ul>
                    <p>Erarbeiten Sie ein Domänenmodell in UML. Zeichnen Sie es mit dem UML-Werkzeug Ihrer Wahl.</p>
                </content>
            </exercise>
            <exercise>
                <name>Projekt »Partnervermittlung«: Domänenmodell</name>
                <content>
                    <p>Einer Ihrer Auftraggeber möchte eine Partnervermittlung gründen. Er verfügt über gute Kontakte und das entsprechende Startkapital, aber ihm fehlt noch eine passende Webanwendung.</p>
                    <p>Seine erste Anforderung lautet:</p>
                    <p>Es müssen Personen mit folgenden Eigenschaften erfasst werden:</p>
                    <ul>
                        <li>Name, Vorname</li>
                        <li>Geschlecht</li>
                        <li>Haarfarbe</li>
                        <li>Größe in cm</li>
                        <li>Gewicht in kg</li>
                        <li>Geburtsdatum</li>
                    </ul>
                    <p>Erarbeiten Sie ein Domänenmodell in UML. Zeichnen Sie es mit dem UML-Werkzeug Ihrer Wahl.</p>
                </content>
            </exercise>
            <exercise>
                <name>Erweiterungen zum Filmverleih</name>
                <content>
                    <p>Erweitern Sie das erstellte Domänenmodell des Filmverleihs um eigene Attribute, die Sie für sinnvoll oder gar notwendig erachten. In der Praxis würden Sie das natürlich mit Ihrem Auftraggeber absprechen.</p>
                </content>
            </exercise>
            <exercise>
                <name>Erweiterung der Partnervermittlung</name>
                <content>
                    <p>Schlagen Sie Ihrem Auftraggeber weitere Attribute vor und ergänzen Sie Ihr Design.</p>
                </content>
            </exercise>
        </lesson>
        <lesson id="lesson_pdbm">
            <lesson_name>Datenbankdesign: Das physische Datenmodell</lesson_name>
            <topics>
                <li>welche Schritte sich an die Domänenmodellierung anschließen.</li>
                <li>wie Sie Entities in Tabellen überführen.</li>
                <li>die erste Transformationsregel kennen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p><!--The code is more what you'd call »guidelines« than actual rules-->Der Kodex ist eher das, was man Richtlinien nennt, statt tatsächlicher Regeln.</p>
                </blockquote>
                <figcaption>Captain Barbossa,Pirates of the Caribbean</figcaption>
            </figure>
            <p>Sie haben ein Domänenmodell erstellt und es Ihrer Kundin vorgelegt. Nachdem sie bestätigt hat, dass das Modell den Anforderungen gerecht wird, können Sie zum nächsten Schritt übergehen.</p>
            <h1>Physisches Datenmodell</h1>
            <p>Aus dem Domänenmodell können Sie zwei weitere Modelle ableiten:</p>
            <ul>
                <li>Das Klassenmodell für die Programmierung (durch Anwendung von <keyword>Objektmodellierung</keyword>)</li>
                <li>Das physische Datenmodell (PDM) (durch Anwendung von <keyword>physischer Datenmodellierung</keyword>)</li>
            </ul>
            <figure width="70%">
                <img src="images/modellierungs_taetigkeiten.png"/>
                <figcaption>Modelierungstätigkeiten nach Ambler (2003)</figcaption>
            </figure>
            <p>Das Diagramm zeigt die übliche Abfolge der Modellierungstätigkeiten. Beachten Sie, dass die Pfeile beidseitig gerichtet sind. Das bedeutet, dass Sie jederzeit zum vorherigen Modell zurückwechseln können, um Erweiterungen und Verbesserungen vorzunehmen.</p>
            <hint>
                <h3>Das logische Modell</h3>
                <p>Statt direkt das physische Modell aus dem Domänenmodell abzuleiten, können Sie auch zuerst ein logisches Modell ableiten. Das ist aber meistens überflüssiger Aufwand (Ambler, 2006). In der klassischen Datenbankentwicklung wird eine Datenbank nicht für eine spezielle Anwendung benötigt, sondern die Datenbank entsteht schon zuvor unabhängig – und mit der Absicht, mehrere Anwendungen darauf aufzusetzen. In diesem Fall macht es Sinn, ein logisches Modell zu verwenden. Dieser Ansatz wird beispielsweise auch von Theorey, Lightstone &amp; Nadeau (2006) verfolgt.</p>
            </hint>
            <p>Das Klassenmodell für die Programmierung unterscheidet sich vom Domänenmodell in Anzahl und Art der Klassen. Eine Klasse des Domänenmodells kann z.B. aus technischen Gründen in mehrere Einzelklassen zerfallen. Außerdem kommen Klassen dazu, die für das Konzept keine Relevanz haben – beispielsweise eine Cache-Klasse zur Performancesteigerung, oder Klassen, die für die Bedienung der Anwendung erforderlich sind. Da wir uns aber vornehmlich mit Datenbanken beschäftigen, ist dieses Modell hier nicht weiter wichtig. Wenden Sie sich stattdessen dem physischen Datenmodell zu.</p>
            <p>Das physische Datenmodell beschreibt die Struktur der Daten in der Form, in der sie die Datenbank letztendlich speichert. Deswegen kann sich das Modell auch von DBMS zu DBMS unterscheiden. Es ist auch hier wieder möglich, auf das UML-Klassendiagramm zurückzugreifen. Das einzige Problem dabei ist, dass es für das physische Klassendiagramm keinen einheitlichen UML-Standard gibt. Deswegen empfehle ich Ihnen das <a href="http://www.agiledata.org/essays/umlDataModelingProfile.html">UML-Profil von Scott Ambler (2006)</a>. Ein <keyword>UML-Profil</keyword> ist eine Erweiterung zum UML-Standard. Der Standard beschreibt bereits, wie solche Profile definiert werden. Weitere UML-Profile zur Datenbankmodellierung finden Sie z.B. bei Muller (1999), Gornik (2002) und Sparks (1999).</p>
            <p>Das erste physische Datenmodell unterscheidet sich nicht sonderlich vom Domänenmodell (siehe <a href="#unterschiede_dm_pdbm"/>).</p>
            <figure width="60%">
                <img src="images/klassendiagramme/pm_seminare.png"/>
                <figcaption>Physisches Datenmodell der Seminarverwaltung (noch unvollständig)</figcaption>
            </figure>
            <p>Im Gegensatz zum Domänenmodell beschreibt dieses Diagramm kein Entity, sondern direkt eine physische Tabelle der realen Datenbank. Sie können sich die Tabelle <i>seminare</i> etwa so vorstellen:</p>
            <table>
                <caption>Tabelle <i>seminare</i>
                </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>…</td>
                        <td>…</td>
                        <td>…</td>
                    </tr>
                    <tr>
                        <td>…</td>
                        <td>…</td>
                        <td>…</td>
                    </tr>
                    <tr>
                        <td>…</td>
                        <td>…</td>
                        <td>…</td>
                    </tr>
                </tbody>
            </table>
            <p>Das physische Datenmodell beschreibt dabei nur die Struktur der Daten. Über den späteren Inhalt der Tabellen, die Anzahl der Zeilen usw., trifft es keine Aussage.</p>
            <h1 id="unterschiede_dm_pdbm">Unterschiede zum Domänenmodell</h1>
            <p>Worin genau liegt nun der Unterschied zum Domänenmodell?</p>
            <p>Zunächst einmal fällt auf, dass die Methoden fehlen. Das ist nicht weiter verwunderlich. In diesem Modell geht es – wie der Name schon sagt – ausschließlich um die Daten. Das Verhalten ist für das Entwickeln einer Datenbank unerheblich. Wichtig wird es während der Objektmodellierung.</p>
            <p>Ein weiterer Unterschied ist der Pluralbegriff <i>seminare</i> statt des Singulars <i>Seminar</i>. Zudem ist das Wort <i>seminare</i> kleingeschrieben. Das liegt daran, dass das physische Modell bereits die Namen der Bezeichnungen aus der realen Datenbank verwendet. Bei <i>seminare</i> handelt es sich um eine <keyword>Tabelle</keyword>. Für diese gelten (hier) folgende SQL-Programmierrichtlinien:</p>
            <ul>
                <li>Geben Sie Tabellennamen für Tabellen, die aus Entities entstanden sind, im Plural an.</li>
                <li>Schreiben Sie alle Bezeichner (z.B. Tabellen- und Attributnamen) klein.</li>
                <li>Trennen Sie Begriffe, die aus mehreren Wörtern bestehen, mit einem Underscore »_« (z.B. registriert_seit). </li>
                <li>Vermeiden Sie Umlaute (ö, ü, ä) und Sonderzeichen (z.B. ?, !, &amp;).</li>
            </ul>
            <h3>Beispiel</h3>
            <ul>
                <li>
                    <b>Tabellenbezeichner:</b> artikel, personen, veranstaltungen, gefoerderte_weiterbildungen </li>
                <li>
                    <b>Attributbezeichner:</b> name, vorname, geburtsdatum, start_termin </li>
            </ul>
            <p>Für das PDM sind die genannten Einschränkungen notwendig, da sich diese Bezeichner später im SQL-Code wiederfinden. Das Domänenmodell dagegen ist ausschließlich für menschliche Konsumenten gedacht. Deswegen können Sie dort problemlos auf Umlaute, Sonderzeichen und Leerzeichen zurückgreifen.</p>
            <p>Sobald Sie umfangreichere und komplexere Datenbanken designen, nehmen die Unterschiede zum Domänenmodell weiter zu. Generell ist es aber sinnvoll, die Unterschiede möglichst zu minimieren. Das erleichtert das Zusammenspiel von Datenbank und Anwendung.</p>
            <hint>
                <p>Um es nochmal deutlich zu sagen:</p>
                <p>Das <keyword>Domänenmodell</keyword> beschreibt die Konzepte einer Anwendung aus der Sicht eines Anwenders oder Fachexperten (Domänenexperten). Eine nicht anders deklarierte Klasse im UML-Diagramm eines Domänenmodells ist ein <b>Entity</b>.</p>
                <p>Das <keyword>physische Datenmodell</keyword> ist eine direkte Abbildung der realen Datenbank. Aus dem UML-Diagramm, das das physische Datenmodell zeigt, kann mit Hilfe von SQL eine entsprechende Datenbank angelegt werden. Eine nicht anders deklarierte Klasse im UML-Diagramm eines physischen Datenmodells ist eine <b>Tabelle</b>.</p>
            </hint>
            <h1 id="transformation_dm_pdm">Vom Domänenmodell zum physischen Datenmodell</h1>
            <p>Um ein Domänenmodell in ein physisches Datenmodell zu überführen, sind mehrere Transformationen erforderlich. Da Sie es momentan noch mit einzelnen, nicht miteinander in Beziehung stehenden Tabellen zu tun haben, gestaltet sich die Transformation erfreulich einfach.</p>
            <figure width="90%">
                <img src="images/klassendiagramme/transformation1.png"/>
                <figcaption>Transformation vom Domänenmodell zum physischen Datenmodell</figcaption>
            </figure>
            <h3>Transformation von Entities</h3>
            <ul>
                <li>Legen Sie zu jedem Entity aus dem Domänenmodell eine Tabelle im physischen Datenmodell an. Sie können Name und Attribute der Tabelle aus dem Entity übernehmen. Beachten Sie dabei die SQL-Programmierrichtlinien. </li>
            </ul>
            <p>Sie werden bald weitere Transformationsregeln kennenlernen. Dabei wachsen auch die Unterschiede zwischen den Modellen. Sie werden außerdem noch sehen, dass sich diese Transformationsregeln nicht immer stur umsetzen lassen. Betrachten Sie sie eher als Richtlinien statt als verbindliche Regeln. Es gibt viele Fälle, wo bei der Transformation Ihr Verstand gefragt ist. Arbeiten Sie aber möglichst immer im Brain-On-Mode :)<br/>Modellierung – sowohl Domänenmodellierung als auch physische Datenmodellierung – ist ein kreativer Prozess!</p>
            <p>Das physische Datenbankmodell der Seminarverwaltung ist auch noch unvollständig. Sie erfahren bald, was noch fehlt. Zunächst einmal ist es wichtig, das zugrundeliegende Modell zu verstehen. Dem physischen Datenmodell liegt nämlich das relationale Modell zugrunde. In der nächsten Lektion erfahren Sie, was es damit auf sich hat.</p>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Auf die Domänenmodellierung folgt die Objektmodellierung und die physische Datenmodellierung.</li>
                <li>Das Domänenmodell beschreibt die Konzepte einer Anwendung aus Sicht eines Anwenders oder Fachexperten.</li>
                <li>Eine nicht anders deklarierte Klasse im UML-Diagramm eines Domänenmodells ist ein Entity.</li>
                <li>Das physische Datenmodell ist eine direkte Abbildung der realen Datenbank.</li>
                <li>Eine nicht anders deklarierte Klasse im UML-Diagramm eines physischen Datenmodells ist eine Tabelle.</li>
                <li>Es gibt Transformationsregeln, die beschreiben, wie ein physisches Datenmodell aus einem Domänenmodell abgeleitet werden kann. Diese sind jedoch nicht immer anwendbar. </li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Was beschreibt die Konzepte einer Anwendung aus der Sicht eines Fachexperten?</p>
                    </question_text>
                    <answer correct="correct">ein Domänenmodell</answer>
                    <answer>ein physisches Datenmodell</answer>
                    <answer>das relationale Modell</answer>
                    <answer>ein BNF-Ausdruck</answer>
                </question>

                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Was stellt eine direkte Abbildung der realen Datenbank dar?</p>
                    </question_text>
                    <answer>ein Domänenmodell</answer>
                    <answer correct="correct">ein physisches Datenmodell</answer>
                    <answer>das relationale Modell</answer>
                    <answer>ein BNF-Ausdruck</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Eine Klasse im Klassendiagramm eines Domänenmodells beschreibt …</p>
                    </question_text>
                    <answer>…eine Tabelle</answer>
                    <answer correct="correct">… ein Entity.</answer>
                    <answer>… ein Attribut</answer>
                    <answer>… eine Zeile </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Eine Klasse im Klassendiagramm eines physischen DB-Modells stellt …</p>
                    </question_text>
                    <answer correct="correct">…eine Tabelle dar.</answer>
                    <answer>… ein Entity dar.</answer>
                    <answer>… ein Attribut dar.</answer>
                    <answer>… eine Zeile dar.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Was ist bezüglich der Groß- und Kleinschreibung in SQL-Programmierrichtlinien Standard?</p>
                    </question_text>
                    <answer correct="correct">Schreiben Sie alle Bezeichner klein.</answer>
                    <answer>Schreiben Sie alle Bezeichner groß.</answer>
                    <answer>Schreiben Sie SQL-Schlüsselwörter klein.</answer>
                    <answer correct="correct">Schreiben Sie SQL-Schlüsselwörter groß.</answer> <!--Man könnte darunter auch verstehen, dass nur der erste Buchstabe groß geschreiben werden soll.   -->
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Vorgaben zählen üblicherweise zu den SQL-Programmierrichtlinien?</p>
                    </question_text>
                    <answer correct="correct">Geben Sie Tabellennamen für Tabellen, die aus Entities entstanden sind, im Plural an.</answer>
                    <answer correct="correct">Trennen Sie Begriffe, die aus mehreren Wörtern bestehen, mit einem Underscore.</answer>
                    <answer>Trennen Sie Begriffe, die aus mehreren Wörtern bestehen, mit einem Minus-Zeichen.</answer>
                    <answer correct="correct">Vermeiden Sie Umlaute und Sonderzeichen.</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Physisches Modell des Filmverleihs</name>
                <content>
                    <p>Zeichnen Sie ein physisches Modell des Filmverleihs (siehe Übungen von <a href="#lesson_uml_tool"/>).</p>
                </content>
                <answer>
                    <figure width="50%">
                        <img src="images/loesungen/lektion_06/film_verleih_pm.png"/>
                    </figure>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Physisches Modell der Partnervermittlung</name>
                <content>
                    <p>Zeichnen Sie ein physisches Modell der Partnervermittlung (siehe Übungen von <a href="#lesson_uml_tool"/>).</p>
                </content>
            </exercise>
            <exercise>
                <name>Physisches Modell der Fluggesellschaft</name>
                <content>
                    <p>Zeichnen Sie ein physisches Modell der Fluggesellschaft (siehe Übungen von <a href="#lesson_uml_tool"/>).</p>
                </content>
            </exercise>
        </lesson>
        <lesson id="relationales_modell">
            <lesson_name>Das Relationale Modell</lesson_name>
            <topics>
                <li>das berühmte relationale Modell kennen.</li>
                <li>aus welchen Teilen das Modell besteht.</li>
                <li>wie Sie die Mengenschreibweise verwenden.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Wer die Praxis übt, ohne sich vorher mit der Theorie beschäftigt zu haben, gleicht einem Steuermann, der sein Schiff ohne Kompass und Steuer besteigt und nun nicht weiß, wohin er fährt.</p>
                </blockquote>
                <figcaption>Leonardo da Vinci (gefunden bei C.J. Date, 2005)</figcaption>
            </figure>
            <h1>Was ist das relationale Modell?</h1>
            <p>Was ist nun eigentlich das <keyword>relationale Modell</keyword>, von dem alle reden?</p>
            <p>Vorab muss ich gestehen, dass ich gar nicht vorhabe, Ihnen alle theoretischen Aspekte des relationalen Modells vollständig zu erklären. Viele Aspekte sind für die praktische Webentwicklung irrelevant und sind sicherlich auch nicht im Sinne eines Einführungskurses. Falls es Sie dennoch brennend interessiert, so empfehle ich Ihnen, Date (2005) zu lesen. Er kann es Ihnen ohnehin besser erklären als ich.</p>
            <hint>
                <h3>Alternative Begriffe</h3>
                <p>Das relationale Modell wird manchmal auch relationales Datenbankmodell oder relationales Datenmodell (RDM) genannt. Alle Begriffe meinen das gleiche. Ich halte mich hier an den Originalbegriff von Codd/Date, siehe z.B. Date (2007).</p>
            </hint>
            <p>Ich werde Ihnen aber nun die Grundlagen näherbringen, die Sie für Ihre tägliche Arbeit benötigen.</p>
            <p>Das relationale Modell beschreibt die Theorie, die allen relationalen Datenbanken zugrunde liegt. Codd hat das Modell aus der <keyword>Prädikatenlogik</keyword> abgeleitet – einem Teilgebiet der Mathematik. Da in der Webentwicklung relationale Datenbanken eine wichtige Rolle spielen, ist ein gutes Verständnis des Modells unerlässlich – insbesondere auch für die tägliche Praxis.</p>
            <hint src="images/edgar_f_codd.png">
                <h3>Ted sagt…</h3>
                <blockquote>
                    <p><!--The adoption of a relational model of data, as described above, permits the development
          of a universal data sublanguage based on an applied predicate calculus.--> Die Adaption des relationalen Modells von Daten […] erlaubt die Entwicklung einer universellen Datensubsprache basierend auf einem angewandten Prädikatenkalkül.</p>
                </blockquote>
            </hint>
            <h1>Aspekte des relationalen Modells</h1>
            <p>Das relationale Modell besteht aus 3 Aspekten:</p>
            <ul>
                <li>Struktur</li>
                <li>Integrität</li>
                <li>Manipulation</li>
            </ul>
            <p>Zunächst einmal beschreibt das Modell eine Möglichkeit, Daten zu strukturieren bzw. zu organisieren. Im Gegensatz zu anderen Modellen dienen sogenannte <keyword>Relationen</keyword> und <keyword>Relationsvariablen</keyword> als wichtigstes Strukturelement – daher der Name.<br/>Der Einfachheit halber unterscheide ich hier nicht zwischen Relationen und Relationsvariablen. Genaueres können Sie bei Date (2005) nachlesen. Eine Tabelle in SQL entspricht übrigens eher einer Relationsvariablen, da sich die Inhalte der Tabelle ändern können.</p>
            <h1>Relationen</h1>
            <p>Was ist eine Relation? Am einfachsten ist es, wenn Sie sich eine Relation wie eine <keyword>Tabelle</keyword> vorstellen. In einer Tabelle können Sie die Seminare und ihre Attribute unterbringen.</p>
            <table>
                <caption>Tabelle <i>seminare</i>
                </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>1900,00</td>
                    </tr>
                    <tr>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                    </tr>
                </tbody>
            </table>
            <p>Die Relation <b>ist nicht wirklich</b> eine Tabelle. Aber sie lässt sich auf dem Papier als eine Tabelle darstellen. Im Folgenden verwende ich der Einfachheit halber meistens den Begriff <i>Tabelle</i> – auch wenn es sich genau genommen um eine Relation handelt.</p>
            <p>Jede <keyword>Zeile</keyword> (<keyword>row</keyword>) der Tabelle beschreibt ein Seminar mit den dazugehörigen Informationen. Eine solche Zeile wird im Sprachgebrauch des relationalen Modells <keyword>Tupel</keyword> genannt. Eine andere geläufige Bezeichnung aus dem Datenbankjargon ist <keyword>Datensatz</keyword> (<keyword>record</keyword>). Eine <keyword>Spalte</keyword> (<keyword>column</keyword>) in der Tabelle nennt sich <keyword>Attribut</keyword>. Das deckt sich praktischerweise mit der Bezeichnung aus UML. Die Attribute dieser Relation sind also <i>titel</i>, <i>beschreibung</i> und <i>preis</i>. Jedes Tupel hat an jeder Stelle eines Attributes einen <keyword>Wert</keyword>. Dabei ist z.B. <keyword>JavaScript</keyword> ebenso ein Wert wie <keyword>975,00</keyword>. Das Behältnis des Wertes nennt sich <keyword>Zelle</keyword>.</p>
            <p>Hier sehen Sie nochmals die Zuordnung der Begriffe:</p>
            <figure width="100%">
                <img src="images/rdbm_table_terms.png"/>
                <figcaption>Begriffe einer Tabelle/Relation</figcaption>
            </figure>
            <table>
                <caption>Gegenüberstellung der Begriffe von Relation und Tabelle</caption>
                <thead>
                    <tr>
                        <th>Relationes Modell</th>
                        <th>Darstellung als Tabelle</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Attribut</td>
                        <td>Spalte</td>
                    </tr>
                    <tr>
                        <td>Tupel</td>
                        <td>Zeile</td>
                    </tr>
                    <tr>
                        <td>Relation bzw. Relationsvariable</td>
                        <td>Tabelle</td>
                    </tr>
                    <tr>
                        <td>Wert</td>
                        <td>Inhalt einer Tabellenzelle</td>
                    </tr>
                </tbody>
            </table>
            <p>Nun kann ich Ihnen auch etwas genauer – wenn auch nicht formal exakt – erklären, was eine Relation eigentlich ist. Eine Relation besteht aus einem <keyword>Heading</keyword> (<keyword>Überschrift</keyword>) und einem <keyword>Body</keyword> (<keyword>Körper</keyword>). Die Überschrift ist dabei eine <keyword>Menge</keyword> von Attributen. Der Körper ist eine Menge von Tupeln, die der Überschrift entsprechen, d.h. für jedes Attribut einen entsprechenden Wert aufweisen. Ein Heading, das im Code vorliegt, wird übrigens auch als <keyword>Tabellenschema</keyword> bezeichnet. Die Menge aller Tabellenschemata einer Datenbank wird <keyword>Datenbankschema</keyword> genannt.</p>
            <figure width="100%">
                <img src="images/rdbm_table_heading_and_body.png"/>
                <figcaption>Heading und Body einer Relation in Tabellendarstellung</figcaption>
            </figure>
            <h1>Was war nochmal eine Menge?</h1>
            <p>Hier eine kleine Auffrischung, falls Ihnen der Begriff <i>Menge</i> etwas suspekt erscheint. Menge beschreibt ein grundlegendes Konzept aus der Mathematik. Sie ist nach Georg Cantor eine »Zusammenfassung bestimmter, wohlunterschiedener Objekte«. Stellen Sie sich einfach einen Sack vor, in dem mehrere Dinge liegen. Die Dinge in der Menge sind praktisch beliebig. Sie können sowohl abstrakt als auch konkret sein. Es kann sich z.B. um Zahlen handeln oder um Farben, um Autos, um Menschen (natürlich brauchen Sie dann einen ziemlich großen Sack, und für die Insassen könnte es sehr ungemütlich werden) usw.</p>
            <h1>Mengenschreibweise</h1>
            <p>Um eine Menge anzugeben, verwenden Sie die <keyword>Mengenschreibweise</keyword>. Diese bedient sich der geschweiften Klammern. Sie können z.B. die Menge der Farben <i>Rot</i>, <i>Grün</i> und <i>Blau</i> schreiben als:</p>
            <ul>
                <li>Farben = {Rot, Grün, Blau}.</li>
            </ul>
            <p>Im Fall unserer Seminare bedeutet das, dass die Menge <code>{titel, beschreibung, preis}</code> das Heading der Relation <code>seminare</code> darstellt. Oftmals ist es für uns Datenbankentwickler nicht weiter wichtig, welche Inhalte eine bestimmte Relation hat. Deswegen müssen Sie nicht immer eine aufwendige Zeichnung anfertigen. Stattdessen notieren Sie die Relation in Mengenschreibweise. Verwenden Sie dazu die Form:</p>
            <ul>
                <li>
                    <i>name_der_relation</i> = <i>menge_der_attribute</i>
                </li>
            </ul>
            <p>Die Relation <i>seminare</i> schreiben Sie entsprechend als</p>
            <ul>
                <li>seminare = {title, beschreibung, preis}</li>
            </ul>
            <p>Streng genommen ist das nicht korrekt. Bei der Menge handelt es sich nur um das Heading und nicht um die ganze Tabelle. Diese Vereinfachung erlaubt es Ihnen aber, sich auf die Struktur zu konzentrieren und nicht jedesmal Werte angeben zu müssen.</p>
            <h1>Konsequenzen des Relationsbegriffs</h1>
            <p>Da Sie sich nun schon etwas mehr unter einer Relation vorstellen können, kann ich Ihnen einige wichtige Konsequenzen aufzeigen.</p>
            <hint>
                <p>Die Reihenfolge der Attribute spielt keine Rolle.</p>
            </hint>
            <p>In einer Menge – im mathematischen Sinn – ist die Reihenfolge der Elemente unerheblich. Auf Tabellen übertragen bedeutet das, dass Sie Attribute vertauschen können und es handelt sich immer noch um die gleiche Relation. Beispielsweise sind die beiden Ausdrücke</p>
            <ul>
                <li>seminare = {titel, beschreibung, preis}</li>
                <li>seminare = {preis, titel, beschreibung}</li>
            </ul>
            <p>im Sinne des relationalen Modells völlig equivalent. Natürlich sehen Sie in der grafischen Darstellung als Tabelle einen Unterschied. Dennoch handelt es sich um die gleiche Relation.</p>
            <table>
                <caption>Tabelle <i>seminare</i> mit vertauschten Attributen </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>preis</th>
                        <th>beschreibung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>1900,00</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                    </tr>
                    <tr>
                        <td>Ajax &amp; DOM</td>
                        <td>1699,99</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>2500,00</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>975,00</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                    </tr>
                </tbody>
            </table>
            <hint>
                <p>Die Reihenfolge der Tupel spielt keine Rolle.</p>
            </hint>
            <p>Der Körper einer Relation besteht – wie schon gesagt – aus einer Menge von Tupeln. Da es sich um eine Menge handelt, können Sie auch Tupel vertauschen, ohne die Relation zu verändern.</p>
            <table>
                <caption>Tabelle <i>seminare</i> mit vertauschten Tupeln </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                    </tr>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>1900,00</td>
                    </tr>
                    <tr>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                        <td>2500,00</td>
                    </tr>
                </tbody>
            </table>
            <hint>
                <p>Es darf keine zwei verschiedenen Attribute mit gleichem Namen geben.</p>
            </hint>
            <p>Da der Name eines Attributs eine Spalte eindeutig kennzeichnet und damit die Werte in den jeweiligen Tupeln, würden zwei Attribute mit gleichem Namen schnell zu Widersprüchen führen. Außerdem darf in einer Menge jedes Element nur einmal vorhanden sein. Die Tabelle</p>
            <ul>
                <li>seminare = {titel, beschreibung, preis, preis}</li>
            </ul>
            <p>ist deshalb ungültig. In der folgenden Darstellung sehen Sie das Problem:</p>
            <table>
                <caption>Tabelle <i>seminare</i> mit doppeltem Attribut </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>1900,00</td>
                        <td>1900,00</td>
                    </tr>
                    <tr>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                        <td>1699,99</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                        <td>
                            <b>1500,00</b>
                        </td>
                        <td>
                            <b>2500,00</b>
                        </td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                        <td>975,00</td>
                    </tr>
                </tbody>
            </table>
            <p>Wie viel kostet das Seminar <i>JavaScript</i>? 1500,00 € oder 2500,00 €? Die Tabelle ist widersprüchlich. Das mag hier offensichtlich sein. Denken Sie aber mal an folgende Anforderung:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Für die Benutzer müssten wir auch mehrere E-Mail-Adressen erfassen können.</p>
            </hint>
            <p>Eine Lösungsidee könnte die Tabelle</p>
            <ul>
                <li>benutzer = {name, vorname, <b>email</b>, <b>email</b>, passwort, registriert_seit}</li>
            </ul>
            <p>darstellen. Wie Sie aber gerade erfahren haben, ist das nicht zulässig. Abgesehen davon müssten Sie schon vorher wissen, wie viele E-Mail-Adressen Sie pro Benutzer speichern müssen. Falls die Anzahl feststeht und Sie die E-Mail-Adressen semantisch unterscheiden können – z.B. in private und berufliche – gibt es durchaus eine einfache Lösung.</p>
            <ul>
                <li>benutzer = {name, vorname, registriert_seit, <b>private_email</b>, <b>berufliche_email</b>, passwort}</li>
            </ul>
            <p>Für den Fall, dass aber beliebig viele E-Mail-Adressen zu speichern sind und/oder es keine Unterscheidungskriterien gibt, können Sie das Problem jetzt noch nicht lösen. Ich werde Ihnen später einen Ausweg verraten. Bis dahin müssen Sie sich noch ein wenig gedulden.</p>
            <hint>
                <p>Es kann keine zwei verschiedenen Tupel geben, die für alle Attribute die gleichen Werte aufweisen.</p>
            </hint>
            <p>In der folgenden Tabelle ist der zweite Datensatz doppelt vorhanden. Da es sich um
                eine Menge von Tupeln handelt, ist kein doppeltes Element erlaubt. Es macht auch
                wenig Sinn, da der Datensatz komplett redundant ist und keine Zusatzinformationen
                liefert. Er bläht die Datenbank nur unnötig auf und verbraucht zusätzlichen
                Speicherplatz – und das ist nur eines von vielen Problemen. Weitere finden Sie
                unter <a href="http://www.dbdebunk.com">http://www.dbdebunk.com/</a>.</p>
            <table>
                <caption>Tabelle <i>seminare</i> mit doppeltem Datensatz </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>1900,00</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Ajax &amp; DOM</b>
                        </td>
                        <td>
                            <b>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen … </b>
                        </td>
                        <td>
                            <b>1699,99</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Ajax &amp; DOM</b>
                        </td>
                        <td>
                            <b>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen … </b>
                        </td>
                        <td>
                            <b>1699,99</b>
                        </td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt..</td>
                        <td>1500,00</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                    </tr>
                </tbody>
            </table>
            <hint src="images/edgar_f_codd.png">
                <h3>Ted sagt…</h3>
                <blockquote>
                    <p><!--If something is true, saying it twice doesn't make it any more true.-->Wenn irgendetwas wahr ist, wird es nicht wahrer dadurch, dass man es zweimal sagt.</p>
                </blockquote>
            </hint>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Das relationale Modell ist von der Prädikatenlogik abgeleitet.</li>
                <li>Relationen lassen sich als Tabellen darstellen.</li>
                <li>Relationen lassen sich in Mengenschreibweise notieren.</li>
                <li>Die Reihenfolge der Attribute spielt keine Rolle.</li>
                <li>Die Reihenfolge der Tupel spielt keine Rolle.</li>
                <li>Es kann keine zwei verschiedenen Tupel geben, die für alle Attribute die gleichen Werte aufweisen.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Aus welchen 3 Aspekten besteht das relationale Modell?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>Struktur</p>
                    </answer>
                    <answer correct="correct">
                        <p>Integrität</p>
                    </answer>
                    <answer correct="correct">
                        <p>Manipulation</p>
                    </answer>
                    <answer>
                        <p>SQL</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Im relationalen DB-Modell entspricht ein Tupel am ehesten…</p>
                    </question_text>
                    <answer>einer Spalte</answer>
                    <answer correct="correct">einer Zeile</answer>
                    <answer>einer Tabelle</answer>
                    <answer>einem Attribut</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Im relationalen DB-Modell entspricht eine Relation am ehesten…</p>
                    </question_text>
                    <answer>einer Spalte</answer>
                    <answer>einer Zeile</answer>
                    <answer correct="correct">einer Tabelle</answer>
                    <answer>einem Tupel</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Im relationalen DB-Modell entspricht ein Attribut am ehesten…</p>
                    </question_text>
                    <answer correct="correct">einer Spalte</answer>
                    <answer>einer Zeile</answer>
                    <answer>einer Tabelle</answer>
                    <answer>einer Relation</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Relationen (in Mengenschreibweise) sind im relationalen DB-Modell <b>ungültig</b>?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>forenpost = {autor, inhalt, datum, autor, zeichenanzahl}</p>
                    </answer>
                    <answer correct="correct">adresse = {str, hausnr, hausnr, plz, ort}</answer>
                    <answer>
                        <p>buch = {isbn}</p>
                    </answer>
                    <answer>
                        <p>adresse = {hausnr, plz}</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Relationen (in Mengenschreibweise) sind im relationalen DB-Modell <b>ungültig</b>?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>benutzer = {name, vorname, email, email}</p>
                    </answer>
                    <answer correct="correct">
                        <p>kunde = {kunden_nr, telefon, name, telefon}</p>
                    </answer>
                    <answer>
                        <p>person = {vorname, name, geburtsdatum, telefon, handy}</p>
                    </answer>
                    <answer>
                        <p>seminar = {id, titel}</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Mengen liefern das gleiche Ergebnis?</p>
                        <ol>
                            <li>forenpost = {inhalt, datum}</li>
                            <li>forenpost = {inhalt, datum, zeichenanzahl, autor}</li>
                            <li>forenpost = {datum, inhalt, autor}</li>
                            <li>forenpost = {inhalt, autor, datum}</li>
                        </ol>
                    </question_text>
                    <answer>
                        <p>Alle Mengen sind gleich, da nur der Name der Menge zählt.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen sind alle voneinander verschieden.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen 1 und 2 sind gleich.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen 2 und 3 sind gleich.</p>
                    </answer>
                    <answer correct="correct">Die Mengen 3 und 4 sind gleich.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Mengen liefern das gleiche Ergebnis?</p>
                        <ol>
                            <li>film = {titel, spieldauer}</li>
                            <li>film = {titel, erscheinungsdatum, spieldauer}</li>
                            <li>film = {spieldauer, erscheinungsdatum, titel}</li>
                            <li>film = {titel, erscheinungsdatum}</li>
                        </ol>
                    </question_text>
                    <answer>
                        <p>Alle Mengen sind gleich, da nur der Name der Menge zählt.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen sind alle voneinander verschieden.</p>
                    </answer>
                    <answer correct="correct">
                        <p>Die Mengen 2 und 3 sind gleich.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen 2 und 4 sind gleich.</p>
                    </answer>
                    <answer>
                        <p>Die Mengen 1 und 4 sind gleich.</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Im relationalen DB-Modell besteht eine Relation aus…</p>
                    </question_text>
                    <answer correct="correct">
                        <p>einem Heading und einem Body.</p>
                    </answer>
                    <answer>
                        <p>einem Datenbankschema.</p>
                    </answer>
                    <answer>
                        <p>SQL-Anweisungen.</p>
                    </answer>
                    <answer>
                        <p>UML-Klassen.</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Regeln gelten im relationalen DB-Modell?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>Die Reihenfolge der Attribute in einer Relation spielt keine Rolle.</p>
                    </answer>
                    <answer correct="correct">
                        <p>Es darf in einer Relation keine zwei verschiedenen Attribute mit gleichem Namen geben.</p>
                    </answer>
                    <answer correct="correct">
                        <p>Die Reihenfolge der Tupel in einer Relation spielt keine Rolle.</p>
                    </answer>
                    <answer>
                        <p>Die Tupel in einer Relation werden anhand ihres Primärschlüssels geordnet.</p>
                    </answer>
                    <answer>
                        <p>Eine Relation kann mehrfach das gleiche Tupel enthalten.</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Fehlersuche</name>
                <content>
                    <p>Markieren Sie alle Fehler in folgender Tabelle:</p>
                    <table>
                        <caption>kunden</caption>
                        <thead>
                            <tr>
                                <th>name</th>
                                <th>vorname</th>
                                <th>telefon_nr</th>
                                <th>telefon_nr</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Meier</td>
                                <td>Michael</td>
                                <td>0911/12345</td>
                                <td>0171/12345</td>
                            </tr>
                            <tr>
                                <td>Schulze</td>
                                <td>Stefanie</td>
                                <td>0911/12345</td>
                                <td>0171/1234</td>
                            </tr>
                            <tr>
                                <td>Becker</td>
                                <td>Andreas</td>
                                <td>0911/12345</td>
                                <td>0171/1234</td>
                            </tr>
                            <tr>
                                <td>Meier</td>
                                <td>Michael</td>
                                <td>0911/12345</td>
                                <td>0171/12345</td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <figure width="60%">
                        <img src="images/loesungen/das_relationale_modell/fehlersuche.png"/>
                    </figure>
                    <p>Folgende Fehler liegen vor:</p>
                    <ul>
                        <li>Das Attribut <i>telefon_nr</i> ist zweimal vorhanden.</li>
                        <li>Der letzte Datensatz ist eine exakte Kopie des ersten.</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Identische Headings</name>
                <content>
                    <p>Welche der folgenden Mengen sind gleich?</p>
                    <ol>
                        <li>autos1 = {modell, hersteller, leistung_in_ps}</li>
                        <li>autos2 = {modell, hersteller}</li>
                        <li>autos3 = {hersteller, leistung_in_ps, modell}</li>
                        <li>autos4 = {modell, hersteller, leistung_in_kw}</li>
                        <li>buecher1 = {title, autor, erscheinungsdatum, verlag}</li>
                        <li>buecher2 = {title, autoren, erscheinungsdatum, verlag}</li>
                        <li>buecher3 = {erscheinungsdatum, verlag, title, autoren}</li>
                        <li>buecher4 = {erscheinungsdatum, verlag, title, autor}</li>
                    </ol>
                </content>
                <answer>
                    <ul>
                        <li>Die Mengen 1 und 3 sind gleich, da die Reihenfolge der Attribute unerheblich ist.</li>
                        <li>Die Mengen 6 und 7 und die Mengen 5 und 8 sind jeweils gleich.</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Mengenschreibweise in Tabellen umwandeln</name>
                <content>
                    <p>Zeichnen Sie zu den folgenden Mengen Tabellen mit je 3 beispielhaften Datensätzen.</p>
                    <ul>
                        <li>autos = {modell, hersteller, leistung_in_ps, von_0_auf_100_in_sec}</li>
                    </ul>
                    <ul>
                        <li>buecher = {titel, autor, erscheinungsdatum, verlag, seitenzahl}</li>
                    </ul>
                </content>
                <answer>
                    <table>
                        <caption>autos = {modell, hersteller, leistung_in_ps, von_0_auf_100_in_sec}</caption>
                        <thead>
                            <tr>
                                <th>modell</th>
                                <th>hersteller</th>
                                <th>leistung_in_ps</th>
                                <th>von_0_auf_100_in_sec</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Golf GT</td>
                                <td>VW</td>
                                <td>90</td>
                                <td>8,2</td>
                            </tr>
                            <tr>
                                <td>F40</td>
                                <td>Ferrari</td>
                                <td>720</td>
                                <td>4,6</td>
                            </tr>
                            <tr>
                                <td>E91</td>
                                <td>BMW</td>
                                <td>245</td>
                                <td>6,9</td>
                            </tr>
                        </tbody>
                    </table>
                    <table>
                        <caption>buecher = {titel, autor, erscheinungsdatum, verlag, seitenzahl}</caption>
                        <thead>
                            <tr>
                                <th>titel</th>
                                <th>autor</th>
                                <th>erscheinungsdatum</th>
                                <th>verlag</th>
                                <th>seitenzahl</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Introduction to Database Systems</td>
                                <td>C.J. Date</td>
                                <td>01.09.2003</td>
                                <td>Addison Wesley</td>
                                <td>1024</td>
                            </tr>
                            <tr>
                                <td>Agile Database Techniques</td>
                                <td>Scott Ambler</td>
                                <td>17.10.2003</td>
                                <td>Wiley &amp; Sons</td>
                                <td>480</td>
                            </tr>
                            <tr>
                                <td>Patterns of Enterprise Application Architecture</td>
                                <td>Martin Fowler</td>
                                <td>15.11.2002</td>
                                <td>Addison Wesley</td>
                                <td>560</td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Mengenschreibweise nach UML</name>
                <content>
                    <p>Überführen Sie folgende Tabellen (Mengenschreibweise) in ein physisches Datenmodell in UML.</p>
                    <ul>
                        <li>autos = {modell, hersteller, leistung_in_ps, von_0_auf_100_in_sec}</li>
                    </ul>
                    <ul>
                        <li>buecher = {title, autor, inhaltsangabe, verlag, seitenzahl}</li>
                    </ul>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Datentypen</lesson_name>
            <topics>
                <li>die wichtigsten Datentypen kennen.</li>
                <li>welche Typen MySQL verwendet.</li>
                <li>wie Sie besagte Typen im physischen Datenmodell in UML kennzeichnen.</li>
            </topics>
            <h1>Datentypen</h1>
            <p>Ein wichtiges Konzept fehlt noch, bevor Sie den Bereich der theoretischen Grundlagen wieder verlassen. In <a href="#dbms_anforderungen"/> haben Sie Anforderungen kennengelernt, die ein DBMS erfüllen sollte. Eine der Anforderungen ist <i>Integrität</i>. Damit eine Datenbank keine völlig unsinnigen Werte speichert, gibt es bereits eine erste Hürde: den <keyword>Datentyp</keyword> (kurz <keyword>Typ</keyword>).</p>
            <p>Beispielsweise ist es nicht sinnvoll, für den Preis eines Seminars einen Wert wie <i>Meier</i> zu hinterlegen. Sollte das passieren, handelt es sich mit Sicherheit um einen Eingabe- oder Programmierfehler. Glücklicherweise können Sie dieses Problem mit Hilfe von Typen vermeiden.</p>
            <hint>
                <h3>Christopher sagt…</h3>
                <blockquote>
                    <p><!--What is a type exactly? In essence, it's a named, finite set of values.-->Was genau ist ein Typ? Grundsätzlich ist es eine benannte endliche Menge von Werten.</p>
                </blockquote>
            </hint>
            <p>Ein Typ ist eine benannte endliche Menge von Werten. Der Typ <i>DECIMAL</i> beispielsweise ist die Menge aller rationalen Zahlen<footnote>Das stimmt nicht ganz. Die Menge der rationalen Zahlen ist eigentlich unendlich. Auf einem Computer ist aber sowohl die Anzahl der Nachkommastellen als auch der Wertebereich immer irgendwo beschränkt.</footnote>– vereinfacht ausgedrückt, Zahlen mit Nachkommastellen. Da jeder Wert einen Typ hat und von diesem beschränkt wird, können Sie z.B. für einen DECIMAL die Zahl <i>975,00</i> einsetzen – nicht aber <i>Meier</i>.</p>
            <p>Wenn Sie nun für das Attribut <i>preis</i> den Typ <i>DECIMAL</i> festlegen, stellen Sie damit sicher, dass sich für Preise nur Zahlen eintragen lassen. Damit verbessern Sie die Integrität der Datenbank.</p>
            <p>Nun wird klarer, was ein Attribut eigentlich ist.</p>
            <hint>
                <p>Ein Attribut ist ein Paar aus einem Namen und einem Typ, z.B. <code>preis:DECIMAL</code>.</p>
            </hint>
            <p>Das relationale Modell verlangt lediglich ein offenes Typensystem. Das heißt, welche Typen es gibt, ist nicht festgelegt, sondern hängt vom jeweiligen DBMS ab. Idealerweise bietet das DBMS dem Programmierer sogar die Möglichkeit, eigene Typen zu definieren.</p>
            <h1>Datentypen in MySQL</h1>
            <p>Um die Anforderungen Ihrer Kundin zu erfüllen, müssen Sie für die Attribute <i>titel</i>, <i>beschreibung</i> und <i>preis</i> noch Typen vergeben. Da Sie sich bereits dazu entschieden haben, das DBMS <i>MySQL</i> zu verwenden, stellt sich die berechtigte Frage: <i>Welche Datentypen bietet MySQL an?</i>
            </p>
            <p>Die wichtigsten Gruppen von Datentypen in MySQL sind:</p>
            <ul>
                <li>
                    <keyword>Zeichenketten</keyword> (Strings)</li>
                <li>
                    <keyword>Zahlen</keyword>
                </li>
                <li>
                    <keyword>Zeit- und Datumsangaben</keyword>
                </li>
                <li><keyword>Wahrheitswerte</keyword></li>
            </ul>
            <h2>Zeichenketten</h2>
            <p>Von den Strings ist für Sie zunächst der Datentyp <code>VARCHAR</code> interessant. Er ermöglicht die Speicherung unterschiedlich langer Zeichenketten.</p>
            <h3>Beispiel</h3>
            <ul>
                <li>Ajax &amp; DOM</li>
                <li>Meier</li>
                <li>m.emrich@webmasters.de</li>
            </ul>
            <p>Dieser Datentyp lässt sich also auch ideal zur Speicherung von Seminartiteln verwenden. VARCHAR steht für <i>variable</i> und <i>character</i> – gemeint ist eine variable Anzahl von Zeichen.</p>
            <p>Sobald Sie VARCHAR einsetzen, müssen Sie angeben, wie lang die längste erwartete Zeichenkette sein kann. Wenn Sie also der Meinung sind, dass ein Seminartitel nie länger als 80 Zeichen sein kann, verwenden Sie einen <code>VARCHAR(80)</code>. Falls Sie einmal ein Attribut <i>Nachnamen</i> in Ihrer Tabelle haben, so ist dafür vermutlich ein <code>VARCHAR(40)</code> ausreichend.</p>
            <p>Die maximale Länge, die ein VARCHAR haben kann, ist 255 bzw. 65535 Zeichen ab MySQL 5.0.3. Für noch längere Texte benötigen Sie einen weiteren Datentyp: <code>TEXT</code>. Für diesen Datentyp müssen Sie keine Länge angeben. </p>
            <p>Verwenden Sie ihn immer dann, wenn Ihre Strings nicht in einen <code>VARCHAR(255)</code> bzw <code>VARCHAR(65535)</code> passen. Sie sollten TEXT aber auch nur in dieser Situation verwenden. Einfach grundsätzlich TEXT statt VARCHAR zu verwenden, ist keine gute Idee. Sie verschenken sonst Speicherplatz und Performance.</p>
            <p>Zu kleinlich sollten Sie aber auch nicht sein. Wenn Sie einen zu kleinen Datentyp verwenden und der Anwender versucht einen längeren Text zu speichern, schneidet MySQL den Rest einfach ab! Das nächste Beispiel zeigt, wie ungünstig das enden kann.</p>
            <h3>Beispiel</h3>
            <p>Um potenzielle Teilnehmer zu einer früheren Anmeldung zu bewegen, erweiterte eine Sekretärin die Seminarbeschreibung des JavaScript-Seminars um folgenden Text:</p>
            <blockquote>
                <p>Hinweis: Auf dieses Seminar erhalten Sie einen Preisnachlass von 50%, wenn Sie sich bis zum 01.05. anmelden und mindestens ein weiteres Seminar buchen.</p>
            </blockquote>
            <p>Zusammen mit dem ca. 180 Zeichen langen, vorhandenen Beschreibungstext des Seminars sprengte der Text den vorgegebenen VARCHAR(250). Was die Datenbank noch einfügte, war:</p>
            <blockquote>
                <p>Hinweis: Auf dieses Seminar erhalten Sie einen Preisnachlass von 50%</p>
            </blockquote>
            <p>Letztendlich müssen Sie immer den richtigen Mittelweg finden – nicht zu groß und nicht zu klein. Ich bin mir sicher, dass ich die Goldlöckchen-Lösung schon einmal erwähnt habe.</p>
            <p>Aus agiler Sichtweise betrachtet, ist es aber auch möglich, sicherheitshalber erst einmal einen zu großen Wert zu wählen – schlimmstenfalls VARCHAR(255) oder TEXT. Sie können zu einem späteren Zeitpunkt immer noch kürzen. Oftmals können Sie nämlich zu Beginn eines Projektes noch nicht vorhersehen, wie groß die Strings später im Alltag tatsächlich werden.</p>
            <h2>Zahlen</h2>
            <p>In MySQL gibt es – wie in den meisten Programmiersprachen – verschiedene Zahlentypen. Grundsätzlich ist zu unterscheiden zwischen</p>
            <ul>
                <li>ganzen Zahlen und</li>
                <li>reellen Zahlen (solche mit Fließkommaanteil).</li>
            </ul>
            <h3>Beispiel</h3>
            <ul>
                <li><b>ganze Zahl</b>: 42 </li>
                <li><b>reelle, nicht ganze Zahl</b>: 1699,99 </li>
            </ul>
            <p>Im einfachsten Fall verwenden Sie für ganze Zahlen den Datentyp <code>INTEGER</code>
                und für reelle Zahlen den Datentyp <code>DECIMAL</code>. Nehmen wir an, Ihre Kundin
                möchte, dass Sie zu jedem Seminar die Dauer des Seminars in Tagen speichern. Falls
                es keine halbtägigen Seminare gibt, könnten Sie ein Attribut
                <code>dauer_in_tagen</code> vom Typ <code>INTEGER</code> hinzufügen. Für das
                Attribut <code>preis</code> bietet sich offensichtlich der Typ <code>DECIMAL</code>
                an. Ähnlich wie den Datentyp <code>VARCHAR</code> müssen Sie auch den Datentyp
                <code>DECIMAL</code> konfigurieren. Geben Sie in runden Klammern zwei Zahlen an -
                getrennt durch ein Komma. Die erste beschreibt die maximale Gesamtstellenzahl. Mit
                der zweiten können Sie die Anzahl der Nachkommastellen festlegen.</p>
            <h3>Beispiel</h3>
            <p>Für die Preise der Seminare bietet es sich an, einen <code>DECIMAL(6,2)</code> zu verwenden. Damit haben die Preise 4 Stellen vor und 2 Stellen nach dem Komma. So lässt sich z.B. der Preis <i>1699,99 €</i> problemlos speichern. Das teuerste Seminar, dass die Akademie anbieten könnte, hätte dann einen Preis von <i> 9999,99 €</i>.</p>
            <p>Auch hier gilt es, einen Datentyp optimaler Größe für das jeweilige Attribut zu finden.</p>
            <p>MySQL kennt noch viele weitere Datentypen, aber für die momentanen Anforderungen reichen die genannten erst einmal aus.</p>
            <h2>Zeit und Datum</h2>
            <p>Um den Registrierungszeitpunkt in der Benutzertabelle speichern zu können, benötigen Sie einen Datentyp für Zeitangaben. MySQL unterscheidet dabei zwischen den Datentypen <code>DATE</code>, <code>TIME</code> und <code>DATETIME</code>. Alle drei Datentypen verwenden das ANSI-Format. Was das genau bedeutet, können Sie folgender Tabelle entnehmen:</p>
            <table>
                <caption>Zeit und Datumsangaben in MySQL</caption>
                <thead>
                    <tr>
                        <th>Datentyp</th>
                        <th>Bedeutung</th>
                        <th>Beispiel</th>
                        <th>Beispiel im ANSI-Format</th>
                        <th>ANSI-Format</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>DATE</td>
                        <td>Datum</td>
                        <td>29.07.1978</td>
                        <td>'1978-07-29'</td>
                        <td>'YYYY-MM-DD'</td>
                    </tr>
                    <tr>
                        <td>TIME</td>
                        <td>Uhrzeit</td>
                        <td>13 Uhr 25 und 17 Sekunden</td>
                        <td>'13:25:17'</td>
                        <td>'HH:MM:SS'</td>
                    </tr>
                    <tr>
                        <td>DATETIME</td>
                        <td>Ein Zeitpunkt, d.h. die Kombination aus Datum und Uhrzeit</td>
                        <td>Der 29.07.1978 um 13:25 und 17 Sekunden</td>
                        <td>'1978-07-29 13:25:17'</td>
                        <td>'YYYY-MM-DD HH:MM:SS'</td>
                    </tr>
                </tbody>
            </table>
            <p>Für das Speichern des Registrierungsdatums bietet sich <code>DATE</code> an.</p>
            <h2>Wahrheitswerte</h2>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir konzipieren hin und wieder neue Seminare. Diese sind aber nicht immer gleich öffentlich verfügbar. Wir möchten deswegen Seminare als inaktiv markieren können. Diese sollen dann noch nicht auf der Website erscheinen.</p>
            </hint>
            <p>Wahrheitswerte sind Werte von Typ <code>BOOLEAN</code>. Es gibt genau zwei davon: <code>TRUE</code> (wahr) und <code>FALSE</code> (unwahr). Mithilfe dieses Datentyps definieren Sie Attribute, für die es nur zwei Möglichkeiten gibt. Für Seminare, die noch nicht fertiggestellt sind und deswegen auch noch nicht öffentlich angezeigt werden, bietet sich deshalb ein Attribut <i>aktiv</i> vom Datentyp BOOLEAN an.</p>
            <p>Sie sollten allerdings noch wissen, dass MySQL eigentlich gar keinen BOOLEAN anbietet. In Wirklichkeit verwendet MySQL stattdessen einen INTEGER - genauer gesagt den Typ TINYINT(1) - und interpretiert die Zahl <code>0</code> als <code>FALSE</code> und die Zahl <code>1</code> als <code>TRUE</code>. Die Literale TRUE und FALSE können Sie dennoch verwenden, es sind aber Synonyme für die beiden zugehörigen Zahlen.</p>
            <h1>Zurück zum physischen Datenmodell</h1>
            <p>Sie haben Datentypen nun sowohl im relationalen Modell als auch in der praktischen Umsetzung von MySQL kennengelernt. Somit können Sie das physische Datenmodell vervollständigen. Dazu müssen Sie lediglich die Datentypen im Klassendiagramm ergänzen. Hier sehen Sie das verbesserte Diagramm der Seminarverwaltung:</p>
            <figure width="45%">
                <img src="images/klassendiagramme/pm_seminare_mit_typen.png"/>
                <figcaption>Physisches Datenmodell der Seminarverwaltung mit Typen</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Ein <keyword>Typ</keyword> (oder <keyword>Datentyp</keyword>) ist eine benannte endliche Menge von Werten.</li>
                <li>Ein <keyword>Attribut</keyword> ist ein Paar aus einem Namen und einem Typ.</li>
                <li>Jedes DBMS kann andere Typen anbieten.</li>
                <li>Das physische Datenmodell zeigt die zugeordneten Typen.</li>
            </ul>
            <h3>MySQL-Typenübersicht</h3>
            <ul>
                <li><keyword>Zeichenketten</keyword>: <code>VARCHAR, TEXT</code>
                </li>
                <li><keyword>Zahlen</keyword>: <code>DECIMAL, INTEGER</code>
                </li>
                <li><keyword>Zeit- und Datumsangaben</keyword>: <code>DATE, TIME, DATETIME</code>
                </li>
                <li><keyword>Wahrheitswerte</keyword>: <code>BOOLEAN</code>
                </li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Datentypen gibt es in SQL?</p>
                    </question_text>
                    <!-- SQL/2008   Der BIGINT-Datentyp ist SQL-Sprachenfunktion T071 des SQL/2008-Standards. -->
                    <answer correct="correct">INTEGER</answer>
                    <!--<answer correct="correct">BIGINT</answer>-->
                    <answer correct="correct">TEXT</answer>
                    <answer correct="correct">DECIMAL</answer>
                    <answer>STRING</answer>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Gruppen von Datentypen gibt es in MySQL?</p>
                    </question_text>
                    <answer correct="correct">Zeichenketten</answer>
                    <answer>XML-Markup</answer>
                    <answer correct="correct">Zahlen</answer>
                    <answer correct="correct">Zeit- und Datumstypen</answer>
                </question>

                <!-- Char wird nicht behandelt -->
                <!--<question reviewed="reviewed" public="public" type="multiple_choice">
                    <question_text>
                        <p>Welcher Datentyp eignet sich am besten für die Speicherung deutscher Postleitzahlen?</p>
                    </question_text>
                    <answer correct="correct">CHAR(5)</answer>
                    <answer>VARCHAR(5)</answer>
                    <answer>TEXT</answer>
                    <answer>INTEGER</answer>
                    <answer>DECIMAL(5)</answer>
                </question>-->
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Wählen Sie für die folgenden Werte den am besten geeigneten MySQL-Datentyp: 5, 6, 7, 8</p>
                    </question_text>
                    <answer>
                        <p>DATE</p>
                    </answer>
                    <answer>
                        <p>TEXT</p>
                    </answer>
                    <answer>
                        <p>VARCHAR</p>
                    </answer>
                    <answer correct="correct">
                        <p>INTEGER</p>
                    </answer>
                    <answer>
                        <p>DECIMAL</p>
                    </answer>
                </question>

                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Wählen Sie für die folgenden Werte einen geeigneten MySQL-Datentyp: 'Java', 'Ruby', 'PHP'</p>
                    </question_text>
                    <answer correct="correct">
                        <p>VARCHAR</p>
                    </answer>
                    <answer>
                        <p>TEXT</p>
                    </answer>
                    <answer>
                        <p>DECIMAL</p>
                    </answer>
                    <answer>
                        <p>TINYINT(3)</p>
                    </answer>
                </question>

              <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welcher Datentyp ist am besten zum Speichern von Telefonnummern in der Form <i>+49 1791234567</i> geeignet?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>VARCHAR</p>
                    </answer>
                    <answer>
                        <p>TEXT</p>
                    </answer>
                    <answer>
                        <p>DECIMAL</p>
                    </answer>
                    <answer>
                        <p>NUMBER</p>
                    </answer>
                    <answer>
                        <p>INTEGER</p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welcher MySQL-Datentyp ist am Besten zum Speichern des Datums <i>01.01.1989</i> geeignet?</p>
                    </question_text>
                   <!-- <answer>
                        <p>INTEGER</p>
                    </answer>-->
                    <answer>
                        <p>DECIMAL</p>
                    </answer>
                    <answer>
                        <p>VARCHAR</p>
                    </answer>
                    <answer correct="correct">
                        <p>DATE</p>
                    </answer>
                    <answer>
                        <p>TIME</p>
                    </answer>
                  <!--  <answer>
                        <p>DATETIME</p>
                    </answer>-->
                    <answer>
                        <p>YEAR</p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden MySQL-Datentypen sind zum Speichern folgender Hausnummern <b>ungeeignet</b>? Zum Beispiel sollen folgende Hausnummern gespeichert werden: <i>11, 97, 3, 221b, 65</i></p>
                    </question_text>
                    <answer>
                        <p>VARCHAR</p>
                    </answer>
                    <answer correct="correct">
                        <p>DECIMAL</p>
                    </answer>
                    <answer correct="correct">
                        <p>DATE</p>
                    </answer>
                    <answer correct="correct">
                        <p>INTEGER</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Datentypen für Werte</name>
                <content>
                    <p>Im Folgenden sind Reihen von Werten angegeben. Das Komma dient dabei als Trenner zwischen den Werten. Zeichenketten stehen in einfachen Anführungszeichen »'«.</p>
                    <p>Wählen Sie geeignete Datentypen für jede Reihe von Werten.</p>
                    <ol>
                        <li>9, 17, 28, 45, 12, 9, 17</li>
                        <li>11.4, 7.3, 9.8, 99.2</li>
                        <li>3, 4, 3467.278, 5, 6, 7, 8</li>
                        <li>'Stefanie', 'Jan', 'Sabine', 'Michael', 'Udo', 'Sebastian', 'Katherina'</li>
                        <li>0179534891, 00491721234, 091112345</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>INTEGER</li>
                        <li>DECIMAL(3, 1)</li>
                        <li>DECIMAL(7, 3)</li>
                        <li>VARCHAR(20)</li>
                        <li>VARCHAR(20)</li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Datumsangaben</name>
                <content>
                    <p>Notieren Sie folgende Zeitangaben im ANSI-Format:</p>
                    <ol>
                        <li>August 23, 1923</li>
                        <li>2. Dezember 1975</li>
                        <li>11. September 2001 um 9:03</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>'1923-08-23'</li>
                        <li>'1975-12-02'</li>
                        <li>'2001-09-11 09:03'</li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Typen des Filmverleihs</name>
                <content>
                    <p>Ergänzen Sie das physische Modell des Filmverleihs (Übung aus <a href="#lesson_pdbm"/>) um passende Typen.</p>
                </content>
                <answer>
                    <figure width="70%">
                        <img src="images/loesungen/lektion_08/film_verleih_pm_mit_typen.png"/>
                    </figure>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Datentypen für Attribute</name>
                <content>
                    <p>Wählen Sie geeignete Datentypen für die Attribute der folgenden Tabellen und zeichnen Sie die physischen Modelle in UML.</p>
                    <ul>
                        <li>autos = {modell, hersteller, leistung_in_ps, von_0_auf_100_in_sec}</li>
                    </ul>
                    <ul>
                        <li>buecher = {titel, autor, erscheinungsdatum, verlag, seitenzahl}</li>
                    </ul>
                </content>
            </exercise>
            <exercise>
                <name>Typen der Fluggesellschaft</name>
                <content>
                    <p>Ergänzen Sie das physische Modell der Fluggesellschaft (Übung aus <a href="#lesson_pdbm"/>) um passende Typen.</p>
                </content>
            </exercise>
            <exercise>
                <name>Typen der Partnervermittlung</name>
                <content>
                    <p>Ergänzen Sie das physische Modell der Partnervermittlung (Übung aus <a href="#lesson_pdbm"/>) um passende Typen. Also nein, natürlich Datentypen. Die anderen passenden Typen tragen Sie erst ein, wenn die Anwendung läuft…</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>SQL: Tabellen anlegen und löschen</lesson_name>
            <topics>
                <li>aus welchen Teilen SQL besteht.</li>
                <li>wie Sie Tabellen anlegen.</li>
                <li>wie Sie Tabellen löschen.</li>
            </topics>
            <h1>Tabellen anlegen</h1>
            <p>Sie haben nun ein physisches Datenmodell als Diagramm auf dem Papier. Um einen praktischen Nutzen daraus zu gewinnen, müssen Sie es in eine reale Datenbank übertragen. Dazu benötigen Sie wieder SQL-Anweisungen. Der Befehl zum Anlegen einer Tabelle lautet sinnigerweise <code>CREATE TABLE</code>.</p>
            <p>Starten Sie den MySQL-Kommandozeilenclient.</p>
            <blockcode src="code/19.txt"/>
            <p>Wechseln Sie in die Datenbank <i>seminarverwaltung</i>, die Sie in <a href="#db_praxis"/> angelegt haben:</p>
            <blockcode src="code/20.txt"/>
            <p>Mit dem MySQL-Befehl <code>USE</code> können Sie eine bestimmte Datenbank zur Verwendung auswählen. Wenn Sie sich nicht vertippt haben und die Datenbank existiert, quittiert MySQL mit</p>
            <blockcode src="code/21.txt"/>
            <p>USE hat übrigens die BNF</p>
            <blockcode src="code/22.txt"/>
            <p>Ab sofort können Sie Befehle absetzen, die speziell die Datenbank <i>seminarverwaltung</i> betreffen. </p>
            <p>Legen Sie nun die Tabellen an, die Sie zuvor im physischen Datenmodell beschrieben haben:</p>
            <blockcode type="sql" src="code/23.sql"/>
            <p>Der Client antwortet mit:</p>
            <blockcode src="code/24.txt"/>
            <p>
                <keyword>Query</keyword> heißt »Anfrage«. Alle Anweisungen werden in SQL als Anfragen bezeichnet. Deswegen ist <code>Query OK</code> die Erfolgsmeldung, die Sie meistens erhalten. Sie können zur Sicherheit überprüfen, ob die Tabelle tatsächlich angelegt wurde.</p>
            <blockcode type="sql" src="code/25.sql"/>
            <blockcode src="code/26.txt"/>
            <p>Legen Sie nun noch die Tabelle Benutzer an:</p>
            <blockcode src="code/27.txt"/>
            <p>
                <code>SHOW TABLES</code> zeigt nun beide Tabellen:</p>
            <blockcode src="code/28.txt"/>
            <p>Außerdem können Sie überprüfen, ob die richtigen Spalten mit entsprechenden Datentypen vorhanden sind:</p>
            <blockcode type="sql" src="code/29.sql"/>
            <blockcode src="code/30.txt"/>
            <blockcode type="sql" src="code/31.sql"/>
            <blockcode src="code/32.txt"/>
            <p>Sie sehen die Spalten und ihre Typen. Die zusätzlichen Informationen zu <i>Null</i>, <i>Key</i>, <i>Default</i> und <i>Extra</i> können Sie vorerst außer Acht lassen.</p>
            <p>Die BNF von SHOW COLUMNS ist übrigens ganz einfach:</p>
            <blockcode type="sql" src="code/33.sql"/>
            <h1>DML, DDL und DCL</h1>
            <p>SQL ist in drei logische Teile untergliedert:</p>
            <ul>
                <li>DDL (Data Definition Language)</li>
                <li>DML (Data Manipulation Language)</li>
                <li>DCL (Data Control Language)</li>
            </ul>
            <p>Der Befehl <code>CREATE TABLE</code> gehört zur <keyword>DDL</keyword>, der <keyword>Data Definition Language</keyword>. Dieser Teil der Sprache beschäftigt sich mit dem Definieren von Daten, d.h. die dazugehörigen Befehle betreffen die Struktur der Daten (Tabellen, Spalten, Datentypen) – nicht aber die Daten selbst. Sie können damit zwar Tabellen anlegen und verändern, jedoch nicht die Daten (also z.B. Seminare), die in diesen Tabellen gespeichert werden. Dafür benötigen Sie die <keyword>Data Manipulation Language</keyword>, die Sie ebenfalls bald kennenlernen. Mit der <keyword>Data Control Language</keyword> schließlich können Sie die Zugriffsrechte auf die Daten steuern (Security).</p>
            <p>Die <code>SHOW</code> -Anweisungen gehören übrigens nicht zum SQL-Standard selbst, sondern sind MySQL-spezifische Befehle, die der Datenbankadministration dienen, sogenannte <keyword>Database Administration Statements</keyword>. Ähnlich verhält es sich mit <code>USE</code>, es gehört zu den <keyword>MySQL Utility Statements</keyword>.</p>
            <h1>BNF: Wiederholung und Verschachtelung</h1>
            <p>Der Befehl CREATE TABLE besitzt folgende BNF:</p>
            <figure>
                <blockcode numbered="numbered" src="code/34.txt"/>
                <figcaption>BNF von CREATE TABLE</figcaption>
            </figure>
            <p>Schauen Sie sich die erste Zeile etwas genauer an:</p>
            <blockcode src="code/35.txt"/>
            <p>Die Variable <i>tbl_name</i> steht für einen von Ihnen gewählten Tabellennamen. <i>create_definition</i> ist dagegen in einer eigenen BNF-Definition nochmal genauer erklärt:</p>
            <blockcode src="code/36.txt"/>
            <p>Vor dem Doppelpunkt »:« steht die Variable (Nichtterminal), die hier genauer definiert wird. Nach dem Doppelpunkt steht der definierende BNF-Ausdruck. <i>col_name</i> meint dabei einen Spaltennamen, den Sie wiederum selbst wählen können (z.B. <i>titel</i> oder <i>preis</i>). Für die Variable <i>data_type</i> können Sie jeweils einen Datentyp einsetzen (z.B. VARCHAR(80) oder TEXT).</p>
            <p>Wie Sie sehen, können BNF-Ausdrücke aus mehreren verschachtelten Regeln bestehen. Eine weitere Neuerung hat sich in die erste BNF-Regel eingeschlichen – die drei Punkte »…« . Sie stehen in der BNF für eine beliebige <keyword>Wiederholung</keyword>. Dadurch können Sie mit <code>CREATE TABLE</code> nicht nur eine Spalte anlegen, sondern beliebig viele.</p>
            <p>Zur Verdeutlichung möchte ich Ihnen detailliert darstellen, wie Sie von der abstrakten BNF-Form zu einer konkreten Ausprägung des Befehls kommen.</p>
            <ul>
                <li>BNF von <code>CREATE TABLE</code></li>
            </ul>
            <blockcode src="code/37.txt"/>
            <ol>
                <li>
                    <p>Auflösen der Wiederholung</p>
                    <code>CREATE TABLE table_name (create_definition1, create_definition2, create_definition3)</code>
                </li>
                <li>
                    <p>Ersetzen der Variablen durch Ihre Definition</p>
                    <code>CREATE TABLE table_name(col_name1 data_type1, col_name2 data_type2, col_name2 data_type2)</code>
                </li>
                <li>
                    <p>Ersetzen der Variablen durch konkrete Werte</p>
                    <code>CREATE TABLE seminare (titel VARCHAR(80), beschreibung TEXT, preis DECIMAL(6,2))</code>
                </li>
            </ol>
            <p>Die Reihenfolge der Schritte ist dabei nicht von Bedeutung. Wichtig ist nur, dass Sie so zeigen können, dass ein spezieller SQL-Befehl tatsächlich der vorgegebenen BNF-Syntax entspricht.</p>
            <hint>
                <p>Beachten Sie, dass es sich bei der hier verwendeten Variante noch um eine vereinfachte Form handelt. Sobald Sie weitere Möglichkeiten des Befehls kennenlernen, werde ich Ihnen auch eine erweiterte BNF von <code>CREATE TABLE</code> vorstellen. Die vollständige BNF finden Sie im MySQL-Manual: <a href="https://dev.mysql.com/doc/refman/5.0/en/create-table.html">https://dev.mysql.com/doc/refman/5.0/en/create-table.html</a></p>
            </hint>
            <h1>Löschen von Tabellen</h1>
            <p>Unverhofft klingelt das Telefon, Ihre Kundin ist am Apparat. Vorsichtig formuliert Sie ihre Anfrage:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Nach Durchsicht unserer Daten ist mir aufgefallen, dass wir Seminare anbieten, deren Titel die 80-Zeichengrenze durchbricht. Könnten Sie vielleicht die Titellänge auf 120 Zeichen erhöhen?</p>
            </hint>
            <p>Nachdem Sie ihr versichert haben, dass das kein Problem ist, klingt sie sichtlich erleichtert.</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Danke, ich fürchtete schon, dass wir die Titel kürzen müssten.</p>
            </hint>
            <p>Wie realisieren Sie das nun?</p>
            <p>Sie müssen die Tabelle lediglich löschen und nochmal neu anlegen – diesmal mit größerer <i>titel</i> -Spalte. Verwenden Sie dazu folgende Anweisung:</p>
            <blockcode type="sql" src="code/38.sql"/>
            <p>Wie schon bei den Datenbanken heißt es <code>DROP</code> (fallenlassen) und nicht etwa <code>DELETE</code> (löschen). Das liegt daran, dass <code>DELETE</code> zur DML gehört. Um Verwechslungen zu vermeiden, verwendet die DDL durchgängig <code>DROP</code>.</p>
            <p>Jetzt können Sie die verbesserte Tabelle neu anlegen:</p>
            <blockcode type="sql" src="code/39.sql"/>
            <p>Hier noch die BNF von <code>DROP TABLE</code>:</p>
            <blockcode src="code/40.txt"/>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Die SQL ist in die drei Teile DDL, DML und DCL gegliedert.</li>
            </ul>
            <h3>BNF</h3>
            <table>
                <caption>Bisherige BNF-Konzepte</caption>
                <thead>
                    <tr>
                        <th>Konzept</th>
                        <th>Darstellung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Terminale</td>
                        <td>Wort in Großbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Nichtterminale (Variablen)</td>
                        <td>Wort in Kleinbuchstaben</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Wiederholung</b>
                        </td>
                        <td>...</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Verschachtelte Definition</b>
                        </td>
                        <td>:</td>
                    </tr>
                </tbody>
            </table>
            <h3>SQL: DDL</h3>
            <table>
                <caption>Bisherige DDL-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Tabelle anlegen</b>
                        </td>
                        <td>
                            <code>
                  CREATE TABLE tbl_name (create_definition, ...)
                  create_definition: col_name data_type
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Tabelle löschen</b>
                        </td>
                        <td><code>DROP TABLE tbl_name</code></td>
                    </tr>
                </tbody>
            </table>
            <h3>SQL: Utility und Administration</h3>
            <table>
                <caption>Bisherige Utility- und Administrations-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbanken auflisten</td>
                        <td><code>SHOW DATABASES</code></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Datenbank wechseln</b>
                        </td>
                        <td><code>USE database_name</code></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Tabellen der aktuellen DB anzeigen</b>
                        </td>
                        <td><code>SHOW TABLES</code></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Spalten einer Tabelle anzeigen</b>
                        </td>
                        <td><code>SHOW COLUMNS FROM tbl_name</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <question_text>
                        <p>Welcher Teil der SQL-Sprache beschäftigt sich mit der Definition von Daten? Bitte tragen Sie die entsprechende Abkürzung ein.</p>
                        <p><blank>DDL</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welcher Teil der SQL-Sprache beschäftigt sich mit der Manipulation und dem Auslesen von Daten? Bitte tragen Sie die entsprechende Abkürzung ein.</p>
                        <p><blank>DML</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <question_text>
                        <p>Welcher Teil der SQL-Sprache beschäftigt sich mit der Vergabe und Änderung von Rechten in einer Datenbank? Bitte tragen Sie die entsprechende Abkürzung ein.</p>
                        <p><blank>DCL</blank></p>
                    </question_text>
                </question>
                <question public="public" type="multiple_choice" reviewed="reviewed">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie viele Tabellen kann eine Datenbank maximal enthalten?</p>
                    </question_text>
                    <answer>Maximal 255</answer>
                    <answer>Maximal 1023</answer>
                    <answer correct="correct">Manche DBMS haben eine künstliche Begrenzung, aber im Prinzip beliebig viele.</answer>
                    <answer>Es ist nur eine Tabelle pro Datenbank möglich.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1245), rvh: bestätigt -->
                    <question_text>
                        <p>Der SQL-Befehl zum Erstellen der Tabelle <i>personal</i> lautet:</p>
                    </question_text>
                    <answer>
                        <p>MAKE TABLE personal</p>
                    </answer>
                    <answer>
                        <p>CREATE personal</p>
                    </answer>
                    <answer>
                        <p>ADD TABLE personal</p>
                    </answer>
                    <answer correct="correct">
                        <p>CREATE TABLE personal</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5770), rvh: unsinnige Distraktoren entfernt, einen mit Buchstabendreher dafür ergänzt, korrekt -->
                    <question_text>
                        <p>In welche Teilsprachen lässt sich SQL untergliedern?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>DDL</p>
                    </answer>
                    <answer correct="correct">
                        <p>DML</p>
                    </answer>
                    <answer correct="correct">
                        <p>DCL</p>
                    </answer>
                    <answer>
                        <p>DLM</p>
                    </answer>
                  </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Fehler finden</name>
                <content>
                    <p>Finden Sie die Fehler in folgender SQL-Anweisung. Notieren Sie die verbesserte Anweisung.</p>
                    <blockcode src="code/41.txt"/>
                </content>
                <answer>
                    <blockcode type="sql" src="code/42.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Korrektes SQL</name>
                <content>
                    <p>Zeigen Sie durch schrittweise Ausprägung der BNF, dass folgende SQL-Anweisung korrekt ist:</p>
                    <blockcode type="sql" src="code/43.sql"/>
                </content>
                <answer>
                    <ol>
                        <li><code>CREATE TABLE tbl_name (create_definition, ...) create_definition: col_name data_type</code>
                        </li>
                        <li><code>CREATE TABLE tbl_name (create_definition1, create_definition2, create_definition3, create_definition4,create_definition5 , create_definition6) create_definition: col_name data_type</code>
                        </li>
                        <li><code>CREATE TABLE tbl_name (col_name1 data_type1, col_name2 data_type2, col_name3 data_type3, col_name4 data_type4, col_name5 data_type5 , col_name6 data_type6)</code>
                        </li>
                        <li>
                            <blockcode type="sql" src="code/44.sql"/>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>BNF ausprägen</name>
                <content>
                    <p>Prägen Sie die folgenden BNF-Ausdrücke mit jeweils 2 Beispielen aus:</p>
                    <ol>
                        <li>ICH GEHE AN DIE BAR UND MIXE MIR EINEN cocktail. DAZU BENÖTIGE ICH zutaten UND zutat. ANSCHLIESSEND GARNIERE ICH DEN DRINK MIT frucht. zutaten: zutat, ...</li>
                        <li>ZU ereignis WÜNSCHE ICH MIR geschenk geschenk: farbe fahrzeug VON firma firma: firmenname rechtsform AUS ort</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>ICH GEHE AN DIE BAR UND MIXE MIR EINEN Vanilla Sky. DAZU BENÖTIGE ICH Amaretto, Kahlúa, Vanillesirup UND Milch. ANSCHLIESSEND GARNIERE ICH DEN DRINK MIT einer Kirsche.</li>
                        <li>ZU meinem Geburtstag WÜNSCHE ICH MIR ein rotes Fahrrad der Schnell &amp; Wind AG AUS Hamburg.</li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Mengenschreibweise nach DDL</name>
                <content>
                    <p>Überführen Sie folgenden, in Mengenschreibweise angegebenen Tabellen nach DDL.</p>
                    <ol>
                        <li>autos = {hersteller, modell, leistung_in_ps, von_0_auf_100_in_sec}</li>
                        <li>buecher = {titel, autor, erscheinungsdatum, klappentext, seitenzahl}</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <blockcode type="sql" src="code/45.sql"/>
                        </li>
                        <li>
                            <blockcode type="sql" src="code/46.sql"/>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Tabellenschema des Filmverleihs</name>
                <content>
                    <p>Legen Sie die Tabellen des Filmverleihs an, gemäß dem physischen Modell aus der Übung von <a href="#lesson_pdbm"/>.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/47.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Tabellenschema der Fluggesellschaft</name>
                <content>
                    <p>Legen Sie die Tabellen der Fluggesellschaft an, gemäß dem physischen Modell aus der Übung von <a href="#lesson_pdbm"/>.</p>
                </content>
            </exercise>
            <exercise>
                <name>Tabellenschema der Partnervermittlung</name>
                <content>
                    <p>Legen Sie die Tabellen der Partnervermittlung an, gemäß dem physischen Modell aus der Übung von <a href="#lesson_pdbm"/>.</p>
                </content>
            </exercise>
        </lesson>
        <lesson id="insert_select">
            <lesson_name>SQL: Datensätze einfügen und auslesen</lesson_name>
            <topics>
                <li>wie Sie mit SQL Daten in eine Tabelle einfügen.</li>
                <li>wie Sie mit SQL Daten aus einer Tabelle auslesen.</li>
            </topics>
            <h1>Daten einfügen</h1>
            <p>Nachdem Sie eine Tabelle für Seminare erstellt haben, besteht der nächste Schritt darin, Seminare anzulegen.</p>
            <ul>
                <li>Datenbanken &amp; SQL <br/>
                    <b>Beschreibung</b>: Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …<br/>
                    <b>Preis</b>: 975,00 € </li>
            </ul>
            <p>Um das obige Seminar einzufügen, benötigen Sie den <code>INSERT</code> -Befehl (Einfügen). Geben Sie folgende SQL-Anweisung ein:</p>
            <blockcode type="sql" src="code/48.sql"/>
            <p>MySQL antwortet mit</p>
            <blockcode src="code/49.txt"/>
            <p>
                <i>1 row affected</i> (eine Zeile betroffen) bedeutet hier, dass das DBMS <b>eine</b> neue Zeile in die Tabelle eingefügt hat.</p>
            <p>Genauso einfach können Sie einen Benutzer einfügen.</p>
            <blockcode type="sql" src="code/50.sql"/>
            <p>Achten Sie bei der Angabe des Registrierungsdatums darauf, dass Sie den Wert in Anführungszeichen setzen und im ANSI-Format angeben – d.h. zuerst das Jahr (vierstellig), dann der Monat (zweistellig) und als Letztes der Tag (auch zweistellig).</p>
            <p>Die BNF von <code>INSERT INTO</code> lautet:</p>
            <blockcode type="sql" src="code/51.sql"/>
            <p>Die Variable <i>col_name</i> lässt sich wie gewohnt durch einen Spaltennamen ersetzen. Für die Variable <i>value</i> können Sie einen beliebigen Wert einsetzen. Zahlen können Sie direkt angeben. Strings und Datumsangaben dagegen müssen Sie in einfache Anführungszeichen »'« (<kbd>shift-#</kbd>) setzen.</p>
            <p>Sie können die Reihenfolge der Spalten auch vertauschen – achten Sie aber darauf, dass Sie die Werte in der gleichen Reihenfolge wie die Spaltennamen angeben.</p>
            <h3>Beispiel</h3>
            <p>Die Anweisung</p>
            <blockcode type="sql" src="code/52.sql"/>
            <p>ist korrekt. Folgende Anweisung</p>
            <blockcode type="sql" src="code/53.sql"/>
            <p>ist jedoch fehlerhaft, da MySQL versucht, für die Spalte <i>preis</i> den String <code>'Datenbanken &amp; SQL'</code> einzufügen.</p>
            <h1>Daten anzeigen</h1>
            <p>Prüfen Sie nun, ob das Seminar in der Tabelle angekommen ist. Das Zugreifen auf/Ausgeben von Datensätzen bezeichnet SQL als Selektierung von Datensätzen. Sie benötigen deswegen die <code>SELECT</code> -Anweisung.</p>
            <blockcode type="sql" src="code/54.sql"/>
            <p>Diese Anweisung können Sie lesen als:</p>
            <blockquote>
                <p>Wähle alle Spalten aus der Tabelle seminare.</p>
            </blockquote>
            <p>Der Stern »<code>*</code>« gibt an, dass Sie alle Spalten benötigen. Hinter dem <code>FROM</code> geben Sie den Namen der Tabelle an.</p>
            <p>Sie erhalten folgendes Ergebnis (hier leicht gekürzt):</p>
            <blockcode type="sql" src="code/55.sql"/>
            <p>Hier noch die (vereinfachte) BNF von <code>SELECT</code>:</p>
            <blockcode type="sql" src="code/56.sql"/>
            <hint>
                <h3>Achtung: SQL-Fehler</h3>
                <p>Beachten Sie bitte, dass SQL hier einen Fehler hat – nicht nur MySQL, sondern der SQL-Standard im Allgemeinen. Im relationalen Datenmodell ist es nicht erlaubt, mehrere exakt identische Datensätze in eine Tabelle einzufügen. SQL lässt das aber fälschlicherweise zu.</p>
                <p>Geben Sie einfach mehrmals</p>
                <blockcode type="sql" src="code/57.sql"/>
                <p>ein.</p>
                <p>Wenn Sie anschließend mit</p>
                <blockcode type="sql" src="code/58.sql"/>
                <p>die Tabelle anzeigen, sehen Sie, dass der gleiche Datensatz mehrfach vorhanden ist. Dieses Fehlverhalten kann gravierende Folgen haben.</p>
                <blockquote>
                    <p><!--There are numerous practical arguments in support of the position that duplicate tuples
          should be prohibited. – --> Es gibt eine Vielzahl von praktischen Argumenten, die die Sichtweise unterstützen, dass doppelte Tupel nicht erlaubt sein dürften.<i>C.J. Date (2005)</i></p>
                </blockquote>
                <p>Sie lernen bald, wie Sie das Problem gänzlich vermeiden. Achten Sie momentan einfach darauf, denselben Datensatz nicht versehentlich mehrfach einzufügen.</p>
            </hint>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit der <code>INSERT</code>-Anweisung fügen Sie Datensätze ein.</li>
                <li>Mit der <code>SELECT</code>-Anweisung lesen Sie Datensätze aus.</li>
                <li>Setzen Sie Strings und Datumsangaben in Anführungszeichen.</li>
                <li>Achten Sie darauf, denselben Datensatz nicht versehentlich mehrfach einzufügen.</li>
            </ul>
            <h3>SQL: DML</h3>
            <table>
                <caption>Bisherige DML-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datensätze auslesen</td>
                        <td><code>SELECT * FROM tbl_name</code></td>
                    </tr>
                    <tr>
                        <td>Datensatz einfügen</td>
                        <td><code>INSERT INTO tbl_name (col_name, ...) VALUES (value, ...)</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Ergänzen Sie das folgende BNF:</p>
                        <p>INSERT <blank>INTO</blank> tbl_name (col_name, ...) <blank>VALUES</blank> (value, ...)</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Der SQL-Befehl, um alle Zeilen und Spalten der Tabelle <i>customers</i> auszugeben, lautet:</p>
                        <p><blank>SELECT *</blank> FROM customers</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1247)-->
                    <question_text>
                        <p>Der SQL-Befehl, um alle Zeilen und Spalten der Tabelle products auszugeben, lautet:</p>
                    </question_text>
                    <answer>
                        <p>SELECT ALL FROM products</p>
                    </answer>
                    <answer>
                        <p>SELECT FROM products, *</p>
                    </answer>
                    <answer correct="correct">
                        <p>SELECT * FROM products</p>
                    </answer>
                    <answer>
                        <p>SELECT ANY FROM products</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- korrekt (WE-ID 1250), rvh: bestätigt -->
                    <question_text>
                        <p>Mit welchem Schlüsselwort werden in einer SQL-Abfrage Spalten ausgewählt?</p>
                    </question_text>
                    <answer>ORDER BY</answer>
                    <answer>WHERE</answer>
                    <answer correct="correct">SELECT</answer>
                    <answer>ALTER</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1256), rvh: korrekt -->
                    <question_text>
                        <p>Zum Einfügen neuer Datensätze in eine Tabelle wird folgender SQL-Befehl benutzt:</p>
                    </question_text>
                    <answer>UPDATE</answer>
                    <answer correct="correct">INSERT INTO</answer>
                    <answer>CREATE</answer>
                    <answer>EDIT</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welche der folgenden SQL-Anweisungen gehören zur DML?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>INSERT</p>
                    </answer>
                    <answer>
                        <p>DROP TABLE</p>
                    </answer>
                    <answer>
                        <p>CREATE DATABASE</p>
                    </answer>
                    <answer correct="correct">
                        <p>SELECT</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5771), bestätigt (rvh) -->
                    <question_text>
                        <p>Welche der folgenden SQL-Anweisungen ist <b>nicht</b> Teil der DDL?</p>
                    </question_text>
                    <answer>
                        <p>CREATE TABLE</p>
                    </answer>
                    <answer>
                        <p>DROP TABLE</p>
                    </answer>
                    <answer>
                        <p>CREATE DATABASE</p>
                    </answer>
                    <answer correct="correct">
                        <p>INSERT INTO</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Fehlersuche</name>
                <content>
                    <p>Finden Sie die Fehler in den beiden folgenden SQL-Anweisungen:</p>
                    <ul>
                        <li>INSERT INTO seminare (preis, titel, beschreibung) VALUES (Im Lotto gewinnen – leicht gemacht, 5999, Sicherlich möchte jeder einmal im...) </li>
                        <li>INSERT VALUES INTO "benutzer" ('Log', 'Anna', anna@log.de, 'geheimes_passwort', registriert_seit, 'Frau') (name, vorname, email, 2008-02-18, anrede); </li>
                    </ul>
                </content>
            </exercise>
            <exercise>
                <name>Weitere Seminare und Benutzer einfügen</name>
                <content>
                    <p>Fügen Sie die restlichen Seminare aus der folgenden Tabelle in die <i>seminarverwaltung</i> ein:</p>
                    <table>
                        <caption>Tabelle <i>seminare</i></caption>
                        <thead>
                            <tr>
                                <th>titel</th>
                                <th>beschreibung</th>
                                <th>preis</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Ruby on Rails</td>
                                <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                                <td>1900,00</td>
                            </tr>
                            <tr>
                                <td>Ajax &amp; DOM</td>
                                <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen…</td>
                                <td>1699,99</td>
                            </tr>
                            <tr>
                                <td>JavaScript</td>
                                <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                                <td>2500,00</td>
                            </tr>
                            <tr>
                                <td>Datenbanken &amp; SQL</td>
                                <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand…</td>
                                <td>975,00</td>
                            </tr>
                        </tbody>
                    </table>
                    <p>Fügen Sie zwei weitere Benutzer in die Datenbank ein:</p>
                    <ul>
                        <li>Huana, Marie hat sich am 03.02.2009 registriert. Ihre E-Mail ist <i>huana@example.com</i> und sie verwendet das Passwort <i>reibekuche</i>. </li>
                        <li>Meisenbär, Andreas hat sich am 15.07.2008 registriert. Seine E-Mail ist <i>a.meisenbär@example.com</i> und er verwendet das Passwort <i>schüssel</i>. </li>
                    </ul>
                </content>
                <answer>
                    <blockcode type="sql" src="code/59.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Daten des Filmverleihs</name>
                <content>
                    <p>Fügen Sie zum Testen der Datenbank folgende Daten ein:</p>
                    <p><b>Filme</b></p>
                    <ul>
                        <li>Cube (1997), 90 min. Sieben völlig Fremde mit sehr unterschiedlichen Charakterzügen werden unfreiwillig in ein endloses kafkaartiges Labyrinth voller Fallen gesteckt. </li>
                        <li>Der Herr der Ringe – Die Gefährten (2001), 178 min. In einem kleinen Dorf wird einem jungen Hobbit namens Frodo ein uralter, magischer Ring anvertraut. Er muss sich auf eine epische Reise zum Schicksalsberg begeben, um ihn zu zerstören. </li>
                    </ul>
                    <p><b>Regisseure</b></p>
                    <ul>
                        <li>Vincent Natali, 06.01.1969</li>
                        <li>Peter Jackson, 31.10.1961</li>
                    </ul>
                </content>
                <answer>
                    <blockcode type="sql" src="code/60.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Daten der Fluggesellschaft</name>
                <content>
                    <p>Überlegen Sie sich je drei Beispieldatensätze pro Tabelle der Fluggesellschaft und tragen Sie diese ein.</p>
                </content>
            </exercise>
            <exercise>
                <name>Daten der Partnervermittlung</name>
                <content>
                    <p>Überlegen Sie sich je drei Beispieldatensätze pro Tabelle der Partnervermittlung und tragen Sie diese ein. </p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Schlüssel</lesson_name>
            <topics>
                <li>was Schlüssel sind.</li>
                <li>wie Sie Schlüssel bestimmen können.</li>
                <li>welches Muster die Schlüsselproblematik im ORM löst.</li>
            </topics>
            <figure>
                <blockquote>
                    <p><!--Date is like broccoli; he'll never be my favorite author, but I know that what he's
          writing is good for me.-->Date ist wie Brokkoli. Er wird nie mein Lieblingsautor sein, aber ich weiß, dass das, was er schreibt, gut für mich ist.</p>
                </blockquote>
                <figcaption>Stuart Ainsworth (2009)</figcaption>
            </figure>
            <p>Ein wichtiges Prinzip relationaler Datenbanken ist die Möglichkeit, Datensätze eindeutig zu identifizieren, um sie wiederzufinden. Das wird insbesondere später wichtig, wenn Sie Datensätze aus verschiedenen Tabellen einander zuordnen – beispielsweise weil Sie wissen möchten, welcher Kunde welche Seminare gebucht hat.</p>
            <p>Im relationalen Modell gibt es dafür Schlüssel. So wie ein echter Schlüssel genau zu einem bestimmten Schloss passt, so passt ein Datenbank-Schlüssel genau zu einem bestimmten Datensatz.</p>
            <h1>Was ist ein Schlüssel?</h1>
            <hint>
                <h3>Christopher sagt…</h3>
                <figure>
                    <blockquote>
                        <p>Ein Schlüssel ist, vereinfacht gesagt: ein eindeutiger Bezeichner.<br/> Genauer: Sei K eine Teilmenge des Headings von Relvar R; dann ist K […] ein Schlüssel für R genau dann, wenn (a) kein möglicher Wert für R zwei verschiedene Tupel mit demselben Wert für K; enthalten kann (Eindeutigkeit), während (b) dies nicht für eine echte Teilmenge von K gilt (Irreduzibiltät). </p>
                    </blockquote>
                    <figcaption>Date (2007)</figcaption>
                </figure>
            </hint>
            <p>Christophers Definition ist möglicherweise etwas schwierig zu lesen. Deswegen möchte ich Ihnen das Konzept Schritt für Schritt näherbringen. Im Grunde möchten Sie für jeden Datensatz (d.h. Zeile, Tupel) einen eindeutigen Bezeichner haben. Das ist der Sinn eines Schlüssels. Wie lässt sich das erreichen?</p>
            <p>Betrachten Sie nochmal die Tabelle <i>seminare</i>.</p>
            <ul>
                <li>seminare = {titel, beschreibung, preis}</li>
            </ul>
            <table id="seminare_schluessel">
                <caption>Tabelle <i>seminare</i>
                </caption>
                <thead>
                    <tr>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                    </tr>
                </tbody>
            </table>
            <p>Als eindeutiger Bezeichner lässt sich der <i>titel</i> wählen. Sie können anhand des Titels <i>Datenbanken &amp; SQL</i> das dazugehörige Seminar – also die ganze Zeile – eindeutig identifizieren.</p>
            <p>Sie können in diesem Fall notieren:</p>
            <ul>
                <li>{titel} ist ein Schlüssel der Tabelle <i>seminare</i>. </li>
            </ul>
            <p>Manchmal benötigen Sie aber auch mehrere Attibute. Betrachten Sie bitte folgende Tabelle:</p>
            <ul>
                <li>uebungen = {seminar_titel, kapitel_nr, uebungs_nr, punkte}</li>
            </ul>
            <table>
                <caption>Tabelle uebungen (Auszug)</caption>
                <thead>
                    <tr>
                        <th>seminar_titel</th>
                        <th>kapitel_nr</th>
                        <th>uebungs_nr</th>
                        <th>punkte</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>4</td>
                        <td>1</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>4</td>
                        <td>2</td>
                        <td>7</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>4</td>
                        <td>3</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>Datenbanken &amp; SQL</td>
                        <td>5</td>
                        <td>1</td>
                        <td>10</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>2</td>
                        <td>1</td>
                        <td>3</td>
                    </tr>
                    <tr>
                        <td>JavaScript</td>
                        <td>4</td>
                        <td>1</td>
                        <td>7</td>
                    </tr>
                </tbody>
            </table>
            <p>Diese Tabelle wird im Schulungsunternehmen benötigt, um festzuhalten, welche Übung
                wie viele Punkte bringt. Es sind dabei alle Seminare in der Tabelle vorhanden, mit
                ihren jeweiligen Kapiteln und Übungen. Eine Zeile der Tabelle ist jeweils eine
                Übung. Um die Übung nachzulesen, müssen Sie das Schulungsskript des jeweiligen
                Seminars aufschlagen und dort im passenden Kapitel die entsprechende Übung finden.
                So ist z.B. die <i>Übung Nr. 2</i> aus <i>Kapitel 4</i> des Seminars
                    <i>Datenbanken &amp; SQL</i> 7 Punkte wert. Um einen Datensatz, d.h eine Übung
                eindeutig zu bestimmen, sind drei Attribute notwendig: <i>seminar_titel</i>,
                    <i>kapitel_nr</i> und <i>uebungs_nr</i>. Sie können also sagen:</p>
            <ul>
                <li>{seminar_titel, kapitel_nr , uebungs_nr} ist ein Schlüssel der Tabelle <i>uebungen</i>. </li>
            </ul>
            <p>Ein Schlüssel ist grundsätzlich eine Menge von Attributen. Es darf natürlich nicht irgendeine Menge sein. Beispielsweise kann die Menge <i>{name, schuhgroesse}</i> kein Schlüssel der Tabelle <i>seminare</i> sein. Die Attribute <i>name</i> und <i>schuhgroesse</i> kommen in <i>seminare</i> nicht einmal vor! Deswegen muss es sich bei einem Schlüssel einer Tabelle immer um eine Teilmenge des Headings (Überschrift) genau dieser Tabelle handeln.</p>
            <hint>
                <p>Ein Schlüssel ist eine Teilmenge des Headings einer Tabelle.</p>
            </hint>
            <p>Das relationale Modell fordert zudem von einer solchen Menge zwei Eigenschaften, damit sie als Schlüssel gilt:</p>
            <ul>
                <li>Eindeutigkeit</li>
                <li>Irreduzibilität</li>
            </ul>
            <h3>Eindeutigkeit</h3>
            <hint>
                <p>Ein Schlüssel ist immer eindeutig.</p>
            </hint>
            <p>Eindeutigkeit bedeutet, dass Sie anhand des Schlüssels immer nur <b>einen</b> Datensatz finden – nicht mehrere. In der Tabelle <i>seminare</i> kann also z.B. {preis} kein Schlüssel sein, da es durchaus mehrere Seminare geben kann, die gleich viel kosten. Wenn Sie vor die Aufgabe gestellt werden</p>
            <blockquote>
                <p>Finde das Seminar, das 2500,00 € kostet,</p>
            </blockquote>
            <p>so finden Sie in den Beispieldaten der Seminartabelle <!-- TODO: durch Tabellenrefenz belegen --> zwei Seminare, auf die das zutrifft. Es spielt aber auch keine Rolle, ob Sie in den Beispieldaten welche finden. Um die Eindeutigkeit zu gewährleisten, darf nicht einmal die Möglichkeit bestehen, dass zwei Seminare jeweils gleich viel kosten könnten. Natürlich lässt sich bei den Seminarpreisen die Möglichkeit nie ausschließen – deswegen ist {preis} nicht eindeutig und damit auch kein Schlüssel.</p>
            <h3>Irreduzibilität</h3>
            <hint>
                <p>Ein Schlüssel lässt sich nicht reduzieren.</p>
            </hint>
            <p>Betrachten Sie den Schlüssel {seminar_titel, kapitel_nr, uebungs_nr} aus der Tabelle <i>uebungen</i>. Er ist eindeutig. Wenn Sie z.B. wissen, dass die Übung Nr. 3 aus Kapitel 4 des Seminars <i>Datenbanken &amp; SQL</i> gemeint ist, so können Sie genau die Zeile mit der Übung bestimmen. Es gibt nur eine Zeile, zu der der Schlüssel passt – und es könnte auch keine weiteren geben.</p>
            <p>Versuchen Sie nun, den Schlüssel zu reduzieren, indem Sie ihm ein Attribut wegnehmen. Sie erhalten folgende Mengen:</p>
            <ul>
                <li>{kapitel_nr , uebungs_nr}</li>
                <li>{seminar_titel, uebungs_nr}</li>
                <li>{seminar_titel, kapitel_nr}</li>
            </ul>
            <p>Prüfen Sie, ob diese Mengen noch in der Lage sind, einen Datensatz eindeutig zu identifizieren.</p>
            <ul>
                <li>Identifiziert die Menge <i>{kapitel_nr , uebungs_nr}</i> eindeutig? </li>
            </ul>
            <p>Wenn Sie kapitel_nr und uebungs_nr kennen, so können verschiedene Übungen gemeint sein, da es in einem anderen Seminar die gleiche Kombination aus Kapitel- und Übungsnummer geben kann (z.B. Übung 4 aus Kapitel 1).</p>
            <ul>
                <li>Identifiziert die Menge <i>{seminar_titel, uebungs_nr}</i> eindeutig? </li>
            </ul>
            <p>Wenn Sie das Seminar und die Übungsnummer kennen, hilft Ihnen das auch nicht weiter, da es im gleichen Seminar natürlich in jedem Kapitel eine Übung mit z.B. der Nummer 1 geben kann.</p>
            <ul>
                <li>Identifiziert die Menge <i>{seminar_titel, kapitel_nr}</i> eindeutig? </li>
            </ul>
            <p>Aus Seminar und Kapitelnummer wiederum können Sie die genaue Übung in diesem Kapitel nicht identifizieren.</p>
            <p>Welches Attribut Sie auch wegnehmen, die Eigenschaft der Eindeutigkeit geht verloren. Anders ausgedrückt: Die Menge <i>{seminar_titel, kapitel_nr, uebungs_nr}</i> lässt sich nicht reduzieren – ist also irreduzibel.</p>
            <p>Ich will Ihnen ein Gegenbeispiel geben. Die Menge <i>{titel, preis}</i> ist eindeutig für die Tabelle <i>seminare</i>. Der <i>titel</i> alleine genügt aber schon. D.h. Sie können diese Menge um das Attribut <i>preis</i> reduzieren, ohne die Eindeutigkeit zu verlieren. Damit ist <i>{titel, preis}</i> nicht irreduzibel und somit auch kein Schlüssel.</p>
            <p>Die Menge <i>{titel}</i> dagegen ist sicher irreduzibel. Sie könnten nur noch <i>titel</i> wegnehmen. Dann erhalten Sie aber die leere Menge. Mit der leeren Menge (also ohne jeglichen Anhaltspunkt) können Sie keinen Datensatz identifizieren.</p>
            <p>Zum Abschluss möchte ich Ihnen noch eine (etwas vereinfachte) Definition zeigen:</p>
            <hint>
                <p>Ein Schlüssel ist eine Teilmenge eines Headings, die</p>
                <ul>
                    <li>(a) einen Datensatz - streng genommen ein Tupel - <b>eindeutig</b> identifiziert und sich </li>
                    <li>(b) <b>nicht reduzieren</b> lässt.</li>
                </ul>
            </hint>
            <h1 id="schluessel_finden">Schlüssel finden</h1>
            <p>Haben Sie schon mal Ihren Haustürschlüssel verloren? Das ist äußerst unangenehm. Zum Glück kann Ihnen das bei der Datenbankentwicklung nicht passieren. Hier gibt es ein einfaches Verfahren, wie Sie Schlüssel finden.</p>
            <ol>
                <li>
                    <p>Notieren Sie alle (echten) Teilmengen des Headings Ihrer Tabelle.</p>
                    <h3>Beispiel</h3>
                    <p>Die Tabelle <i>seminare</i> hat das Heading {titel, beschreibung, preis}. Folgende Teilmengen sind möglich:</p>
                    <ul>
                        <li>{titel, beschreibung}</li>
                        <li>{titel, preis}</li>
                        <li>{beschreibung, preis}</li>
                        <li>{titel}</li>
                        <li>{beschreibung}</li>
                        <li>{preis}</li>
                    </ul>
                </li>
                <li>
                    <p>Streichen Sie alle Teilmengen, die keine eindeutige Identifizierung von Datensätzen erlauben.</p>
                    <h3>Beispiel</h3>
                    <ul>
                        <li>{titel, beschreibung}</li>
                        <li>{titel, preis}</li>
                        <li><del>{beschreibung, preis}</del></li>
                        <li>{titel}</li>
                        <li><del>{beschreibung}</del></li>
                        <li><del>{preis}</del></li>
                    </ul>
                </li>
                <li>
                    <p>Streichen Sie zusätzlich alle Teilmengen, die sich reduzieren lassen.</p>
                    <h3>Beispiel</h3>
                    <ul>
                        <li><del>{titel, beschreibung}</del></li>
                        <li><del>{titel, preis}</del></li>
                        <li>{titel}</li>
                    </ul>
                    <p>Für <i>seminare</i> ist nur <i>{titel}</i> ein Schlüssel.</p>
                </li>
            </ol>
            <p>Es ist für den täglichen Gebrauch nicht notwendig, dass Sie alle Ihre Tabellen immer einer solchen Schlüsselprüfung unterziehen. Mit etwas Erfahrung sehen Sie meist die Schlüssel einer Tabelle auf den ersten Blick. Falls Sie sich unsicher sind, können Sie aber immer auf dieses Verfahren zurückgreifen.</p>
            <h1>Primär- und Alternativschlüssel</h1>
            <p>Betrachten Sie als Beispiel folgende Anforderungen:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir möchten dem Benutzer alternativ zur E-Mail noch die Möglichkeit geben, sich mit einem selbst gewählten Loginnamen anzumelden. Sobald sich ein Benutzer registriert, erhält er außerdem vom System automatisch eine eindeutige Kundennummer.</p>
            </hint>
            <p>Diese Anforderungen könnten Sie z.B. mit folgenden Anpassungen der Benutzertabelle realisieren:</p>
            <ul>
                <li>benutzer = {name, vorname, registriert_seit, email, <b>kunden_nr</b>, <b>login</b>, passwort} </li>
            </ul>
            <p>Welche Schlüssel hat nun die neue Tabelle?</p>
            <p>Das es potenziell auch mehrere Kunden mit gleichem Vor- und Nachnamen geben kann (z.B. mehrere Michael Müller) ist {name, vorname} sicherlich kein Schlüssel. Im Moment gehen wir erst einmal davon aus, dass jedem Benutzer genau eine E-Mail-Adresse zugeordnet ist. Den Anforderungen zufolge sind aber {email}, {login} und {kunden_nr} Schlüssel. In diesem Fall, haben Sie also gleich drei Schlüssel. In der Praxis hat es sich aber als sinnvoll herausgestellt, einen Schlüssel zu wählen und mit diesem hauptsächlich zu arbeiten – der sogenannte <keyword>Primärschlüssel</keyword> (<keyword>primary key</keyword>). Alle anderen Schlüssel, die Sie nicht wählen, werden als <keyword>Alternativschlüssel</keyword> (<keyword>alternate keys</keyword>) bezeichnet. Wenn Sie sich also beispielsweise für <i>{kunden_nr}</i> als Primärschlüssel entscheiden, so sind {email} und <i>{login}</i> Alternativschlüssel.</p>
            <p>Sie kennzeichnen den Primärschlüssel in der Mengenschreibweise, indem Sie alle Attribute des Schlüssels unterstreichen.</p>
            <ul>
                <li>benutzer = {name, vorname, registriert_seit, email, login, passwort, <u>kunden_nr</u>}</li>
                <li>uebungen = {<u>seminar_titel</u>, <u>kapitel_nr</u>, <u>uebungs_nr</u>, punkte}</li>
            </ul>
            <p>Schlüssel sind Teil der Implementierung, aber nicht des allgemeinen Konzeptes einer Anwendung. Deswegen tauchen die Schlüssel im Domänenmodell nicht auf, im physischen Datenmodell jedoch schon. Markieren Sie dazu die Attribute, die Teil des Primärschlüssels sind, mit dem UML-Stereotype <i>PK</i> (für Primary Key). Ein Stereotyp ist ein Zusatz, den Sie in doppelten spitzen Klammern hinterlegen – z.B.<code>&lt;&lt;PK&gt;&gt;</code>. Attribute, die Teil eines alternativen Schlüssels sind, werden entsprechend mit <code>&lt;&lt;AK&gt;&gt;</code> markiert. Falls Sie mehrere Alternativschlüssel finden, müssen Sie diese durchnummerieren, <code>&lt;&lt;AK1&gt;&gt;</code>, <code>&lt;&lt;AK2&gt;&gt;</code>, usw.</p>
            <figure width="80%">
                <img src="images/klassendiagramme/pm_seminare_mit_schluesseln.png"/>
                <figcaption>Primärschlüssel und Alternativschlüssel in UML</figcaption>
            </figure>
            <p>Diese Anforderungen waren nur ein Beispiel. Sie müssen die Erweiterungen an der Benutzertabelle nicht durchführen. Im Folgenden verwenden Sie wieder die ursprüngliche Fassung der Tabelle.</p>
            <figure width="80%">
                <img src="images/klassendiagramme/pm_seminare_mit_schluesseln2.png"/>
                <figcaption>Physisches Datenbankmodell mit Schlüsseln</figcaption>
            </figure>
            <h1>Künstliche Schlüssel</h1>
            <h2>Eigenschaften guter Primärschlüssel</h2>
            <p>Im obigen Beispiel haben Sie sich für <i>{kunden_nr}</i> als Primärschlüssel entschieden. Welche Kriterien sollten Sie aber generell für die Wahl des Primärschlüssels heranziehen? Was macht einen Schlüssel geeignet für die Wahl zum Primärschlüssel?</p>
            <p>Aus Sicht der Datenbanktheorie sind alle Schlüssel gleichwertig. So gesehen ist es völlig gleichgültig, für welchen Schlüssel Sie sich entscheiden. In der Anwendungsentwicklung hat sich aber herausgestellt, dass es sehr wohl Unterschiede gibt. Durch die Wahl eines Primärschlüssels können Sie sich die Weiterentwicklung deutlich erleichtern oder erschweren, je nachdem, wie geeignet der Schlüssel ist.</p>
            <h3>Beispiel</h3>
            <p>Nehmen Sie mal an, Sie würden sich in der Tabelle Benutzer für {email} als Primärschlüssel entscheiden. Der Primärschlüssel wird später an vielen Stellen in der Anwendung zur Identifizierung verwendet. Ändert nun ein Benutzer seine E-Mail-Adresse, so entsteht ein erheblicher Wartungsaufwand. Alle Stellen, die sich anhand der E-Mail auf den Benutzer beziehen, müssten geändert werden. Die Kundennummer dagegen ist eine laufende Nummer, die jeder Benutzer automatisch zugewiesen bekommt und die sich normalerweise nicht ändern sollte.</p>
            <p>Außerdem ist es einfacher, mit kurzen Schlüsseln zu arbeiten, als mit solchen, die aus vielen Attributen bestehen. Beispielsweise besteht der Schlüssel <i>{seminar_titel, kapitel_nr, uebungs_nr}</i> aus 3 Attributen, <i>{kunden_nr}</i> aber nur aus einem. Schlüssel, die aus mehreren Attributen bestehen, werden <keyword>zusammengesetzte Schlüssel</keyword> (<keyword>compound key</keyword>) genannt.</p>
            <p>Deswegen lässt sich festhalten: Ein geeigneter Primärschlüssel</p>
            <ul>
                <li>ist kein zusammengesetzter Schlüssel.</li>
                <li>ist möglichst unveränderlich (<keyword>immutable</keyword>) über die Lebensdauer der zugehörigen Datensätze. </li>
            </ul>
            <p>Bitte beachten Sie, dass diese Aussagen nicht unbedingt im Allgemeinen gelten. Die Voraussetzung ist, dass Sie später ORM einsetzen möchten. Eine detailliertere Begründung finden Sie bei Fowler &amp; Rice (2002) beim Pattern <i>Identity Field</i>. </p>
            <hint>
                <h3>Martin sagt…</h3>
                <figure>
                    <blockquote>
                        <p><!--The danger with a meaningful key is that, while in theory they make good keys, in
            practice they don't. To work at all, keys need to be unique; to work well, they need to
            be immutable.-->Die Gefahr von bedeutungstragenden Schlüsseln ist, dass obgleich sie in der Theorie gute Schlüssel abgeben, sie es in der Praxis nicht sind. Um überhaupt zu funktionieren, müssen sie einzigartig sein; um gut zu funktionieren, dürfen sie sich nicht ändern.</p>
                    </blockquote>
                    <figcaption>Fowler &amp; Rice (2002)</figcaption>
                </figure>
            </hint>
            <h2>Tabellen ohne geeigneten Primärschlüssel</h2>
            <p>In der Tabelle <i>seminare</i> ist der einzige Schlüssel <keyword>{titel}</keyword>. Im Grunde haben Sie, mangels Alternativen, gar keine andere Wahl, als ihn zum Primärschlüssel zu berufen. Prüfen Sie ihn dennoch auf Eignung.</p>
            <ul>
                <li>Er besteht aus nur einem Attribut, ist also nicht zusammengesetzt.</li>
                <li>Ist er auch stabil gegenüber Änderungen?</li>
            </ul>
            <p>Fragen Sie doch Ihre Kundin.</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Der Titel eines Seminars kann sich aus Marketingsgründen jederzeit ändern.</p>
            </hint>
            <p>Offensichtlich ist <i>{titel}</i> nicht sonderlich gut als Primärschlüssel geeignet. In einem solchen Fall haben Datenbankentwickler schon immer etwas in der Trickkiste gekramt, und ein Konzept zu Tage gefördert, das sich <keyword>künstlicher Schlüssel</keyword> (<keyword>artificial key</keyword>, <keyword>synthetic key</keyword>, <keyword>surrogate key</keyword>) nennt. Der Trick besteht darin, dass Sie der Tabelle ein neues Attribut hinzufügen. Sie wählen das Attribut so, dass es die gewünschten Eigenschaften erfüllt.</p>
            <p>Nennen Sie das Attribut <i>id</i>. Es hat den Datentyp <code>INTEGER</code> und enthält eine Zahl, die Sie einfach für jeden neuen Datensatz um eins erhöhen. <br/>Das ist auch nur eine mögliche Technik. Mehr dazu finden Sie bei Fowler &amp; Rice (2002).</p>
            <figure width="80%">
                <img src="images/klassendiagramme/pm_seminare_mit_ids.png"/>
                <figcaption>Physisches Datenbankmodell mit ids</figcaption>
            </figure>
            <ul>
                <li>seminare = {<u>id</u>, titel, beschreibung, preis} </li>
            </ul>
            <table>
                <caption>Tabelle <i>seminare</i> mit <i>id</i>
                </caption>
                <thead>
                    <tr>
                        <th>id</th>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium entwachsen. Mehr und mehr professionelle Websites folgen …</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmiersprache mit vielseitigen Einsatzmöglichkeiten. Sie gilt…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen Webapplikationen speichern ihren Datenbestand …</td>
                        <td>975,00</td>
                    </tr>
                </tbody>
            </table>
            <hint>
                <h3>Scott sagt…</h3>
                <figure>
                    <blockquote>
                        <p><!--I advise that you prefer surrogate keys … The fundamental issue is that keys are a
            significant source of coupling within a relational schema, and as a result they are
            difficult to change. The implication is that you want to avoid keys with business
            meaning because business meaning changes.--> Ich rate Ihnen künstliche Schlüssel zu bevorzugen … Das fundamentale Problem ist, dass Schlüssel eine signifikante Quelle der Kopplung innerhalb des relationalen Schemas darstellen, und in Folge schwer zu ändern sind. DAS wiederum hat zur Folge, dass Sie Schlüssel mit Geschäftsbedeutung vermeiden wollen, denn Geschäftsbedeutungen ändern sich.</p>
                    </blockquote>
                    <figcaption>Ambler (2003)</figcaption>
                </figure>
            </hint>
            <h2>Ids im objekt-relationalen Mapping</h2>
            <p>Wenn Sie später objekt-orientierten Code für Ihre Anwendung schreiben, ist es erforderlich, Code und Datenbank in Einklang zu bringen, indem Sie die verschiedenen Konzepte aufeinander abbilden. Das geschieht mit Hilfe von <keyword>objekt-relationalem Mapping</keyword> (kurz <keyword>ORM</keyword>). In modernen ORM-Frameworks – z.B. Active Record oder Doctrine – wird meist das Muster <keyword>Identity Field </keyword>(siehe Fowler &amp; Rice (2002)) verwendet. Es ermöglicht eine 1:1-Zuordnung zwischen Objekten und Datensätzen. Damit das konsistent und zuverlässig funktioniert, versehen Sie einfach <b>jede</b> Tabelle mit einem Id-Attribut – selbst dann, wenn sie bereits einen brauchbaren Schlüssel (wie z.B. Kundennummer) besitzt.</p>
            <hint>
                <h3>Streitpunkt »künstlicher Schlüssel«</h3>
                <p>Ob künstliche Schlüssel (und insbesondere ein Id-Attribut) im Datenbankdesign sinnvoll sind oder nicht, ist umstritten. Beispielsweise vertritt Joe Celko (2005) die Ansicht, dass ein generelles id-Attribut, das automatisch erhöht wird, ganz schlechter SQL-Stil ist. Ich schließe mich an dieser Stelle jedoch der Meinung von Martin Fowler und vielen bekannten modernen Webframeworks, wie z.B. Ruby on Rails, Django und Symfony an. Diese haben gezeigt, dass das id-Attribut die Entwicklung objekt-orientierter, datenbank-basierter Webanwendungen (mit ORM) erheblich vereinfacht. Das gilt insbesondere unter den genannten Voraussetzungen (siehe <a href="#voraussetzungen"/>). Für Datenbanken, die diese Voraussetzungen nicht erfüllen, mag Joe Celko recht behalten.</p>
            </hint>
            <hint>
                <h3>Scott sagt…</h3>
                <figure>
                    <blockquote>
                        <p><!--Keys are one of the religious issues within the data community. Some people prefer all
          natural keys whereas others prefer all surrogate keys.--> Schlüssel sind einer der religiösen Streitpunkte innerhalb der Daten-Community. Einige Leute bevorzugen komplett natürliche Schlüssel, wohingegen andere komplett künstliche vorziehen.</p>
                    </blockquote>
                    <figcaption>Ambler (2003)</figcaption>
                </figure>
            </hint>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Ein Schlüssel ist eine Teilmenge eines Headings, die (a) <b>eindeutig</b> identifiziert und sich (b) <b>nicht reduzieren</b> lässt. </li>
                <li>Der Primärschlüssel ist ein ausgewählter Schlüssel.</li>
                <li>Eine Relation kann auch mehrere Schlüssel haben.</li>
                <li>Verwenden Sie ein id-Attribut als Primärschlüssel.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Ergänzen Sie bitte folgenden Satz:</p>
                        <p>Eine Attributmenge wird <blank>eindeutig</blank> genannt, wenn Sie anhand der Attribute eine einzige Zeile in einer Tabelle identifizieren können. </p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Ergänzen Sie bitte folgenden Satz:</p>
                        <p>Eine Attributmenge heißt <blank>irreduzibel</blank>, wenn Sie kein Attribut mehr herausnehmen können, ohne dass die Menge ihre Eindeutigkeit verliert.</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt, obwohl reine Logikfrage -->
                    <!-- me: DB-Theory ist Logik :) -->
                    <question_text>
                        <p>Gegeben ist die Relation <i>seminare = {titel, beschreibung, preis}</i>. Dabei wird garantiert, dass es keine zwei Tupel gibt, die den gleichen <i>titel</i> haben. Welche der folgenden Teilmengen von <i>seminare</i> sind <b>nicht</b> eindeutig? </p>
                    </question_text>
                    <answer correct="correct">{preis}</answer>
                    <answer>{titel, preis}</answer>
                    <answer correct="correct">{beschreibung}</answer>
                    <answer correct="correct">{beschreibung, preis}</answer>
                    <answer>{titel, beschreibung, preis}</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Gegeben ist die Relation <i>seminare = {id, titel, beschreibung, preis}</i>. Dabei wird garantiert, dass es keine zwei Tupel gibt, die den gleichen <i>titel</i> haben. Welche der folgenden Teilmengen von <i>seminare</i> sind irreduzibel?</p>
                    </question_text>
                    <answer>{id, titel, beschreibung, preis}</answer>
                    <!--<answer>{id, preis}</answer>-->
                    <answer>{titel, preis}</answer>
                    <answer correct="correct">{id}</answer>
                    <answer correct="correct">{titel}</answer>
                    <answer>{id, titel}</answer>
                </question>
              <!--  <question public="public" type="multiple_choice">
                    <question_text>
                        <p>Wodurch wird ein Schlüssel zum <i>Primärschlüssel</i>?</p>
                    </question_text>
                    <answer>Es ist immer der kürzeste Schlüssel.</answer>
                    <answer>Nur "<i>id</i>" oder "<i>name</i>" kann Primärschlüssel sein.</answer>
                    <answer correct="correct">Er wird als solcher ausgewählt.</answer>
                    <answer>Es ist der Schlüssel, der die höchste Eindeutigkeit garantiert.</answer>
                </question>-->
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Erläutern Sie den Begriff <i>Alternativschlüssel</i>.</p>
                    </question_text>
                    <answer>Ein Alternativschlüssel ist ein Schlüssel in einer anderen Tabelle, der sich auf den Primärschlüssel bezieht.</answer>
                    <answer>Ein Alternativschlüssel ist nicht zwingend irreduzibel.</answer>
                    <answer>Alle Schlüssel, die sich von <i>{id}</i> unterscheiden, heißen Alternativschlüssel.</answer>
                    <answer correct="correct">Ein Alternativschlüssel ist ein weiterer Schlüssel, der nicht der Primärschlüssel ist.</answer>
                </question>
                <question public="public" type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was bedeutet die Unterstreichung bei folgender Menge?<br/>uebungen = {<u>seminar_titel</u>, <u>kapitel_nr</u>, <u>uebungs_nr</u>, punkte}</p>
                    </question_text>
                    <answer correct="correct">Die Menge {seminar_titel, kapitel_nr, uebungs_nr} ist der Primärschlüssel.</answer>
                    <answer>Die Menge {seminar_titel, kapitel_nr, uebungs_nr} ist ein Alternativschlüssel.</answer>
                    <answer>Die unterstrichenen Attribute sind jeweils gültige Schlüssel.</answer>
                    <answer>Es handelt sich um die wichtigsten Attribute der Menge.</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Was ist ein <i>Identity Field</i>?</p>
                    </question_text>
                    <answer><i>Identity Field</i> ist ein anderer Name für <i>Primärschlüssel</i>.</answer>
                    <answer>Ein <i>Indentity Field</i> ist ein Primärschlüssel, der Eindeutigkeit garantiert.</answer>
                    <answer correct="correct">Das Muster <i>Identity Field</i> ermöglicht ein 1:1-Mapping zwischen Objekten und Datensätzen.</answer>
                    <answer>Ein Primärschlüssel, der aus nur einem Attribut besteht, wird <i>Indentity Field</i> genannt, häufig heißt das Attribut "id" oder "key".</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Sind natürliche oder eher künstliche Schlüssel im Allgemeinen zu bevorzugen?</p>
                    </question_text>
                    <answer correct="correct">Diese Frage lässt sich so allgemein nicht beantworten. Die Meinungen gehen hier weit auseinander. Im speziellen Bereich der Webentwicklung (insbesondere in Verbindung mit einem ORM) haben sich aber künstliche Schlüssel durchgesetzt.</answer>
                    <answer>Diese Frage lässt sich so allgemein nicht beantworten. Die Meinungen gehen hier weit auseinander. Im speziellen Bereich der Webentwicklung (insbesondere in Verbindung mit einem ORM) haben sich aber natürliche Schlüssel durchgesetzt.</answer>
                    <answer>Die Meinungen gehen hier weit auseinander. Im Allgemeinen sind aber natürliche Schlüssel immer zu bevorzugen. Sie ermöglichen die Rekonstruktion der Datenbank bei Datenverlust.</answer>
                    <answer>Die Meinungen gehen hier weit auseinander. Im Allgemeinen sind aber künstliche Schlüssel immer zu bevorzugen. Sie ermöglichen die Rekonstruktion der Datenbank bei Datenverlust.</answer>
                </question>
               <!-- <question type="multiple_choice">
                    <question_text>
                        <p>Kann eine Relation auch gar keine Schlüssel haben?</p>
                    </question_text>
                    <answer>Nein. Im Extremfall lässt sich die leere Menge als Schlüssel verwenden. Da sich keine weiteren Attribute wegnehmen lassen, ist er irreduzibel und kann damit auch Relationen mit beliebigen Datensätzen identifizieren.</answer>
                    <answer correct="correct">Nein. Im Extremfall werden alle Attribute zur eindeutigen Identifikation benötigt. Dann sind diese aber auch schon irreduzibel, und damit ist die Menge dieser Attribute der Schlüssel der Relation.</answer>
                    <answer>Ja. Falls es keine Kombination von Attributen gibt, die zur Identifikation geeignet sind, lässt sich kein Schlüssel bilden.</answer>
                    <answer>Ja. Es kann einen bewusste Entscheidung beim Datenbank-Design sein, keinen Schlüssel zu wählen.</answer>
                </question>-->
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Teilmengen bestimmen</name>
                <content>
                    <p>Bestimmen Sie alle echten Teilmengen der angegebenen Headings.</p>
                    <ul>
                        <li>{modell, hersteller, leistung_in_ps}</li>
                        <li>{wert, farbe}</li>
                        <li>{a, b, c}</li>
                    </ul>
                </content>
                <answer>
                    <ul>
                        <li>{model, hersteller}, {model, leistung_in_ps}, {hersteller, leistung_in_ps}, {modell}, {hersteller}, {leistung_in_ps}</li>
                        <li>{wert}, {farbe}</li>
                        <li>{a, b}, {a, c}, {b, c}, {a}, {b}, {c}</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Schlüssel bestimmen</name>
                <content>
                    <p>Bestimmen Sie <b>alle</b> Schlüssel der Tabelle <i>buch = {autor, erscheinungsdatum, isbn, titel}</i>. Mit isbn ist ausschließlich die ISBN-13 gemeint. Verwenden Sie dazu die vorgeschlagene Vorgehensweise aus <a href="#schluessel_finden"/>. Falls Sie Zweifel bezüglich der Eindeutigkeit haben, können Sie folgende Beispiele heranziehen:</p>
                    <table>
                        <caption>Beispieldaten der Tabelle <i>buch</i>
                        </caption>
                        <thead>
                            <tr>
                                <th>autor</th>
                                <th>erscheinungs-<br/>datum</th>
                                <th>isbn</th>
                                <th>titel</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>C.J. Date</td>
                                <td>01.09.2003</td>
                                <td>978-0321197849</td>
                                <td>Introduction to Database Systems</td>
                            </tr>
                            <tr>
                                <td>C.J. Date</td>
                                <td>15.11.2006</td>
                                <td>978-1590597460</td>
                                <td>Date on Database: Writings</td>
                            </tr>
                            <tr>
                                <td>C.J. Date</td>
                                <td>04.09.2001</td>
                                <td>978-0201787221</td>
                                <td>Introduction to Database Systems</td>
                            </tr>
                            <tr>
                                <td>T. Powell</td>
                                <td>14.07.2004</td>
                                <td>978-0072253573</td>
                                <td>JavaScript</td>
                            </tr>
                            <tr>
                                <td>D. Gosselin</td>
                                <td>07.09.2007</td>
                                <td>978-1423901501</td>
                                <td>JavaScript</td>
                            </tr>
                            <tr>
                                <td>S. Meier</td>
                                <td>01.01.2009</td>
                                <td>978-9999999991</td>
                                <td>Mathematik I</td>
                            </tr>
                            <tr>
                                <td>S. Meier</td>
                                <td>01.01.2009</td>
                                <td>978-9999999992</td>
                                <td>Mathematik I (Lösungsbuch)</td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <code>buch = {autor, erscheinungsdatum, isbn, titel}</code>
                    <h3>Teilmengen von buch</h3>
                    <p>{autor}, {erscheinungsdatum}, {isbn}, {titel},</p>
                    <p>{autor, erscheinungsdatum}, {autor, isbn}, {autor, titel}, {erscheinungsdatum, isbn}, {erscheinungsdatum, titel}, {isbn, titel},</p>
                    <p>{erscheinungsdatum, isbn, titel}, {autor, isbn, titel}, {autor, erscheinungsdatum, titel}, {autor, erscheinungsdatum, isbn},</p>
                    <p>{autor, erscheinungsdatum, isbn, titel}</p>
                    <h3>identifizierende Teilmengen von buch</h3>
                    <p>{isbn},</p>
                    <p>{autor, isbn}, {erscheinungsdatum, isbn}, {isbn, titel},</p>
                    <p>{erscheinungsdatum, isbn, titel}, {autor, isbn, titel}, {autor, erscheinungsdatum, titel}, {autor, erscheinungsdatum, isbn},</p>
                    <p>{autor, erscheinungsdatum, isbn, titel}</p>
                    <h3>identifizierende, irreduzible Teilmengen (Schlüssel) von buch</h3>
                    <p>{isbn}, {autor, erscheinungsdatum, titel}</p>
                </answer>
            </exercise>
            <exercise>
                <name>Filmverleih mit Schlüsseln</name>
                <content>
                    <p>Nutzen Sie Ihr neu gewonnenes Wissen. Überarbeiten Sie das physische Modell des Projektes <i>Filmverleih</i> in Bezug auf Schlüssel. Kennzeichnen Sie Schlüssel und fügen Sie id-Attribute hinzu.</p>
                </content>
                <answer>
                    <figure width="70%">
                        <img src="images/loesungen/lektion_11/film_verleih_pm_schluessel.png"/>
                    </figure>
                    <p>Es lässt sich darüber streiten, ob {titel, erscheinungsjahr} als Schlüssel akzeptabel ist. {titel} alleine ist auf jeden Fall unzureichend, da es viele Filme mit gleichem Titel gibt. Für unseren Kunden, der eine kleine Videothek betreibt, schließen wir hier einfach mal aus, dass er mehrere Filme mit gleichem Titel und Erscheinungsjahr im Angebot hat.</p>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Fluggesellschaft mit Schlüsseln</name>
                <content>
                    <p>Überarbeiten Sie auch das physische Model der Fluggesellschaft in Bezug auf Schlüssel.</p>
                </content>
            </exercise>
            <exercise>
                <name>Partnervermittlung</name>
                <content>
                    <p>Überarbeiten Sie nun auch noch das physische Modell der Partnervermittlung in Bezug auf Schlüssel.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Schlüssel in SQL</lesson_name>
            <topics>
                <li>wie Sie Primärschlüssel mit SQL kennzeichnen.</li>
                <li>wie Sie Alternativschlüssel mit SQL kennzeichnen.</li>
                <li>wie Sie die Vergabe von id-Werten automatisieren.</li>
            </topics>
            <h1>Primärschlüssel anlegen</h1>
            <p>Nachdem Sie nun wissen, dass die Tabelle <i>seminare</i> ein id-Attribut benötigt, sollten Sie dieses auch per SQL hinzufügen. In MySQL können Sie sowohl den Primärschlüssel als auch die Alternativschlüssel direkt beim Erzeugen einer Tabelle angeben. Zunächst müssen Sie die bestehende Tabelle nochmal löschen:</p>
            <blockcode type="sql" src="code/61.sql"/>
            <p>Jetzt können Sie die Tabelle mit der id als Primärschlüssel anlegen. Notieren Sie <code>PRIMARY KEY</code> einfach nach dem Datentyp von id:</p>
            <blockcode src="code/62.txt"/>
            <p>Prüfen Sie, ob MySQL die Tabelle korrekt angelegt hat:</p>
            <blockcode type="sql" src="code/63.sql"/>
            <blockcode src="code/64.txt"/>
            <p>Beachten Sie die Spalte <i>Key</i>. Das Kürzel <i>PRI</i> gibt an, dass es sich bei der <i>id</i> um den Primärschlüssel handelt. Im Sinne der Integrität prüft MySQL nun, dass keine zwei Datensätze mit gleicher id eingetragen werden können. Versuchen Sie es!</p>
            <blockcode type="sql" src="code/65.sql"/>
            <blockcode type="sql" src="code/66.sql"/>
            <p>Sie erhalten den Fehler:</p>
            <blockcode src="code/67.txt"/>
            <p>Das bedeutet, dass die id <i>1</i> bereits vorhanden ist. Ein kurzes</p>
            <blockcode type="sql" src="code/68.sql"/>
            <p>zeigt, dass MySQL nur den ersten Datensatz akzeptiert hat.</p>
            <blockcode src="code/69.txt"/>
            <h1>Alternativschlüssel anlegen</h1>
            <p>Wie Sie schon wissen, ist {titel} ebenfalls ein Schlüssel. Es macht auch keinen Sinn, zwei Seminare mit gleichem Titel in der Datenbank zu führen. Deswegen sollten Sie <i>titel</i> als Alternativschlüssel kennzeichnen. In MySQL wird ein Alternativschlüssel mit <code>UNIQUE KEY</code> bezeichnet. Löschen Sie also nochmals die Tabelle und erzeugen Sie sie neu mit dem Titel als Alternativschlüssel:</p>
            <blockcode type="sql" src="code/70.sql"/>
            <blockcode type="sql" src="code/71.sql"/>
            <p>Wenn Sie die Tabellenstruktur nun nochmals mit</p>
            <blockcode type="sql" src="code/72.sql"/>
            <p>analysieren, erhalten Sie folgende Ausgabe:</p>
            <blockcode src="code/73.txt"/>
            <p>Sie sehen hier, dass <i>titel</i> in der Key-Spalte als UNI (Abkürzung für <code>UNIQUE</code>) gekennzeichnet ist. Daran können Sie in MySQL Alternativschlüssel erkennen. Wenn Sie nun versuchen, mehrere Seminare mit gleichem Titel einzufügen, erhalten Sie wiederum eine Fehlermeldung. </p>
            <blockcode type="sql" src="code/74.sql"/>
            <blockcode type="sql" src="code/75.sql"/>
            <blockcode src="code/76.txt"/>
            <p>Sie können im Übrigen immer nur einen Primärschlüssel, aber durchaus mehrere Alternativschlüssel in einer Tabelle haben. Deswegen ist z.B. folgende SQL-Anweisung syntaktisch korrekt:</p>
            <blockcode type="sql" src="code/77.sql"/>
            <p>Natürlich macht es wenig Sinn, <i>preis</i> als Alternativschlüssel zu definieren. Nicht einmal syntaktisch korrekt wäre folgendes SQL:</p>
            <blockcode type="sql" src="code/78.sql"/>
            <blockcode src="code/79.txt"/>
            <h1>Autoincrement</h1>
            <p>Recht unpraktisch ist momentan noch die Tatsache, dass Sie den Wert der id jedes Mal angeben müssen.</p>
            <table>
                <caption>Tabelle <i>seminare</i> mit <i>id</i>
                </caption>
                <thead>
                    <tr>
                        <th>id</th>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Datenbanken &amp; SQL</td>
                        <td>Nahezu alle modernen…</td>
                        <td>975,00</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensation…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Ajax &amp; DOM</td>
                        <td>Ajax ist längst dem Hype-Stadium…</td>
                        <td>1699,99</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>JavaScript</td>
                        <td>JavaScript ist eine Programmier…</td>
                        <td>2500,00</td>
                    </tr>
                </tbody>
            </table>
            <p>Wollen Sie die Seminare aus obiger Tabelle einfügen, so sind folgende Inserts notwendig:</p>
            <blockcode type="sql" src="code/80.sql"/>
            <p>Noch schwieriger wird es, wenn die Tabelle bereits Seminare enthält. In diesem Fall müssten Sie zuerst die höchste id in Erfahrung bringen.</p>
            <p>Zum Glück hält MySQL eine praktische Erweiterung bereit. Sie können ein Attribut, das Primärschlüssel ist und einen Zahlentyp besitzt, als <keyword>autoinkrement</keyword> definieren. (In anderen DBMS wird dieses Feature oft auch <keyword>Identity Column</keyword> bezeichnet.) Das bedeutet, dass jeder neue Datensatz automatisch den nächsthöheren ganzzahligen Wert erhält. Das ist quasi die ideale Ergänzung für ein id-Attribut. Definieren Sie die Tabelle <i>seminare</i> nun mit autoinkrement:</p>
            <blockcode type="sql" src="code/81.sql"/>
            <blockcode type="sql" src="code/82.sql"/>
            <p>Führen Sie die übliche Prüfung durch:</p>
            <blockcode type="sql" src="code/83.sql"/>
            <blockcode src="code/84.txt"/>
            <p>Die Spalte <i>Extra</i> zeigt an, dass <i>id</i> nun über die Eigenschaft <i>auto_increment</i> verfügt. Wenn Sie neue Seminare einfügen, müssen Sie das id-Attribut und den zugehörigen Wert nicht mehr angeben.</p>
            <blockcode type="sql" src="code/85.sql"/>
            <p>Wenn Sie sich die Tabelle nochmals ausgeben lassen, sehen Sie, dass MySQL die ids automatisch erhöht hat.</p>
            <blockcode type="sql" src="code/86.sql"/>
            <blockcode src="code/87.txt"/>
            <h1>Schlüssel in BNF</h1>
            <p>Die erweiterte Fassung der BNF von <code>CREATE TABLE</code> will ich Ihnen natürlich nicht vorenthalten.</p>
            <figure>
                <blockcode src="code/88.txt"/>
                <figcaption>BNF von CREATE TABLE mit Schlüsseln</figcaption>
            </figure>
            <p>Um diese Fassung zu verstehen, fehlen Ihnen noch zwei weitere BNF-Konzepte. Das erste Konzept ist die <keyword>Option</keyword>. Alles was innerhalb eckiger Klammern »[]« steht, ist optional. Sie können <code>AUTO_INCREMENT</code> angeben oder auch weglassen.</p>
            <p>Das zweite neue BNF-Konzept ist das <keyword>Oder</keyword> -Zeichen »|«. Mit dem Oder-Zeichen können Sie zwischen zwei oder mehreren Alternativen unterscheiden. In diesem Fall können Sie entweder <code>UNIQUE KEY</code> oder <code>PRIMARY KEY</code> angeben. Sie können auch gar keinen Key angeben, da beide Möglichkeiten zusammen in Klammern stehen.</p>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Alternativschlüssel werden in MySQL mit <code>UNIQUE KEY</code> angegeben. </li>
                <li>Definieren Sie das id-Attribut als <code>PRIMARY KEY</code>. </li>
                <li>Verwenden Sie <code>AUTO_INCREMENT</code> für Ihre id-Attribute! </li>
            </ul>
            <h3>BNF</h3>
            <table>
                <caption>Bisherige BNF-Konzepte</caption>
                <thead>
                    <tr>
                        <th>Konzept</th>
                        <th>Darstellung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Terminale</td>
                        <td>Wort in Großbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Nichtterminale (Variablen)</td>
                        <td>Wort in Kleinbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Wiederholung</td>
                        <td>...</td>
                    </tr>
                    <tr>
                        <td>Verschachtelte Definition</td>
                        <td>:</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Optional</b>
                        </td>
                        <td>[]</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Alternativ</b>
                        </td>
                        <td>|</td>
                    </tr>
                </tbody>
            </table>
            <h3>SQL: DDL</h3>
            <table>
                <caption>Bisherige DDL-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td><b>Tabelle anlegen</b></td>
                        <td>
                            <code>
                CREATE TABLE tbl_name (create_definition, ...)

                create_definition:
                  col_name column_definition
                  | PRIMARY KEY (col_name, ...)
                  | UNIQUE KEY (col_name, ...)

                column_definition:
                  data_type [AUTO_INCREMENT] [UNIQUE KEY | PRIMARY KEY]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Tabelle löschen</td>
                        <td><code>DROP TABLE tbl_name</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie viele Spalten in einer Tabelle können Sie als PRIMARY KEY deklarieren?</p>
                    </question_text>
                    <answer correct="correct">1</answer>
                    <answer>2</answer>
                    <answer>3</answer>
                    <answer>beliebig viele</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie viele Spalten in einer Tabelle können Sie als UNIQUE KEY deklarieren?</p>
                    </question_text>
                    <answer>1</answer>
                    <answer>2</answer>
                    <answer>3</answer>
                    <answer correct="correct">beliebig viele</answer>
                </question>
            <!--    <question public="public" type="multiple_choice">-->
                    <!-- rvh: korrekt, aber: Ich fände einen Distraktor "Die Spalte muss einen Unique Key haben" besser -->
                    <!-- me: ergänzt, witziger Distraktor :) -->
                    <!-- nk: Auto Increment kann für Primary, Index und Unique verwendet werden -->
                    <!-- Das zweite neue BNF-Konzept ist das Oder -Zeichen »|«. Mit dem Oder-Zeichen können Sie zwischen zwei oder mehreren Alternativen unterscheiden. In diesem Fall können Sie entweder UNIQUE KEY oder PRIMARY KEY angeben. Sie können auch gar keinen Key angeben, da beide Möglichkeiten zusammen in Klammern stehen. -->
                    <!--<question_text>
                        <p>Welche Voraussetzungen müssen <?oxy_comment_start author="tschneid" timestamp="20200224T174306+0100" comment="besser: erfüllt sein"?>gelten<?oxy_comment_end?>, <?oxy_comment_start author="tschneid" timestamp="20200224T175544+0100" comment="besser: um eine Spalte ... versehen zu können"?>damit<?oxy_comment_end?> Sie eine Spalte mit AUTO_INCREMENT versehen können?<?oxy_comment_start author="tschneid" timestamp="20200224T175104+0100" comment="In der Lektion steht &quot;Sie können ein Attribut, das Primärschlüssel ist und einen Zahlentyp besitzt, als autoinkrement definieren.&quot; Das kann man als Voraussetzung verstehen. Die richtige Antwort wäre also &quot;Die Spalte muss Primärschlüssel sein und einen Zahlentyp besitzen&quot;.

Die Aussage im Text &quot;Das zweite neue BNF-Konzept ist das Oder -Zeichen »|«. Mit dem Oder-Zeichen können Sie zwischen zwei oder mehreren Alternativen unterscheiden. In diesem Fall können Sie entweder UNIQUE KEY oder PRIMARY KEY angeben. Sie können auch gar keinen Key angeben, da beide Möglichkeiten zusammen in Klammern stehen.&quot; ist nicht geeignet, um die Voraussetzung für autoincrement zu vermitteln. Denn das würde dann ja bedeuten, &quot;Sie können auch gar keinen Key angeben&quot;.

Eigentlich ist es so, dass im Text der Lektion gar nicht klar beschrieben wird, was die Voraussetzungen dafür sind, dass eine Spalte mit AUTO_INCREMENT versehen werden kann.

Folgendes habe ich im Web dazu gefunden:

&quot;Each table can have only one AUTO_INCREMENT column. It must defined as a key (not necessarily the PRIMARY KEY or UNIQUE key). In some storage engines (including the default InnoDB), if the key consists of multiple columns, the AUTO_INCREMENT column must be the first column. Storage engines that permit the column to be placed elsewhere are Aria, MyISAM, MERGE, Spider, TokuDB, BLACKHOLE, FederatedX and Federated.&quot;

Quelle: https://mariadb.com/kb/en/auto_increment/

Dann wäre faktisch Folgendes korrekt:

Frage: Welche Voraussetzungen müssen erfüllt sein, um eine Spalte mit AUTO_INCREMENT versehen zu können?

Korrekte Antworten:

- es darf in der Tabelle keine weitere Spalte mit AUTO_INCREMENT geben
- die Spalte muss als PRIMARY_KEY oder UNIQUE KEY definiert sein oder Teil eines Schlüssels sein, der aus mehreren Spalten besteht

Zusätzlich wäre korrekt:
- die Spalte muss einen Zahlentyp haben


-\-\-\-&gt; Dass muss dann so aber auch in der Lektion erklärt werden, was aktuell nicht der Fall ist.
"?></p><?oxy_comment_end?>
                    </question_text>
                    <answer correct="correct">Die Spalte <?oxy_comment_start author="tschneid" timestamp="20200224T191523+0100" comment="Eine Voraussetzung ist dadruch gekennzeichnet, dass sie erfüllt sein MUSS. Daher darf &quot;kann&quot; in der Antwort nicht vorkommen. "?>kann<?oxy_comment_end?> Primärschlüssel sein.</answer>
                    <answer correct="correct"><?oxy_comment_start author="tschneid" timestamp="20200224T175639+0100" comment="das steht nirgends im Text"?>Die Spalte kann UNIQUE KEY sein.<?oxy_comment_end?></answer>
                    <answer correct="correct">Die Spalte muss einen Zahlentyp haben.</answer>
                    <answer correct="correct"><?oxy_comment_start author="tschneid" timestamp="20200224T175655+0100" comment="das finde ich im Text auch nicht. "?>Es darf keine weitere AUTO_INCREMENT-Spalte in der gleichen Tabelle geben<?oxy_comment_end?>.</answer>
                    <answer>Der Name der Spalte muss eine Länge von maximal 8 Zeichen haben.</answer>
                </question>-->
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5751), korrekt (rvh) aber wieder reine Logikfrage -->
                    <!-- me: naja es geht ja auch um die Syntax & Semantik von BNF, mann muss z.B. wissen, dass "|" oder ist -->
                    <question_text>
                        <p>Gegeben ist folgender BNF-Ausdruck:</p>
                        <blockcode src="code/question1_1.txt"/>
                        <p>Finden Sie korrekte Ausprägungen.</p>
                    </question_text>
                    <answer>
                        <p>ABCD</p>
                    </answer>
                    <answer correct="correct">
                        <p>ABD</p>
                    </answer>
                    <answer correct="correct">
                        <p>ACD</p>
                    </answer>
                   <!-- <answer>
                        <p>AAD</p>
                    </answer>-->
                    <answer>
                        <p>ADB</p>
                    </answer>
                    <answer>
                        <p>ACBD</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5752), rvh: korrekt -->
                    <question_text>
                        <p>Gegeben ist folgender BNF-Ausdruck:</p>
                        <blockcode src="code/question2_1.txt"/>
                        <p>Finden Sie korrekte Ausprägungen.</p>
                    </question_text>
                    <answer correct="correct">
                        <p>5 + 6 = 11</p>
                    </answer>
                    <answer correct="correct">
                        <p>5 + 6 = 12</p>
                    </answer>
                    <answer>
                        <p>+ 5 6 = 11</p>
                    </answer>
                    <answer>
                        <p>11 = 5 + 6</p>
                    </answer>
                    <answer correct="correct">
                        <p>4 + 4 = 8</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- korrekt (WE-ID 5752), rvh: korrekt -->
                    <question_text>
                        <p>Gegeben ist folgender BNF-Ausdruck:</p>
                        <blockcode src="code/question3_1.txt"/>
                        <p>Finden Sie korrekte Ausprägungen.</p>
                    </question_text>
                    <answer correct="correct">
                        <p>2 * 3 = 6</p>
                    </answer>
                    <answer correct="correct">
                        <p>2 * 3 = 7</p>
                    </answer>
                    <answer>
                        <p>* 2 3 = 6</p>
                    </answer>
                    <answer>
                        <p>6 = 2 * 3</p>
                    </answer>
                    <answer correct="correct">
                        <p>3 * 3 = 9</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- korrekt (WE-ID 5901), bestätigt (rvh) -->
                    <question_text>
                        <p>Mit welchem Schlüsselwort kennzeichnen Sie in MySQL eine Spalte als Alternativschlüssel?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>UNIQUE KEY</p>
                    </answer>
                    <answer>
                        <p>PRIMARY KEY</p>
                    </answer>
                    <answer>
                        <p>FOREIGN KEY</p>
                    </answer>
                    <answer>
                        <p>KEY</p>
                    </answer>
                    <answer>
                        <p>ALTERNATE KEY</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 5772), rvh: korrekt,aber um zwei Antwortoptionen gekürzt, da zu viele -->
                    <question_text>
                        <p>Gegeben ist folgende Datenbanktabelle (durch SHOW COLUMNS FROM grafikkarten):</p>
                        <blockcode type="NOT_DEFINED" src="code/question4_1.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_2.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_3.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_4.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_5.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_6.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_7.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_8.NOT_DEFINED"/>
                        <blockcode type="NOT_DEFINED" src="code/question4_9.NOT_DEFINED"/>
                        <p>Mit welcher SQL-Anweisung wird sie angelegt?</p>
                    </question_text>
                    <!--Maximal fünf Antworten-->
                    <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER UNIQUE KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>
                    <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER UNIQUE KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER PRIMARY KEY, preis DECIMAL(5, 2));</p>
                    </answer>
                    <answer correct="correct">
                        <p>CREATE TABLE grafikkarten (id INTEGER PRIMARY KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>
                    <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>
                    <!--<answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER UNIQUE KEY AUTO_INCREMENT, modell VARCHAR(30) NULL, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>-->
                   <!-- <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER PRIMARY KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller TEXT NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>-->
                    <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER PRIMARY KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL, hersteller TEXT NOT NULL, artikel_nr INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>
             <!--       <answer>
                        <p>CREATE TABLE grafikkarten (id INTEGER UNIQUE KEY AUTO_INCREMENT, modell VARCHAR(30) NOT NULL UNIQUE, hersteller VARCHAR(30) NOT NULL, artikel_nummer INTEGER UNIQUE KEY, preis DECIMAL(5, 2));</p>
                    </answer>-->
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>BNF ausprägen</name>
                <content>
                    <p>Prägen Sie folgenden BNF-Ausdruck mit 2 Beispielen aus:</p>
                    <p>ICH WAR GESTERN IN lokalität. DORT HABE ICH personen GETROFFEN. lokalität: name_der_lokalität IN ort personen: person, ... person: vorname nachname [AUS ort]</p>
                </content>
                <answer>
                    <ul>
                        <li>ICH WAR GESTERN IM LOOP IN NÜRNBERG. DORT HABE ICH CHRISTIAN SCHMIDT AUS FÜRTH, EVA WEBER AUS HAMBURG UND NICOLE MÜLLER AUS MAINZ GETROFFEN.</li>
                        <li>ICH WAR LETZTE WOCHE IN DER KULTURRUINE IN KARLSRUHE. DORT HABE ICH MICHAEL MEISTER UND BETTINA WEBER GETROFFEN.</li>
                    </ul>
                </answer>
            </exercise>
            <exercise>
                <name>Projekt »Filmverleih«: Schlüssel anlegen mit SQL</name>
                <content>
                    <p>Löschen Sie die bestehenden Tabellen des Filmverleihs. Erzeugen Sie sie erneut, wobei Sie dieses Mal die Schlüssel mit angeben. Verwenden Sie AUTO_INCREMENT, falls möglich.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/89.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Projekt »Fluggesellschaft«: Schlüssel anlegen mit SQL</name>
                <content>
                    <p>Löschen und erzeugen Sie auch die Tabellen der Fluggesellschaft mit Schlüsseln.</p>
                </content>
            </exercise>
            <exercise>
                <name>Projekt »Partnervermittlung«: Schlüssel anlegen mit SQL</name>
                <content>
                    <p>Löschen und erzeugen Sie nun auch noch die Tabellen der Partnervermittlung mit Schlüsseln.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>SQL: Ändern bestehender Tabellen</lesson_name>
            <topics>
                <li>wie Sie bei bestehenden Tabellen Spalten hinzufügen.</li>
                <li>wie Sie Spalten löschen.</li>
                <li>wie Sie Spalten ändern.</li>
                <li>wie Sie Tabellen umbenennen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>It really really sucks if you got some DBA Group and trying to get a new column to a table requires to sacrifice three virgins and one of your fingers.</p>
                </blockquote>
                <figcaption>Martin Fowler, at RailsConf 2006</figcaption>
            </figure>
            <h1>DDL-Änderungen ohne Datenverlust</h1>
            <p>Nehmen Sie an, dass Sie bereits eine kleine Admin-Oberfläche in PHP entwickelt haben. Sie zeigen Ihrer Kundin das Ergebnis. Sie ist schlichtweg begeistert und verspricht, die Webanwendung mit ihren Kollegen gleich ausgiebig zu testen. Schon zwei Tage später meldet sie sich mit folgendem Feedback:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Das Anlegen von Benutzern funktioniert hervorragend. Wir haben schon alle Mitarbeiter als Benutzer angelegt. Dabei ist uns aber aufgefallen, dass die Anrede – also z.B. Herr oder Frau – noch fehlt. Können Sie das Feld noch ergänzen? Die Benutzerdaten möchten wir aber nicht nochmal eingeben müssen. Geht das?</p>
                <p>Ach ja, und bei den Seminaren würden wir gerne noch eine Kategorie mit angeben, z.B. »Programmierung« oder »Webdesign«.</p>
            </hint>
            <p>Bisher haben Sie eine Tabelle bei Änderungen an der Datenstruktur immer gelöscht und neu angelegt. Das hat aber den Verlust der bereits eingegebenen Daten zur Folge. In diesem Fall wird Ihre Kundin das nicht tolerieren. Zum Glück gibt es in SQL die Möglichkeit, bestehende Tabellen nachträglich zu verändern. Ändern heißt auf englisch <i>alter</i>. <code>ALTER</code> heißt dementsprechend auch der passende SQL-Befehl.</p>
            <p>Zunächst sollten Sie die Klassendiagramme für das Domänenmodell und das physische Datenmodell aktualisieren:</p>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_seminar_und_benutzer_mit_anrede.png"/>
                <figcaption>Domänenmodell mit Anrede</figcaption>
            </figure>
            <figure width="40%">
                <img src="images/klassendiagramme/pm_seminare_mit_typen_und_anrede.png"/>
                <figcaption>Physisches Datenmodell mit Anrede</figcaption>
            </figure>
            <h1>Spalten hinzufügen mit ADD</h1>
            <p>Fügen Sie die neue Spalte nun mit Hilfe von SQL in die Tabelle <i>benutzer</i> ein:</p>
            <blockcode type="sql" src="code/90.sql"/>
            <p>Ein anschließendes <code>SHOW COLUMNS FROM benutzer;</code> zeigt das geänderte Tabellenschema:</p>
            <blockcode src="code/91.txt"/>
            <p>MySQL versucht bei ALTER-Anweisungen, so wenige Daten wie möglich zu verlieren. Beim Hinzufügen neuer Spalten entsteht überhaupt kein Datenverlust. Es sind noch alle Benutzer vorhanden, wie Sie mittels <code>SELECT * FROM benutzer;</code> sehen können:</p>
            <blockcode src="code/92.txt"/>
            <p>Die BNF zum Hinzufügen von Spalten lautet übrigens:</p>
            <figure>
                <blockcode src="code/93.txt"/>
                <figcaption>BNF zum Hinzufügen von Spalten</figcaption>
            </figure>
            <h1>Spalten löschen mit DROP</h1>
            <p>Sie können Spalten natürlich auch löschen. Fügen Sie zum Ausprobieren erstmal eine überflüssige hinzu:</p>
            <blockcode type="sql" src="code/94.sql"/>
            <p>Prüfen Sie, ob sie wirklich da ist:</p>
            <blockcode type="sql" src="code/95.sql"/>
            <blockcode src="code/96.txt"/>
            <p>Löschen Sie die Spalte nun wieder mit:</p>
            <blockcode type="sql" src="code/97.sql"/>
            <p><code>SHOW COLUMNS FROM benutzer;</code> zeigt, dass sie entfernt wurde.</p>
            <blockcode src="code/98.txt"/>
            <p>Beim Löschen einer Spalte verlieren Sie natürlich auch deren Daten. Alle anderen Daten bleiben aber erhalten. Überprüfen Sie das mit <code>SELECT * FROM benutzer;</code> wenn Sie möchten.</p>
            <p>Hier noch die BNF:</p>
            <figure>
                <blockcode src="code/99.txt"/>
                <figcaption>BNF zum Löschen von Spalten</figcaption>
            </figure>
            <h1>Spalten ändern oder umbenennen mit CHANGE</h1>
            <p>Wollen Sie eine bestehende Spalte ändern, so können Sie den <code>CHANGE</code> -Befehl verwenden. Beispielsweise lässt sich die Anzahl der Zeichen, die für eine Anrede vorgesehen ist, auf 10 vergrößern – mittels:</p>
            <blockcode type="sql" src="code/100.sql"/>
            <p>Prüfen Sie wie immer das Ergebnis:</p>
            <blockcode type="sql" src="code/101.sql"/>
            <blockcode src="code/102.txt"/>
            <p>Sie haben <i>anrede</i> übrigens deswegen zweimal angegeben, weil <code>CHANGE</code> es Ihnen ermöglicht, die Spalte auch gleich umzubennen. Der zweite Name ist dabei der neue. Da Sie den gleichen Spaltennamen <i>anrede</i> nochmals angegeben haben, erfolgt keine Umbenennung.</p>
            <p>Hier ist noch die BNF:</p>
            <figure>
                <blockcode src="code/103.txt"/>
                <figcaption>BNF zum Ändern/Umbenennen von Spalten</figcaption>
            </figure>
            <p>
                <code>column_definition</code> bietet hier die gleichen Möglichkeiten wie beim <code>CREATE TABLE</code>, d.h. Sie können z.B. auch Schlüssel angeben.</p>
            <h1>Tabellen umbenennen mit RENAME</h1>
            <p>Falls Sie die Tabelle selbst umbenennen möchten, ist das ebenfalls mit <code>ALTER</code> möglich. Um z.B. <i>seminare</i> in <i>kurse</i> umzubenennen, geben Sie einfach ein:</p>
            <blockcode type="sql" src="code/104.sql"/>
            <p>Prüfen Sie das Ergebnis mit <code>SHOW tables;</code>
            </p>
            <blockcode src="code/105.txt"/>
            <p>Benennen Sie sie bitte wieder in <i>seminare</i> zurück, bevor Sie weiterarbeiten:</p>
            <blockcode type="sql" src="code/106.sql"/>
            <p>Hier noch, wie üblich, die BNF:</p>
            <figure>
                <blockcode src="code/107.txt"/>
                <figcaption>BNF zum Umbenennen von Tabellen</figcaption>
            </figure>
            <h1>BNF von ALTER</h1>
            <p>Die gezeigten <code>ALTER</code> -Varianten lassen sich zu folgender BNF zusammenfassen:</p>
            <figure>
                <blockcode src="code/108.txt"/>
                <figcaption>BNF von ALTER</figcaption>
            </figure>
            <hint>
                <p>Es gibt noch weitere Möglichkeiten, die in der Praxis aber eher selten benötigt werden oder fortgeschrittene Datenbankfunktionen betreffen. Sie finden die Gesamt-BNF von <code>ALTER TABLE</code> in der <a href="https://dev.mysql.com/doc/refman/8.0/en/alter-table.html">MySQL-Dokumentation</a>. </p>
            </hint>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit <code>ALTER</code> -Anweisungen können Sie das Tabellenschema ändern, ohne Daten zu verlieren. </li>
            </ul>
            <h3>SQL: DDL</h3>
            <table>
                <caption>DDL-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabelle anlegen</td>
                        <td>
                            <code>
                CREATE TABLE tbl_name (create_definition, ...)

                create_definition:
                  col_name column_definition
                  | PRIMARY KEY (col_name, ...)
                  | UNIQUE KEY (col_name, ...)

                column_definition:
                  data_type [AUTO_INCREMENT] [UNIQUE KEY | PRIMARY KEY]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Tabelle löschen</td>
                        <td><code>DROP TABLE tbl_name</code></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Tabellenschema ändern</b>
                        </td>
                        <td>
                            <code>
                ALTER TABLE tbl_name alter_specification [, alter_specification] ...

                alter_specification:
                   ADD col_name column_definition
                 | DROP col_name
                 | CHANGE old_col_name new_col_name column_definition
                 | RENAME TO new_tbl_name
              </code>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Entfernen Sie per SQL die Spalte <i>email</i> aus der Tabelle <i>user</i>.</p>
                        <p><blank>ALTER</blank> TABLE user <blank>DROP</blank> email;</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Entfernen Sie per SQL die Spalte <i>phone_number</i> aus der Tabelle <i>customer</i>.</p>
                        <p>ALTER <blank>TABLE</blank>
                            <blank>customer</blank> DROP <blank>phone_number</blank>;</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Bennen Sie die Tabelle <i>products</i> in <i>stock</i> um.</p>
                        <p><blank>ALTER TABLE</blank> products <blank>RENAME TO</blank> stock;</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welche der folgenden Aussagen zu <code>CHANGE</code> und <code>ALTER</code> sind richtig?</p>
                    </question_text>
                    <answer correct="correct">ALTER ist der Grundbefehl zum Ändern in SQL. Mit CHANGE können Sie innerhalb einer ALTER-Anweisung ein Spalte umdefinieren.</answer>
                    <answer>CHANGE ist der Grundbefehl zum Ändern in SQL. Mit ALTER können Sie innerhalb einer CHANGE-Anweisung ein Spalte umdefinieren.</answer>
                    <answer><code>ALTER</code> kann keinen Datenverlust bewirken. Die Datensicherheit hat höchste Priorität.</answer>
                    <answer correct="correct"><code>ALTER</code> kann einen Datenverlust bewirken. Allerdings versucht ALTER verlustfrei zu arbeiten, falls möglich.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1252), bestätigt (rvh) -->
                    <question_text>
                        <p>Mit welcher SQL-Anweisung kann die Struktur einer Tabelle verändert werden?</p>
                    </question_text>
                    <answer>EDIT TABLE</answer>
                    <answer correct="correct">ALTER TABLE</answer>
                    <answer>MODIFY TABLE</answer>
                    <answer>REDEFINE TABLE</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Spalte hinzufügen</name>
                <content>
                    <p>Fügen Sie der Tabelle <i>seminare</i> das neue Attribut <i>kategorie</i> hinzu, das es erlaubt, ein Seminar einer Kategorie wie z.B. <i>Programmierung</i> oder <i>Webdesign</i> zuzuordnen.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/109.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Korrekturen</name>
                <content>
                    <p>Gegeben ist die Tabelle <i>buecher</i> mit folgender CREATE-Anweisung:</p>
                    <blockcode type="sql" src="code/110.sql"/>
                    <p>Korrigieren Sie die Tabelle mit Hilfe von ALTER-Anweisungen, bis sie folgendem Schema entspricht:</p>
                    <blockcode type="sql" src="code/111.sql"/>
                </content>
                <answer>
                    <blockcode type="sql" src="code/112.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Korrekturen am Projekt »Filmverleih«</name>
                <content>
                    <p>Ergänzen Sie die Tabelle <i>filme</i> um das Attribut <i>genre</i>. Erhöhen Sie die maximale Länge eines Titels auf 150 Zeichen.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/113.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Korrekturen am Projekt »Fluggesellschaft«</name>
                <content>
                    <p>Führen Sie mit Hilfe von ALTER wenigstens zwei Korrekturen am Datenbankschema der Fluggesellschaft durch. Versuchen Sie, das Schema dadurch zu verbessern. Falls Sie keine Ideen dazu haben, fügen Sie einfach ein neues Attribut hinzu und verkleinern Sie einen der VARCHARs.</p>
                </content>
            </exercise>
            <exercise>
                <name>Korrekturen am Projekt »Partnervermittlung«</name>
                <content>
                    <p>Verbessern Sie nun auch zwei Aspekte der Partnervermittlung.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Migrationen</lesson_name>
            <topics>
                <li>wie Sie SQL-Skripte verwenden.</li>
                <li>wie Sie Migrationen durchführen.</li>
                <li>wie Sie sich einen Satz Beispieldaten zum Testen halten können.</li>
            </topics>
            <h1>Versionieren des Datenbankschemas</h1>
            <p>In der Praxis hinterlegen Sie Ihre Anwendung immer auf mehreren Systemen. Beispielsweise programmieren Sie die Seminarverwaltung auf Ihrem eigenen Arbeitsplatzrechner, müssen sie aber später auf dem Server Ihres Kunden (der Akademie) installieren. Für die meisten Projekte empfiehlt sich außerdem noch ein Testsystem, auf dem Sie die jeweils neuesten Features unter möglichst realistischen Bedingungen testen können.</p>
            <p>Dabei müssen Sie stets sicherstellen, dass das Datenbankschema zum aktuellen Stand der Anwendung passt. Betrachten Sie dazu folgendes Beispiel:</p>
            <blockquote>
                <p>Auf dem Server der Akademie war zu Testzwecken schon der alte Stand der Anwendung installiert. Nun haben Sie die Spalte anrede in der benutzer-Tabelle hinzugefügt. Den PHP-Code Ihrer Anwendung haben Sie erweitert, so dass für jeden Benutzer die Anrede ausgewählt werden muss.</p>
                <p>Wenn Sie diese Änderung auf den Server der Akademie übertragen, so dürfen Sie nicht vergessen, die Spalte Anrede auch in der dortigen Datenbank anzulegen, d.h. Sie müssen die exakt gleiche <code>ALTER</code>-Anweisung auch auf dem Akademie-Server absetzen. Dabei könnten Sie sich aber vertippen und beispielsweise die Spalte falsch benennen. In diesem Fall würden Sie einen Fehler in die Anwendung einbringen, der sich nur auf diesem Server nachvollziehen lässt. In der Praxis ist es oft unklar, was den Fehler verursacht – das Datenbankschema, der Anwendungscode oder möglicherweise die Konfiguration des Servers? Solche Fehler sind schwer zu finden. Sobald die Anwendung produktiv ist, müssten Sie zur Fehlersuche womöglich sogar den Server vom Netz nehmen.</p>
            </blockquote>
            <p>Glücklicherweise können Sie das Problem von Anfang an vermeiden. Dazu benötigen Sie sogenannte <i>Migrationsskripte</i>.</p>
            <p>Die Idee dabei ist, dass Sie alle DDL-Anweisungen nicht direkt ausführen, sondern sie stattdessen zunächst in einer Datei speichern. Dadurch können Sie die Anweisungen bei Ihrem Projekt speichern und sie auf jedem anderen Rechner wieder exakt gleich durchführen. Sie vermeiden damit Fehler und sparen sich außerdem den Aufwand, sich die Anweisungen neu zu überlegen (falls schon etwas Zeit vergangen ist) und mehrmals zu tippen.</p>
            <p>Probieren Sie es am Beispiel der Seminarverwaltung:</p>
            <ol>
                <li>Löschen Sie die Datenbank und erzeugen Sie sie erneut.</li>
                <li>Legen Sie sich einen Ordner namens <i>Migrations</i> an. </li>
                <li>Legen Sie eine neue Datei unter dem Namen <i>001_erzeuge_benutzer_und_seminare.sql</i> an. </li>
                <li>
                    <p>Schreiben Sie das DML zum Erzeugen Ihrer Datenbankstruktur in diese Datei:</p>
                    <figure>
                        <blockcode type="sql" src="code/114.sql"/>
                        <figcaption>001_erzeuge_benutzer_und_seminare.sql</figcaption>
                    </figure>
                    <p>Da die Datei aus einer Reihe von SQL-Anweisungen besteht, wird sie als SQL-Skript bezeichnet. In diesem Fall handelt es sich außerdem um ein Migrationsskript.</p>
                </li>
                <li><p>Als Nächstes führen Sie das Skript in der Datenbank <i>seminarverwaltung</i> aus. Wechseln Sie dazu in der Konsole in das Migrations-Verzeichnis und geben Sie ein: </p>
                    <code>mysql -u root seminarverwaltung &lt; 001_erzeuge_benutzer_und_seminare.sql</code>
                    <p>Durch das <i>kleiner-als</i> -Symbol »&lt;« leiten Sie die Zeilen der Datei direkt an MySQL um. Das entspricht der Eingabe der Anweisungen direkt im MySQL-Client.</p>
                </li>
                <li>
                    <p>Überprüfen Sie mit Hilfe von SHOW-Anweisungen, ob MySQL die Tabellen korrekt erzeugt hat.</p>
                    <p>Dieses Vorgehen mag Ihnen zunächst vielleicht etwas umständlich erscheinen. Es hat aber den Vorteil, dass Sie damit sicherstellen, dass alle an Ihrem Projekt beteiligten Rechner über exakt das gleiche Datenbankschema verfügen.</p>
                    <p>Wenn Sie nun Änderungen durchführen wollen, schreiben Sie die Anweisungen einfach in ein weiteres Migrationsskript.</p>
                </li>
                <li>
                    <p>Legen Sie dazu im Migrations-Verzeichnis eine Datei unter dem Namen <i>002_ergaenze_anrede_und_kategorie.sql</i> an. Hinterlegen Sie dort folgende Zeilen:</p>
                    <figure>
                        <blockcode type="sql" src="code/115.sql"/>
                        <figcaption>002_ergaenze_anrede_und_kategorie.sql</figcaption>
                    </figure>
                </li>
                <li>
                    <p>Geben Sie auf der Konsole ein:</p>
                    <code>mysql -u root seminarverwaltung &lt; 002_ergaenze_anrede_und_kategorie.sql</code>
                </li>
                <li>Prüfen Sie wieder, ob die Änderung erfolgreich war.</li>
            </ol>
            <p>Wenn Sie Ihre zusammengehörigen Änderungen in Migrationsskripten hinterlegen, können Sie genau die gleichen Änderungen auch auf jedem anderen Rechner durchführen. Sie müssen dazu lediglich wissen, welchen Versionsstand die Datenbank der jeweilige Rechner hat – daher die spezielle Benennung der Dateien. Die Zahl am Anfang des Dateinamens ist die Versionsnummer. Alternativ können Sie auch statt Versionsnummern Datum und Uhrzeit verwenden, z.B. <i>200904141145_ergaenze_benutzer_um_anrede.sql</i> für den 14.04.2009 um 11:45. Sie erhöhen sie bei jedem Skript einfach um eins. Jetzt müssen Sie lediglich noch dokumentieren, welcher Rechner welche Version Ihres Datenbankschemas verwendet. Sie wissen dadurch immer, welche Migrationsskripte Sie auf dem jeweiligen Rechner noch ausführen müssen. Für den zweiten Teil des Dateinamens überlegen Sie sich einen sinnvollen Kommentar, mit dem Sie auf den ersten Blick erkennen können, was das Skript tut.</p>
            <p>Neben den reinen Strukturdaten können Sie durchaus auch Datensätze mit Hilfe von Migrationsskripten einpflegen. Sie sollten aber nur Daten einpflegen, die in jeder Installation der Anwendung benötigt werden. Beispielsweise wäre es nicht sinnvoll, Kursdaten einzupflegen, falls die Anwendung später von mehreren Niederlassungen der Akademie genutzt wird und diese jeweils andere Kurse anbieten. Sinnvollerweise könnten Sie aber z.B. schon mal einen Administrator-Benutzer anlegen – also einen Benutzer, der später über alle Zugriffsrechte in der Anwendung verfügt. Das Passwort müsste der jeweils verantwortliche Administrator natürlich später ändern.</p>
            <h1>Beispieldaten</h1>
            <p>Wenn Sie Ihre Anwendung testen und weiterentwickeln, ist es hilfreich, einen Satz an Beispieldaten parat zu haben. Es ist jedoch nicht ratsam, Beispieldaten direkt in die Datenbank einzupflegen. Sie werden vielleicht später zu Testzwecken Daten löschen oder unsinnige Daten eintragen. Haben Sie die Daten manuell eingepflegt, so müssen Sie Ihren Datenbestand nach dem Testen wieder mit viel Aufwand reparieren.</p>
            <p>Abhilfe schaffen auch hier SQL-Skripte. Legen Sie pro Tabelle je ein Skript an:</p>
            <ul>
                <li>
                    <i>seminare.sql</i>
                </li>
                <li>
                    <i>benutzer.sql</i>
                </li>
            </ul>
            <p>In jedem Skript halten Sie die dazugehörigen Beispieldatensätze in Form von INSERT-Anweisungen fest. Falls Sie Ihren Datenbestand beim Testen beschädigen sollten, können Sie die Skripte jederzeit wieder einspielen.</p>
            <ol>
                <li>
                    <p>Legen Sie nun die folgenden Skripte an. (Sie können sie natürlich auch aus dem Begleitmaterial kopieren)</p>
                    <figure>
                        <blockcode type="sql" src="code/116.sql"/>
                        <figcaption>seminare.sql</figcaption>
                    </figure>
                    <figure>
                        <blockcode type="sql" src="code/117.sql"/>
                        <figcaption>benutzer.sql</figcaption>
                    </figure>
                </li>
                <li>
                    <p>Führen Sie sie aus:</p>
                    <p>
                        <code>mysql -u root seminarverwaltung &lt; seminare.sql</code>
                    </p>
                    <p>
                        <code>mysql -u root seminarverwaltung &lt; benutzer.sql</code>
                    </p>
                </li>
            </ol>
            <p>Mit Hilfe der SQL-Skripte können Sie nun jederzeit die Datenbank löschen und mit aktuellen Testdaten wiederherstellen. Außerdem können Sie die Skripte bei Ihrem Projekt speichern und haben somit alle relevanten Daten an einem Ort.</p>
            <hint>
                <h3>Migrationen in objekt-relationalen Mappern</h3>
                <p>Manche OR-Mapper wie z.B. Doctrine (PHP), Eloquent (Laravel) oder ActiveRecord (Ruby on Rails) bieten von Haus aus Unterstützung für Migrationsskripte an. Wenn Sie einen solchen Mapper einsetzen, können Sie viele Arbeitsvorgänge mit Hilfe des Mappers automatisieren, z.B. das Verwalten der Versionsnummern. Sie sparen somit wertvolle Entwicklungszeit.</p>
            </hint>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>SQL-Skripte enthalten Anweisungen, die Sie sonst auf der Konsole eingeben würden.</li>
                <li>Mit Hilfe von Migrationsskripten können Sie Aufwände einsparen und Fehler vermeiden.</li>
                <li>Ein SQL-Skript mit Beispieldaten ist nützlich zum Testen Ihrer Anwendung.</li>
            </ul>
            <h1>Übungen</h1>
            <exercise>
                <name>SQL-Skripte für das Projekt »Filmverleih«</name>
                <content>
                    <ol>
                        <li>Entwickeln Sie ein Migrationsskript, das die Tabellen des Projekts anlegt.</li>
                        <li>Entwickeln Sie je ein SQL-Skript, das Beispieldaten für die Tabellen <i>filme</i> und <i>regisseure</i> einfügt. Verwenden Sie dazu die Beispieldaten aus <a href="#insert_select"/>.</li>
                        <li>Löschen Sie die Datenbank <i>filmverleih</i> und erzeugen Sie sie erneut.</li>
                        <li>Führen Sie die Skripte aus.</li>
                        <li>Prüfen Sie die erzeugten Tabellen und Daten.</li>
                    </ol>
                </content>
                <answer>Sie finden die Skripte im Begleitmaterial zu diesem Buch.</answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>SQL-Skripte für das Projekt »Fluggesellschaft«</name>
                <content>
                    <ol>
                        <li>Entwickeln Sie ein Migrationsskript, das die Tabellen des Projekts anlegt.</li>
                        <li>Entwickeln Sie je ein SQL-Skript, das Beispieldaten in alle Tabellen einfügt. Verwenden Sie auch hier Ihre Beispieldaten aus <a href="#insert_select"/>.</li>
                    </ol>
                </content>
            </exercise>
            <exercise>
                <name>SQL-Skripte für das Projekt »Partnervermittlung«</name>
                <content>
                    <p>Entwickeln Sie die Skripte nach dem gleichen Muster wie in den vorherigen Übungen.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>SQL: Datensätze gezielt auslesen</lesson_name>
            <topics>
                <li>wie Sie Spalten einzeln selektieren.</li>
                <li>wie Sie doppelte Datensätze entfernen.</li>
                <li>wie Sie bestimmte Datensätze gezielt abfragen.</li>
            </topics>
            <h1>SELECT mit Spaltenangabe</h1>
            <p>Oftmals benötigen Sie in Ihrer Anwendung verschiedene Sichten auf Ihre Daten. Betrachten Sie dazu folgende Anforderung:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir möchten neben der Adminsicht auch eine öffentliche Benutzerliste integrieren. Diese soll einfach alle Benutzer tabellarisch untereinander auflisten. E-Mail-Adresse und Passwort dürfen aber nicht angezeigt werden.</p>
            </hint>
            <p>Diese Anforderung ist leicht zu realisieren. Sie benötigen dazu lediglich die <code>SELECT</code> -Anweisung. Statt wie bisher</p>
            <blockcode type="sql" src="code/118.sql"/>
            <p>zu verwenden, bestimmen Sie nun genau, welche Spalten Sie benötigen. Geben Sie statt »*« einfach die benötigten Spalten an:</p>
            <blockcode type="sql" src="code/119.sql"/>
            <p>Sie erhalten folgende Ergebnistabelle:</p>
            <blockcode src="code/120.txt"/>
            <p>Der Stern »*«, den Sie bisher verwendet haben, steht für alle Spalten der Ursprungstabelle. Sie erhalten mit dem Stern die gleiche Ergebnistabelle, als wenn Sie alle Spalten direkt angäben.</p>
            <blockcode type="sql" src="code/121.sql"/>
            <p>Falls Sie tatsächlich alle Spalten benötigen, ist der Stern aber einfach praktischer.</p>
            <h1>Doppelte Datensätze entfernen</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Damit sich die Kunden über unser Seminarangebot informieren können, benötigen wir noch eine Übersichtsseite der Seminare für die Kunden. Eine Liste mit Titel und Preis genügt. Die Beschreibung lässt sich auf eine Detailseite auslagern.</p>
                <p>Allerdings sind es ziemlich viele Seminare. Deswegen soll der Besucher der Website die Möglichkeit haben, eine Kategorie zu wählen. Es gibt also zunächst eine Übersichtsseite, die alle Seminare zeigt und eine Navigation für die verschiedenen Kategorien. Wenn der Besucher eine Kategorie anklickt, kommt er auf eine Seite, die nur die Seminare der jeweiligen Kategorie listet.</p>
            </hint>
            <p>Realisieren Sie zunächst die Übersichtsseite. Für die Übersichtsseite benötigen Sie zwei SQL-Anweisungen. Die erste Anweisung listet die Seminare. Das dürfte mittlerweile kein Problem mehr für Sie sein. Überlegen Sie bitte erst einmal selbst, bevor Sie weiterlesen.</p>
            <p>Die Anweisung lautet einfach:</p>
            <blockcode type="sql" src="code/122.sql"/>
            <p>Die zweite Anweisung soll die Kategorien auflisten. Wie listen Sie nun alle Kategorien auf? Versuchen Sie folgendes:</p>
            <blockcode type="sql" src="code/123.sql"/>
            <p>Gefällt Ihnen das Ergebnis?</p>
            <blockcode src="code/124.txt"/>
            <p>Wenn die Navigation einigermaßen sinnvoll aussehen soll, darf sie jede Kategorie nur einmal auflisten. Aber Moment, die Ergebnistabelle besitzt doch nur eine Spalte. Dürfen hier überhaupt mehrfach gleiche Zeilen auftreten?</p>
            <hint>
                <h3>Christopher sagt...</h3>
                <figure>
                    <blockquote>
                        <p><!--There are numerous practical arguments in support of the position that duplicate tuples
            ("duplicates" for short) should be prohibited.-->Es gibt eine Vielzahl praktischer Argumente, die die Ansicht unterstützen, dass doppelte Tupel (kurz: Duplikate) zu vermeiden sind.</p>
                    </blockquote>
                    <figcaption>Date (2005)</figcaption>
                </figure>
            </hint>
            <p>Nun, im Sinne des relationalen Modells ist das eigentlich verboten. SQL ist eben leider nicht perfekt.</p>
            <p>Sie können das Problem zum Glück leicht umgehen. Teilen Sie dem DBMS gezielt mit, dass Sie nur Zeilen in Ihrer Ergebnistabelle haben möchten, die sich voneinander unterscheiden. <i>Voneinander verschieden</i> heißt <i>distinct</i>. Verbessern Sie die SQL-Anweisung:</p>
            <blockcode type="sql" src="code/125.sql"/>
            <blockcode src="code/126.txt"/>
            <h1>Zeilen filtern</h1>
            <p>Realisieren Sie nun die Seite für die Anzeige aller Seminare einer speziellen Kategorie, beispielsweise der Kategorie <i>Programmierung</i>. Dazu benötigen Sie eine Bedingung. Auf Deutsch könnten Sie sagen:</p>
            <ul>
                <li>
                    <i>Liste alle Seminare, deren Kategorie Programmierung ist.</i>
                </li>
            </ul>
            <p>oder anderes ausgedrückt,</p>
            <ul>
                <li><i>Liste alle Seminare, für die gilt: die Kategorie ist Programmierung</i>. </li>
            </ul>
            <p>Genauso können Sie es in SQL formulieren. <i>Für die gilt</i> drücken Sie in SQL durch <code>WHERE</code> aus. Schreiben Sie also:</p>
            <blockcode type="sql" src="code/127.sql"/>
            <p>Da <i>Programmierung</i> ein String ist, müssen Sie ihn in Anführungszeichen setzen. Dabei ist es nicht erforderlich, dass Sie die Spalte <i>kategorie</i> schon im SELECT-Teil angeben. Hier das Ergebnis:</p>
            <blockcode src="code/128.txt"/>
            <p>Die Bedingung hinter dem WHERE wird auf jede Zeile angewendet. Nur die Zeilen, auf die die Bedingung zutrifft, werden in der Ergebnistabelle aufgenommen. In diesem Fall eben alle, deren Kategorie <i>Programmierung</i> ist.</p>
            <p>Die Bedingung ist dabei immer ein boolescher Ausdruck. <i>Eine Bedingung trifft zu</i> bedeutet, dass der Ausdruck <code>TRUE</code> zurückgibt.</p>
            <p>Beachten Sie, dass der Operator »=« in SQL der Gleichheitsoperator ist und nicht der Zuweisungsoperator, wie in vielen Programmiersprachen.</p>
            <h1>Vergleichsoperatoren</h1>
            <p>Neben dem Gleichheitsoperator gibt es auch in SQL die bekannten Vergleichsoperatoren:</p>
            <table>
                <caption>Vergleichsoperatoren</caption>
                <thead>
                    <tr>
                        <th>Operator</th>
                        <th>Name</th>
                        <th>Beispiele</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>&lt;</td>
                        <td>kleiner als</td>
                        <td>3 &lt; 4 ergibt TRUE, 4 &lt; 3 ergibt FALSE</td>
                    </tr>
                    <tr>
                        <td>&gt;</td>
                        <td>größer als</td>
                        <td>4 &gt; 3 ergibt TRUE, 3 &gt; 4 ergibt FALSE</td>
                    </tr>
                    <tr>
                        <td>&lt;=</td>
                        <td>kleiner oder gleich</td>
                        <td>3 &lt;= 4 ergibt TRUE, 3&lt;= 3 ergibt TRUE</td>
                    </tr>
                    <tr>
                        <td>&gt;=</td>
                        <td>größer oder gleich</td>
                        <td>3 &gt;= 4 ergibt FALSE, 3 &gt;= 3 ergibt TRUE</td>
                    </tr>
                    <tr>
                        <td>!=</td>
                        <td>ungleich</td>
                        <td>3 != 3 ergibt FALSE, 3 != 4 ergibt TRUE</td>
                    </tr>
                </tbody>
            </table>
            <p>Wenn Sie beispielsweise alle Seminare anzeigen möchten, die weniger als 2000 € kosten, können Sie folgende SQL-Anweisung verwenden:</p>
            <blockcode type="sql" src="code/129.sql"/>
            <blockcode src="code/130.txt"/>
            <p>Neben Zahlen können Sie aber auch Strings und Datumsangaben in Vergleichen verwenden:</p>
            <blockcode type="sql" src="code/131.sql"/>
            <p>Diese SQL-Anweisung gibt Ihnen alle Benutzer zurück, die sich vor dem 01.01.2009 registriert haben.</p>
            <blockcode src="code/132.txt"/>
            <h1>Suche mit LIKE</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Denken Sie auch noch an die Suchfunktion? Auf der Übersichtsseite der Seminare muss es ein Suchfeld geben. Wenn der Benutzer dort z.B. »Adobe« eingibt, werden anschließend alle Seminare aufgelistet, bei denen »Adobe« im Titel vorkommt, z.B. »Adobe Flash (Grundlagen)« oder »Bildbearbeitung mit Adobe PS«.</p>
            </hint>
            <p>Zur Entwicklung der Suchfunktion benötigen Sie einen weiteren Vergleichsoperator – den Operator <code>LIKE</code>. Mit seiner Hilfe können Sie einen Vergleich mit einem Muster durchführen. Ein Muster ist ein String, der sogenannte <keyword>Wildcards</keyword> (Platzhalter, Jokerzeichen) enthält. Davon gibt es zwei verschiedene. Das Zeichen »_« ist eine Wildcard, die für <b>ein</b> beliebiges Zeichen steht. Das Zeichen »%« steht sogar für mehrere beliebige Zeichen.</p>
            <h3>Beispiel</h3>
            <ul>
                <li>
                    <code>'Marco' LIKE 'Marc_'</code> ergibt TRUE </li>
                <li>
                    <code>'Marci' LIKE 'Marc_'</code> ergibt TRUE </li>
                <li>
                    <code>'Marc' LIKE 'Marc_'</code> ergibt FALSE </li>
                <li>
                    <code>'Marc' LIKE 'Marc%'</code> ergibt TRUE </li>
                <li>
                    <code>'Adobe Flash (Grundlagen)' LIKE 'Adobe%'</code> ergibt TRUE </li>
                <li>
                    <code>'Bildbearbeitung mit Adobe PS' LIKE 'Adobe%'</code> ergibt FALSE </li>
                <li>
                    <code>'Bildbearbeitung mit Adobe PS' LIKE '%Adobe%'</code> ergibt TRUE </li>
                <li>
                    <code>'Datenbanken &amp; SQL' LIKE '%Adobe%'</code> ergibt FALSE </li>
            </ul>
            <p>Wenn Sie alle Seminare auflisten möchten, die <i>Adobe</i> enthalten, schreiben Sie:</p>
            <blockcode type="sql" src="code/133.sql"/>
            <blockcode src="code/134.txt"/>
            <p>
                <code>'%Adobe%'</code> bedeutet, der <i>titel</i> darf vor und nach <code>Adobe</code> beliebig viele beliebige Zeichen enthalten – oder anders ausgedrückt: Der <i>titel</i> enthält den String <code>Adobe</code>. Sie können das <code>Adobe</code> in <code>'%Adobe%'</code> später in der Programmierung durch eine Variable ersetzen, die die Suchanfrage des Benutzers enthält.</p>
            <h1>Logische Operatoren</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Die Suchfunktion macht ja schon einen netten Eindruck. Wir würden dem Benutzer aber auch gerne die Möglichkeit geben, innerhalb einer Kategorie zu suchen. Wenn er z.B. in der Kategorie »Programmierung« den Suchbegriff »Adobe« eingibt, sollen nur Programmier-Seminare gelistet werden, die »Adobe« im Titel haben, z.B. »Adobe Flash (ActionScript)«. Können Sie das bitte noch ergänzen?</p>
            </hint>
            <p>Um diese kleine Zusatzanforderung zu erfüllen und auch jede Kategorieunterseite mit einem entsprechenden Suchfeld zu versehen, müssen Sie in der SQL-Anweisung zwei Bedingungen angeben. Die Ergebnistabelle enthält ein Seminar, wenn es</p>
            <ul>
                <li>in der richtigen Kategorie ist und</li>
                <li>sein Titel zum Suchmuster passt.</li>
            </ul>
            <p>Genauso wie ich die beiden obigen Sätze im Deutschen mit <i>und</i> verbunden habe, müssen Sie in Ihrer SQL-Anweisung die zwei Bedingungen mit <code>AND</code> verbinden. Geben Sie also ein:</p>
            <blockcode type="sql" src="code/135.sql"/>
            <blockcode src="code/136.txt"/>
            <p>
                <code>AND</code> ist der übliche logische Operator, der nur dann TRUE zurückgibt, wenn seine beiden Operanden TRUE sind – d.h. nur Seminare, auf die tatsächlich beide Bedingungen zutreffen, werden in der Ergebnistabelle gelistet. Hier treffen beide Bedingungen nur auf das Seminer <i>Adobe Flash (ActionScript)</i> zu.</p>
            <p>Der <code>AND</code> -Operator lässt sich auch als sogenannte <keyword>Wahrheitstabelle</keyword> darstellen. Dabei entsprechen die Variablen <code>a</code> und <code>b</code> beliebigen logischen Aussagen, wie z.B. <code>kategorie = 'Programmierung'</code>.</p>
            <table>
                <caption>Wahrheitstabelle des AND-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>b</th>
                        <th>a AND b</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>FALSE</td>
                        <td>FALSE</td>
                        <td>FALSE</td>
                    </tr>
                    <tr>
                        <td>FALSE</td>
                        <td>TRUE</td>
                        <td>FALSE</td>
                    </tr>
                    <tr>
                        <td>TRUE</td>
                        <td>FALSE</td>
                        <td>FALSE</td>
                    </tr>
                    <tr>
                        <td>TRUE</td>
                        <td>TRUE</td>
                        <td>TRUE</td>
                    </tr>
                </tbody>
            </table>
            <p>Der nächste logische Operator, den Sie benötigen, ist <code>OR.</code> Er gibt TRUE zurück, sobald einer seiner beiden Operatoren TRUE ist – d.h., der eine <b>oder</b> der andere. Sie können <code>OR</code> z.B. verwenden, um gleichzeitig in Titel und Beschreibung der Seminare zu suchen:</p>
            <blockcode type="sql" src="code/137.sql"/>
            <blockcode src="code/138.txt"/>
            <p>Die Ergebnistabelle zeigt alle Seminare, die <i>JavaScript</i> im Titel oder in der Beschreibung haben – oder auch in beiden Spalten.</p>
            <p>Hier sehen Sie zur Verdeutlichung die Wahrheitstabelle von <code>OR</code>.</p>
            <table>
                <caption>Wahrheitstabelle des OR-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>b</th>
                        <th>a OR b</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>FALSE</td>
                        <td>FALSE</td>
                        <td>FALSE</td>
                    </tr>
                    <tr>
                        <td>FALSE</td>
                        <td>TRUE</td>
                        <td>TRUE</td>
                    </tr>
                    <tr>
                        <td>TRUE</td>
                        <td>FALSE</td>
                        <td>TRUE</td>
                    </tr>
                    <tr>
                        <td>TRUE</td>
                        <td>TRUE</td>
                        <td>TRUE</td>
                    </tr>
                </tbody>
            </table>
            <p>Schließlich gibt es noch den logischen Operator <code>NOT</code>. Mit <code>NOT</code> können Sie einen Wahrheitswert invertieren. Beispielsweise könnten Sie alle Seminare ausgeben, die <b>nicht</b> zur Kategorie Programmierung gehören:</p>
            <blockcode type="sql" src="code/139.sql"/>
            <blockcode src="code/140.txt"/>
            <p>Der NOT-Operator hat nur einen Operanden, wie Sie der Wahrheitstabelle leicht entnehmen können:</p>
            <table>
                <caption>Wahrheitstabelle des NOT-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>NOT a</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>FALSE</td>
                        <td>TRUE</td>
                    </tr>
                    <tr>
                        <td>TRUE</td>
                        <td>FALSE</td>
                    </tr>
                </tbody>
            </table>
            <h1>BNF von SELECT</h1>
            <figure>
                <blockcode src="code/141.txt"/>
                <figcaption>BNF von SELECT</figcaption>
            </figure>
            <p>Die <code>where_condition</code> ist ein beliebiger Ausdruck, der einen booleschen Wert zurückliefert. Ein Ausdruck ist dabei eine beliebige Kombination aus Literalen, Spaltennamen, Operatoren und Funktionen. Später lernen Sie noch Funktionen und weitere Operatoren kennen. Die BNF von SELECT ist auch noch nicht ganz vollständig. Wir werden die Möglichkeiten von SELECT bald ausweiten.</p>
            <h1>SELECT-FROM-WHERE-Block</h1>
            <p>Die Kombination aus <code>SELECT</code>, <code>FROM</code> und <code>WHERE</code> wird oft auch als <i>SELECT-FROM-WHERE-Block</i> bezeichnet, weil die meisten SELECT-Anweisungen in der Praxis aus diesen drei Teilen bestehen. Als kleine Hilfestellung können Sie sich merken, dass Sie nach dem <code>SELECT</code> die Spalten und nach dem <code>WHERE</code> die Zeilen Ihrer Ergebnistabelle auswählen. Nach dem <code>FROM</code> geben Sie die Tabelle an, aus der Sie Daten entnehmen möchten.</p>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Hinter <code>SELECT</code> können Sie Spalten auswählen, hinter <code>WHERE</code> Zeilen filtern. </li>
                <li>Doppelte Datensätze entfernen Sie mit <code>DISTINCT</code>. </li>
                <li>Eine Bedingung ist ein boolescher Ausdruck.</li>
                <li>Sie können in SQL Ausdrücke mit logischen Operatoren und Vergleichsoperatoren verwenden.</li>
            </ul>
            <h3>SQL: DML</h3>
            <table>
                <caption>BNF von DML-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><b>Datensätze auslesen</b></td>
                        <td>
                            <code>
                SELECT [DISTINCT] * | col_name [,col_name ...]
                FROM table_name
                [WHERE where_condition]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Datensatz einfügen</td>
                        <td><code>INSERT INTO tbl_name (col_name, ...) VALUES (value, ...)</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <!--Der Spaltenname muss raus aus dem Input!-->
                    <question_text>
                        <p>Geben Sie alle Autos aus, die keine »Automatik-Schaltung« haben:</p>
                        <p>SELECT * FROM autos <blank>WHERE NOT</blank> schaltung = 'Automatik'</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Geben Sie alle Autos aus, die in diesem Jahrtausend gebaut wurden.</p>
                    </question_text>
                    <!--Maximal fünf Antwortmöglichkeiten-->
                    <!--<answer>SELECT * FROM autos WHERE baujahr &lt; '01-01-2000'</answer>-->
                    <answer>SELECT * FROM autos WHERE baujahr &lt;= '01-01-2000'</answer>
                    <answer>SELECT * FROM autos WHERE baujahr &gt;= '01-01-2000'</answer>
                    <answer>SELECT * FROM autos WHERE baujahr &lt;= '2000-01-01'</answer>
                    <answer>SELECT * FROM autos WHERE baujahr &gt; '2000-01-01'</answer>
                    <answer correct="correct">SELECT * FROM autos WHERE baujahr &gt;= '2000-01-01'</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1253), stätigt (rvh) -->
                    <question_text>
                        <p>Was bewirkt das Schlüsselwort DISTINCT bei einer SQL SELECT-Abfrage?</p>
                    </question_text>
                    <answer>Nichts, da DISTINCT in SELECT-Statements nicht verwendet werden darf.</answer>
                    <answer>Doppelte Datensätze werden gruppiert.</answer>
                    <answer correct="correct">Verhindert, dass Duplikate ausgegeben werden.</answer>
                    <answer>Fasst mehrere Felder zusammen.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1246), bestätigt (rvh) -->
                    <question_text>
                        <p>Der SQL-Befehl, um alle Titel (Attribut <i>titel</i>) und zwar nur die Titel der Bücher (Tabelle <i>buecher)</i>, die nach 1999 erschienen sind (Attribut <i>erscheinungsjahr</i>), auszugeben lautet:</p>
                    </question_text>
                    <answer>
                        <p>SELECT titel FROM buecher IN erscheinungsjahr &gt; 1999</p>
                    </answer>
                    <answer>
                        <p>SELECT * FROM buecher WHERE erscheinungsjahr &gt; 1999</p>
                    </answer>
                    <answer correct="correct">
                        <p>SELECT titel FROM buecher WHERE erscheinungsjahr &gt; 1999</p>
                    </answer>
                    <answer>
                        <p>SELECT titel FROM buecher FOR erscheinungsjahr &gt; 1999</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Anfragen an den Filmverleih</name>
                <content>
                    <p>Um aussagekräftigere Ausgaben zu erhalten, importieren Sie bitte die Daten aus <i>mehr_filme.sql.</i>
                    </p>
                    <ol>
                        <li>Geben Sie alle Filme des Filmverleihs mit allen Spalten aus.</li>
                        <li>Geben Sie alle Filme mit <i>titel</i> und <i>erscheinungsjahr</i> aus.</li>
                        <li>Geben Sie alle Jahre aus, aus denen der Filmverleih Filme besitzt (ohne Doppelnennungen).</li>
                        <li>Geben Sie alle Filme aus, die 2002 oder nach 2002 erschienen sind.</li>
                        <li>Geben Sie alle Filme aus, die den Text <i>Ring</i> im Titel enthalten.</li>
                        <li>Geben Sie alle Filme aus, die den Text <i>Ring</i> im Titel enthalten und nicht vor 2002 erschienen sind.</li>
                        <li>Geben Sie alle Filme aus, die den Text <i>Ring</i> im Titel oder der Kurzbeschreibung enthalten.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT * FROM filme; </code>
                        </li>
                        <li>
                            <code>SELECT titel, erscheinungsjahr FROM filme;</code>
                        </li>
                        <li>
                            <code>SELECT DISTINCT erscheinungsjahr FROM filme; </code>
                        </li>
                        <li>
                            <code>SELECT titel, erscheinungsjahr FROM filme WHERE erscheinungsjahr &gt;=
                2002;</code>
                        </li>
                        <li>
                            <code>SELECT titel, erscheinungsjahr FROM filme WHERE titel LIKE
                '%Ring%';</code>
                        </li>
                        <li>
                            <code>SELECT titel, erscheinungsjahr FROM filme WHERE titel LIKE '%Ring%'
                AND erscheinungsjahr &gt;= 2002;</code>
                        </li>
                        <li>
                            <code>SELECT titel, kurzbeschreibung FROM filme WHERE titel LIKE '%Ring%'
                OR kurzbeschreibung LIKE '%Ring%';</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Passwortprüfung</name>
                <content>
                    <p>Gegeben ist folgende Benutzertabelle:</p>
                    <blockcode type="sql" src="code/142.sql"/>
                    <p>Entwickeln Sie für diese Tabelle eine SQL-Anweisung, die einen Benutzernamen (login) und ein Passwort entgegennimmt. Für das Beispiel können Sie als Login <i>mhuana</i> und als Passwort <i>geheim</i> verwenden. Existiert der Benutzer und ist sein Passwort richtig, so soll die Anweisung die id zurückliefern. Existiert der Benutzer nicht oder ist das Passwort falsch, so soll die Ergebnistabelle leer sein.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/143.sql"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Ausdrücke in SQL</lesson_name>
            <topics>
                <li>wie Sie Ausdrücke in SQL angeben.</li>
                <li>wie Sie Berechnungen durchführen.</li>
                <li>wie Sie die Auswertungsreihenfolge beeinflussen.</li>
                <li>wie Sie Spalten der Ergebnistabelle umbenennen.</li>
            </topics>
            <h1>Ausdrücke im SELECT</h1>
            <p>In der letzten Lektion haben Sie erfahren, dass Sie hinter dem Schlüsselwort SELECT die Spalten angeben können, die in Ihrer Ergebnistabelle erscheinen sollen. Tatsächlich können Sie aber noch wesentlich mehr tun. Die Angabe hinter dem SELECT bestimmt – ganz allgemein – das Format der Ergebnistabelle. Sie können dabei aber nicht nur bestehende Spalten aus einer Quelltabelle übernehmen, sondern auch völlig neue Spalten erzeugen. Betrachten Sie beispielsweise folgende Anforderung:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir benötigen noch dringend eine Auflistung der Seminare, die Netto- und Bruttopreis getrennt ausweist.</p>
            </hint>
            <p>Diese kleine Anforderung Ihrer Auftraggeberin können Sie mit SQL problemlos umsetzen. Geben Sie hinter dem <code>SELECT</code> die geforderten Spalten an. Für den Bruttopreis, der in der Quelltabelle <i>seminare</i> nicht vorhanden ist, erzeugen Sie einfach eine neue Spalte. Die Werte der Spalte berechnen Sie nach Bedarf. Der Bruttopreis ergibt sich dabei aus dem jeweiligen Preis des Seminars mal 1,19.</p>
            <blockcode type="sql" src="code/144.sql"/>
            <blockcode src="code/145.txt"/>
            <p>Prinzipiell können Sie hinter dem <code>SELECT</code> mehrere Ausdrücke angeben, deren Wert pro Zeile berechnet wird. Ein <keyword>Ausdruck</keyword> ist dabei eine Kombination von Literalen, Spaltennamen, Operatoren und Funktionen. Eine Spalte der Quelltabelle können Sie dabei ähnlich einsetzen wie eine Variable in einer Programmiersprache. MySQL ersetzt für jede Zeile den Namen der Spalte durch den Wert des jeweiligen Datensatzes.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/146.sql"/>
            <blockcode src="code/147.txt"/>
            <blockcode type="sql" src="code/148.sql"/>
            <blockcode src="code/149.txt"/>
            <blockcode type="sql" src="code/150.sql"/>
            <blockcode src="code/151.txt"/>
            <h1>Ausdruck ohne Quelltabelle</h1>
            <p>Es ist dabei nicht einmal zwingend erforderlich, eine Quelltabelle anzugeben. In dem Fall wird der Ausdruck nur einmal ausgewertet. Es gibt dann keine Zeilen, auf die er sich beziehen könnte.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/152.sql"/>
            <blockcode src="code/153.txt"/>
            <blockcode type="sql" src="code/154.sql"/>
            <blockcode src="code/155.txt"/>
            <p>Diese Möglichkeit werden Sie vermutlich selten praktisch einsetzen, es ist aber sehr nützlich, um schnell und einfach Ausdrücke in MySQL auszuprobieren.</p>
            <h1>Ausdrücke im WHERE-Teil</h1>
            <p>Natürlich können Sie auch im WHERE-Teil beliebige Ausdrücke verwenden. Entscheidend ist dabei, dass SQL den Rückgabewert des Gesamtausdrucks als booleschen Wert versteht. Für jede Zeile prüft das DBMS den Gesamtwert. Ist dieser <code>TRUE</code>, wird die Zeile für die Auswertung berücksichtigt.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/156.sql"/>
            <blockcode src="code/157.txt"/>
            <h1>Operatoren</h1>
            <h2>Arithmetische Operatoren</h2>
            <p>Zunächst gibt es in MySQL die klassischen arithmetischen Operatoren, wie folgende Tabelle zeigt.</p>
            <table>
                <caption>Arithmetische Operatoren</caption>
                <thead>
                    <tr>
                        <th>Operator</th>
                        <th>Bedeutung</th>
                        <th>Beispiel</th>
                        <th>Ergebnis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>+</td>
                        <td>Addition</td>
                        <td>10 + 3</td>
                        <td>13</td>
                    </tr>
                    <tr>
                        <td>-</td>
                        <td>Subtraktion</td>
                        <td>10 - 3</td>
                        <td>7</td>
                    </tr>
                    <tr>
                        <td>*</td>
                        <td>Multiplikation</td>
                        <td>10 * 3</td>
                        <td>30</td>
                    </tr>
                    <tr>
                        <td>/</td>
                        <td>Division</td>
                        <td>10 / 3</td>
                        <td>3.3333</td>
                    </tr>
                    <tr>
                        <td>DIV</td>
                        <td>Integerdivision</td>
                        <td>10 DIV 3</td>
                        <td>3</td>
                    </tr>
                </tbody>
            </table>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/158.sql"/>
            <blockcode src="code/159.txt"/>
            <h2>Logische und Vergleichsoperatoren</h2>
            <p>Neben den arithmetischen Operatoren gibt es noch die Vergleichsoperatoren und die logischen Operatoren, die Sie bereits kennengelernt haben. Sie können Sie aber nicht nur im WHERE-, sondern auch im SELECT-Bereich verwenden.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/160.sql"/>
            <blockcode src="code/161.txt"/>
            <blockcode type="sql" src="code/162.sql"/>
            <blockcode src="code/163.txt"/>
            <blockcode type="sql" src="code/164.sql"/>
            <blockcode src="code/165.txt"/>
            <p>Wichtig ist hier, dass MySQL keinen echten booleschen Datentyp besitzt, sondern <code>1</code> statt <code>TRUE</code> und <code>0</code> statt <code>FALSE</code> zurückgibt. Die Rückgabewerte sind vom Typ INTEGER und können sowohl als boolesche Werte als auch als Integerwerte weiterverwendet werden. Letzteres macht allerdings selten Sinn.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/166.sql"/>
            <blockcode src="code/167.txt"/>
            <h2>Präzedenz und Klammerung</h2>
            <p>Wie in den meisten Programmiersprachen gibt es auch in SQL Präzedenzregeln. Durch Klammerung können Sie die Reihenfolge der Auswertung verändern.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/168.sql"/>
            <blockcode src="code/169.txt"/>
            <blockcode type="sql" src="code/170.sql"/>
            <blockcode src="code/171.txt"/>
            <h1>Funktionen</h1>
            <p>Auch in SQL gibt es Funktionen, die Sie als Teil eines Ausdrucks einsetzen können. Es ist sicherlich nicht sinnvoll, alle Funktionen, die MySQL bietet, auswendig zu lernen. Deswegen zeige ich Ihnen nur einige wenige. Was zählt, ist das Prinzip. Bei Bedarf können Sie weitere Funktionen in der MySQL-Dokumentation unter <a href="http://dev.mysql.com/doc/refman/5.4/en/functions.html">dev.mysql.com/doc/refman/5.4/en/functions.html</a> nachschlagen.</p>
            <p>Funktionen haben Parameter und Rückgabewerte. Wie bei vielen Programmiersprachen befinden sich die Parameter in Klammern und werden durch Kommata getrennt. Es gibt natürlich auch Funktionen ohne Parameter.</p>
            <h3>Beispiel</h3>
            <p>Die Funktion <code>ROUND</code> rundet eine Zahl auf eine angegebene Zahl von Nachkommastellen.</p>
            <blockcode type="sql" src="code/172.sql"/>
            <blockcode src="code/173.txt"/>
            <p>Die Funktion <code>UPPER</code> konvertiert einen String in Großbuchstaben.</p>
            <blockcode type="sql" src="code/174.sql"/>
            <blockcode src="code/175.txt"/>
            <p>Ganz ohne Parameter arbeitet <code>NOW</code>. Bei einem Aufruf von NOW() erhalten Sie das aktuelle Datum inklusive Uhrzeit zurück.</p>
            <blockcode type="sql" src="code/176.sql"/>
            <blockcode src="code/177.txt"/>
            <h2>Verschachteln von Funktionen</h2>
            <p>Die Rückgabewerte von Funktionen lassen sich problemlos von anderen Funktionen und Operatoren als Parameter weiterverwerten. Auf diese Weise können Sie Funktionen leicht verschachteln. Dazu ein kleines Beispiel aus der Praxis:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Unsere Administratoren hätten gerne die Möglichkeit, sich schnell einen Überblick über die Benutzer zu verschaffen. Dazu hätten Sie gerne eine Liste, die die Benutzer in folgendem Format anzeigt:</p>
                <blockcode src="code/178.txt"/>
                <p>Also z.B. Reich, F. statt Frank Reich.</p>
            </hint>
            <p>Mit Hilfe einer Kombination von Stringfunktionen können Sie dieser Forderung leicht nachkommen. Zunächst benötigen Sie die Möglichkeit, den ersten Buchstaben des Vornamens zu extrahieren. Das ermöglicht die Funktion <code>SUBSTR</code>. Sie hat folgende Parameter:</p>
            <ol>
                <li>den Eingabestring</li>
                <li>die Position, ab der Sie den Substring aus dem Eingabestring extrahieren möchten</li>
                <li>die Anzahl der Zeichen, die Sie benötigen</li>
            </ol>
            <p>Da Sie genau ein Zeichen ab der ersten Position benötigen, funktioniert folgender Aufruf:</p>
            <blockcode type="sql" src="code/179.sql"/>
            <blockcode src="code/180.txt"/>
            <p>Anschließend können Sie mit Hilfe von <code>CONCAT</code> (verbinden) die Verbindung zwischen den einzelnen Stringbestandteilen herstellen:</p>
            <blockcode type="sql" src="code/181.sql"/>
            <blockcode src="code/182.txt"/>
            <h1>Umbenennen von Spaltenüberschriften</h1>
            <p>Schauen Sie sich nochmal das Beispiel vom Anfang der Lektion an:</p>
            <blockcode type="sql" src="code/183.sql"/>
            <blockcode src="code/184.txt"/>
            <p>Eine kleine Unschönheit stellen die Tabellenüberschriften dar. Zum einen ist unklar, dass es sich bei <i>preis</i> um den Nettopreis handelt. Zum anderen ist der Spaltenname <i>preis * 1.19</i> sehr unhandlich. Für solche Fälle hält SQL das Schlüsselwort <code>AS</code> bereit. Es dient zum Umbenennen von Spaltenüberschriften. Notieren Sie es einfach hinter einem Ausdruck. Das folgende Beispiel zeigt wie:</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/185.sql"/>
            <blockcode src="code/186.txt"/>
            <h1>BNF von SELECT</h1>
            <p>An dieser Stelle können Sie die BNF von SELECT ein wenig erweitern. SELECT lässt nicht nur Spaltennamen (<code>col_name</code>) zu, sondern auch beliebige Ausdrücke. Die MySQL-Dokumentation bezeichnet diese als SELECT-Expression (<code>select_expr)</code>, da sie sich von Ausdrücken im WHERE-Bereich unterscheiden. Außerdem können Sie nun Spalten mit AS umbenennen.</p>
            <figure>
                <blockcode src="code/187.txt"/>
                <figcaption>BNF von SELECT ergänzt um select_expr und AS</figcaption>
            </figure>
            <p>Falls Sie sich fragen, wo der Stern <code>»*</code> « geblieben ist: Keine Sorge, er ist nicht verlorengegangen. Der Stern ist lediglich eine mögliche Ausprägung eines SELECT-Ausdrucks.</p>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit SELECT bestimmen Sie die Spalten der Ergebnistabelle.</li>
                <li>Eine Quellentabelle ist nicht zwingend erforderlich.</li>
                <li>Mit AS können Sie die Spaltennamen der Ergebnistabelle ändern.</li>
                <li>MySQL kennt Operatoren und Funktionen. Sie können sie in SELECT-Ausdrücken und WHERE- Bedingungen verwenden.</li>
                <li>Bei der Auswertung von Ausdrücken verwendet MySQL eine Präzedenzreihenfolge, die Sie mit Hilfe von Klammern beeinflussen können.</li>
            </ul>
            <h3>Operatorenübersicht in Rangreihenfolge</h3>
            <table>
                <thead>
                    <tr>
                        <th>Präzedenz</th>
                        <th>Operator</th>
                        <th>Bedeutung</th>
                        <th>Beispiel</th>
                        <th>Ergebnis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>*</td>
                        <td>Multiplikation</td>
                        <td>8 * 3</td>
                        <td>24</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>/</td>
                        <td>Division</td>
                        <td>8 / 3</td>
                        <td>2.6667</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>DIV</td>
                        <td>Integerdivision</td>
                        <td>8 DIV 3</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>%</td>
                        <td>Modulo</td>
                        <td>8 % 3</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>+</td>
                        <td>Addition</td>
                        <td>8 + 3</td>
                        <td>11</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>-</td>
                        <td>Subtraktion</td>
                        <td>8 – 3</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>=</td>
                        <td>gleich</td>
                        <td>8 = 3</td>
                        <td>0</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>!=</td>
                        <td>ungleich</td>
                        <td>8 != 3</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>&gt;=</td>
                        <td>größer gleich</td>
                        <td>8 &gt;= 3</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>&lt;=</td>
                        <td>kleicher gleich</td>
                        <td>8 &lt;= 3</td>
                        <td>0</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>&gt;</td>
                        <td>größer</td>
                        <td>8 &gt; 3</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>&lt;</td>
                        <td>kleiner</td>
                        <td>8 &lt; 3</td>
                        <td>0</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>LIKE</td>
                        <td>like</td>
                        <td>"Anna" LIKE "A%"</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>NOT</td>
                        <td>not</td>
                        <td>!TRUE</td>
                        <td>0</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>AND</td>
                        <td>and</td>
                        <td>1 &amp;&amp; 0</td>
                        <td>0</td>
                    </tr>
                    <tr>
                        <td>6</td>
                        <td>OR</td>
                        <td>or</td>
                        <td>1 || 0</td>
                        <td>1</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Gegeben ist die Tabelle <i>messages</i> durch folgende Anweisung:</p>
                        <blockcode src="code/question5_1.txt"/>
                        <p>Fügen Sie eine neue Nachricht hinzu, die den aktuellen Zeitpunkt verwendet:</p>
                        <p><blank>INSERT INTO</blank> messages (<blank>content,</blank> when) VALUES ('I have something to say...', <blank>NOW()</blank>);</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Gegeben ist die Tabelle <code>bretter = {id, produktbez, gewicht, laenge}</code>. Geben Sie die Produktbezeichnung und die Länge der Regalbretter aus. Die Länge soll auf eine Stelle nach dem Komma gerundet werden:</p>
                        <p>SELECT <blank>produktbez, ROUND(laenge, 1)</blank> FROM bretter;</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- korrekt (WE-ID 5900), bestätigt (rvh) -->
                    <question_text>
                        <p>Gegeben ist die Tabelle <i>blog_entries</i> durch folgende Anweisung:</p>
                        <blockcode src="code/question6_1.txt"/>
                        <p>Welcher SQL-Befehl fügt einen neuen Eintrag mit aktuellem Datum hinzu?</p>
                    </question_text>
                    <answer correct="correct">
                        <p> INSERT INTO blog_entries (titel, inhalt, datum) VALUES ('Ein schöner Tag', 'Lorem Ipsum', NOW());</p>
                    </answer>
                    <answer>
                        <p> INSERT INTO blog_entries (id, titel, inhalt, datum) VALUES ('Ein schöner Tag', 'Lorem Ipsum', NOW());</p>
                    </answer>
                    <answer>
                        <p> INSERT INTO blog_entries (titel, datum, inhalt) VALUES ('Ein schöner Tag', 'Lorem Ipsum', NOW());</p>
                    </answer>
                    <answer>
                        <p> INSERT INTO blog_entries (titel, datum, inhalt) VALUES ('Ein schöner Tag', 'Lorem Ipsum', '1978-09-03');</p>
                    </answer>
                    <answer>
                        <p> INSERT INTO blog_entries (id, titel, inhalt, datum) VALUES ('Ein schöner Tag', 'Lorem Ipsum', '1978-09-03');</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Arbeiten mit Dokumentation</name>
                <content>
                    <p>Lösen Sie die folgenden Aufgaben mit Hilfe der Dokumentation von <a href="http://www.mysql.com">MySQL</a>.</p>
                    <ol>
                        <li>Geben Sie mit SQL die aktuelle Uhrzeit aus.</li>
                        <li>Geben Sie nur den aktuellen Monat aus.</li>
                        <li>Entwickeln Sie eine SQL-Anweisung, die einen Würfel simuliert. Bei jedem Aufruf soll eine zufällige Zahl zwischen 1 und 6 zurückgegeben werden.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT CURTIME();</code>
                        </li>
                        <li>
                            <code>SELECT MONTH(NOW());</code>
                        </li>
                        <li>
                            <code>SELECT FLOOR(RAND() * 6) + 1;</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Ausgaben im Filmverleih: Regisseure</name>
                <content>
                    <p>Geben Sie alle Regisseure mit ungefährem Alter aus. Sie müssen nur das Geburtsjahr berücksichtigen.</p>
                    <h3>Beispiel</h3>
                    <blockcode src="code/188.txt"/>
                </content>
                <answer>
                    <blockcode type="sql" src="code/189.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Ausgaben im Filmverleih: Filme</name>
                <content>
                    <p>Geben Sie alle Filme mit Beschreibung aus, aber kürzen Sie die Beschreibung auf 20 Zeichen und fügen Sie '…' an.</p>
                    <h3>Beispiel</h3>
                    <blockcode src="code/190.txt"/>
                </content>
                <answer>
                    <blockcode type="sql" src="code/191.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Ausgaben im Filmverleih</name>
                <content>
                    <p>Geben Sie alle Filme mit ihrer Dauer in Stunden und Minuten aus (90 Minuten entsprechen 1 Stunde und 30 Minuten).</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Aggregatsfunktionen</lesson_name>
            <topics>
                <li>wie Sie die Anzahl der Zeilen einer Tabelle ermitteln.</li>
                <li>wie Sie Minimum und Maximum einer Spalte bestimmen.</li>
                <li>wie Sie den Durchschnitt und die Summe aller Werte einer Spalte berechnen.</li>
            </topics>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir haben mittlerweile sehr viele Benutzer in unserer Datenbank. Gibt es eine Möglichkeit, auf einen Blick zu sehen, wie viele genau?</p>
                <p>Außerdem hat unsere Marketingabteilung ein paar Daten angefragt: Wie viel kostet das teuerste Seminar? Wie viel das günstigste? Wie viel kostet ein Seminar im Durchschnitt?</p>
                <p>Programmieren Sie bitte eine Seite, auf der wir diese Daten immer im aktuellen Zustand einsehen können.</p>
            </hint>
            <p>Um Ihre Kundin zufriedenzustellen, müssen Sie der Datenbank einige Informationen abverlangen. Normalerweise sollten sich diese mit Hilfe von Funktionen zusammenstellen lassen. Mit einfachen Funktionen ist das aber nicht möglich, da diese zeilenweise arbeiten. Was Sie benötigen, sind Funktionen, deren Eingabe nicht aus einer Zeile, sondern aus einer ganzen Tabelle besteht.</p>
            <p>Tatsächlich bietet SQL solche Funktionen an. Sie heißen <keyword>Aggregationsfunktionen</keyword>, da Sie die Informationen aus mehreren Datensätzen aggregieren (zusammenstellen).</p>
            <h1>Zählen von Zeilen</h1>
            <p>Die einfachste Aggregationsfunktion ist <code>COUNT</code>. Mit COUNT können Sie Datensätze zählen und somit z.B. erfahren, wie viele Benutzer bereits registriert sind.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/192.sql"/>
            <blockcode src="code/193.txt"/>
            <p>Beachten Sie, dass es sich beim Ergebnis wieder um eine komplette Tabelle handelt, auch wenn diese selbstverständlich nur einen einzigen Wert enthält – d.h. eine Tabelle mit einer Zeile und einer Spalte. Das ist typisch für Aggregationsfunktionen, da sie eben nicht pro Datensatz arbeiten, sondern einen Gesamtwert ermitteln.</p>
            <p>Genauso einfach können Sie die anderen Anforderungen umsetzen.</p>
            <h1>Minimum und Maximum</h1>
            <p>Das Minimum und Maximum eines Attributes können Sie mit Hilfe der Funktionen <code>MIN</code> und <code>MAX</code> in Erfahrung bringen. Wenn Sie also wissen möchten, wie viel das teuerste Seminar kostet, verwenden Sie die folgende SQL-Anweisung:</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/194.sql"/>
            <blockcode src="code/195.txt"/>
            <h1>Durchschnitt und Summe</h1>
            <p>Mit der Funktion <code>AVG</code> (average, dt. Durchschnitt) bestimmen Sie den Durchschnittswert aller Werte einer Spalte. Dazu müssen Sie die Spalte ebenso angeben wie bei MIN oder MAX.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/196.sql"/>
            <blockcode src="code/197.txt"/>
            <p>Schließlich gibt es noch die Funktion <code>SUM</code>, mit der Sie die Summe einer Spalte berechnen können. Für die Seminarpreise macht das wenig Sinn. Das folgende Beispiel soll deswegen einfach nur zur Verdeutlichung des Prinzips dienen.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/198.sql"/>
            <blockcode src="code/199.txt"/>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit Aggregationsfunktionen können Sie Informationen über ganze Spalten hinweg zusammensetzen (aggregieren).</li>
            </ul>
            <h3>Übersicht über die wichtigsten Aggregationsfunktionen</h3>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Bedeutung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>COUNT</td>
                        <td>Anzahl</td>
                    </tr>
                    <tr>
                        <td>MIN</td>
                        <td>Minimum</td>
                    </tr>
                    <tr>
                        <td>MAX</td>
                        <td>Maximum</td>
                    </tr>
                    <tr>
                        <td>SUM</td>
                        <td>Summe</td>
                    </tr>
                    <tr>
                        <td>AVG</td>
                        <td>Durchschnitt</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="free_text">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Worin besteht die Besonderheit von Aggregationsfunktionen bezüglich ihrer Ein- und Ausgabe?</p>
                    </question_text>
                    <answer>Aggregationsfunktionen verwenden als Eingabe eine Liste von Werten. Im einfachsten Fall sind das alle Werte einer Spalte. Als Ausgabe liefern sie nur einen einzigen Wert zurück (das gilt zumindest für die hier gezeigte einfache Form).</answer>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wo innerhalb einer SQL-Anweisung können Sie Aggregationsfunktionen einsetzen und wo normale Funktionen?</p>
                    </question_text>
                    <answer correct="correct">Normale Funktionen lassen sich innerhalb einer SELECT-Expression einsetzen.</answer>
                    <answer correct="correct">Normale Funktionen lassen sich innerhalb einer WHERE-Condition einsetzen.</answer>
                    <answer correct="correct">Aggregationsfunktionen lassen sich innerhalb einer SELECT-Expression einsetzen.</answer>
                    <answer>Aggregationsfunktionen lassen sich innerhalb einer WHERE-Condition einsetzen.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welche der folgenden Funktionen sind <b>keine</b> Aggregationsfunktionen?</p>
                    </question_text>
                    <answer correct="correct">FLOOR</answer>
                    <answer>MAX</answer>
                    <answer>SUM</answer>
                    <answer correct="correct">CONCAT</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Aggregationsfunktionen im Filmverleih</name>
                <content>
                    <p>Entwickeln Sie SQL-Anweisungen zum Beantworten folgender Fragen:</p>
                    <ol>
                        <li>Wie viele Filme kennt die Datenbank?</li>
                        <li>Wie viele Minuten dauert der kürzeste Film seit dem Jahr 2002?</li>
                        <li>Aus wie vielen Zeichen besteht die längste Filmbeschreibung?</li>
                        <li>Wie alt ist der älteste Film?</li>
                        <li>Wie lange dauert ein Science-Fiction-Film im Durchschnitt?</li>
                        <li>Wie viele verschiedene Genres unterscheidet die Datenbank?</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT COUNT(*) FROM filme;</code>
                        </li>
                        <li>
                            <code>SELECT MIN(spieldauer) FROM filme WHERE erscheinungsjahr &gt;= 2002;</code>
                        </li>
                        <li>
                            <code>SELECT MAX(LENGTH(kurzbeschreibung)) FROM filme;</code>
                        </li>
                        <li>
                            <code>SELECT MAX(YEAR(NOW())-erscheinungsjahr) FROM filme;</code>
                        </li>
                        <li>
                            <code>SELECT AVG(spieldauer) FROM filme WHERE genre="fantasy";</code>
                        </li>
                        <li>
                            <code>SELECT COUNT(DISTINCT genre) FROM filme;</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Datensätze ändern und löschen</lesson_name>
            <topics>
                <li>wie Sie bestehende Datensätze ändern können.</li>
                <li>wie Sie unliebsame Datensätze löschen.</li>
            </topics>
            <hint src="images/mitarbeiterin.jpg">
                <p>Beim Anlegen der Seminare sind uns ein paar kleine Fehler unterlaufen. Außerdem haben wir noch Änderungswünsche. Das Seminar »JavaScript« z.B., soll nun nur noch 1999,99 € kosten.</p>
                <p>Deswegen möchten wir möglichst bald vorhandene Seminare wieder ändern oder löschen können.</p>
            </hint>
            <h1>Ändern von Datensätzen</h1>
            <p>Zum Ändern bestehender Datensätze stellt Ihnen SQL den Befehl <code>UPDATE</code> (aktualisieren) zur Verfügung. Probieren Sie folgende SQL-Anweisung aus:</p>
            <blockcode type="sql" src="code/200.sql"/>
            <blockcode src="code/201.txt"/>
            <p>Es sind sieben Zeilen betroffen? Das ist verdächtig! Schauen Sie sich die geänderten Seminare an:</p>
            <blockcode type="sql" src="code/202.sql"/>
            <blockcode src="code/203.txt"/>
            <p>Oh weh. Was ist denn hier passiert? Alle Seminare haben den gleichen Preis!</p>
            <p>Das Problem ist, dass <code>UPDATE</code> alle Datensätze ändert. Wenn Sie nur einige Datensätze oder sogar – wie hier – nur einen ändern möchten, müssen Sie die Zeilen beschränken. Mit welchem SQL-Schlüsselwort war das nochmal möglich?</p>
            <p>Richtig, mit <code>WHERE</code>. Restaurieren Sie nochmal die Beispieldaten mit Hilfe der Skripte:</p>
            <blockcode src="code/204.txt"/>
            <p>Ergänzen Sie das UPDATE nun mit einem WHERE. Sie müssen sich auf das richtige Seminar beziehen! Am einfachsten lässt sich das mit Hilfe der <code>id</code> realisieren.</p>
            <blockcode type="sql" src="code/205.sql"/>
            <blockcode src="code/206.txt"/>
            <p>Überprüfen Sie wieder die Änderung:</p>
            <blockcode type="sql" src="code/207.sql"/>
            <blockcode src="code/208.txt"/>
            <p>Diesmal haben Sie nur das richtige Seminar geändert.</p>
            <p>Die BNF von UPDATE ist einfach:</p>
            <blockcode src="code/209.txt"/>
            <h1>Ausdrücke im UPDATE</h1>
            <p>Statt eines Wertes können Sie beim UPDATE auch ganze Ausdrücke einsetzen. Beispielsweise können Sie mit dem folgendem SQL eine Preiserhöhung aller Seminare um 10% veranlassen:</p>
            <blockcode type="sql" src="code/210.sql"/>
            <h1>Löschen von Datensätzen</h1>
            <p>Der Befehl <code>DELETE</code> dient zum Löschen von Datensätzen und funktioniert ganz ähnlich wie der UPDATE-Befehl. Auch beim Löschen sollten Sie mittels <code>WHERE</code> angeben, welche Datensätze bzw. welchen Datensatz Sie löschen möchten. Geben Sie nichts weiter an, so löscht MySQL alle Datensätze der Tabelle.</p>
            <p>Probieren Sie es dennoch – Sie können die Datensätze gleich wiederherstellen.</p>
            <blockcode type="sql" src="code/211.sql"/>
            <blockcode src="code/212.txt"/>
            <p>Ein <code>SELECT id, titel FROM seminare;</code> zeigt Ihnen nun eine leere Tabelle:</p>
            <blockcode src="code/213.txt"/>
            <p>Stellen Sie die Datensätze mit Hilfe des Skriptes <i>seminare.sql</i> wieder her.</p>
            <p>Versuchen Sie es nun erneut mit</p>
            <blockcode type="sql" src="code/214.sql"/>
            <blockcode src="code/215.txt"/>
            <p>Diesmal haben Sie nur das Seminar <i>Datenbanken &amp; SQL</i> gelöscht, wie Sie mittels <code>SELECT id, titel FROM seminare;</code> wieder leicht überprüfen können:</p>
            <blockcode src="code/216.txt"/>
            <p>Hier noch die BNF von <code>DELETE</code>:</p>
            <blockcode src="code/217.txt"/>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit UPDATE können Sie bestehende Datensätze ändern (aktualisieren).</li>
                <li>Mit DELETE können Sie Datensätze löschen.</li>
            </ul>
            <h3>SQL: DML</h3>
            <table>
                <caption>DML-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datensätze auslesen</td>
                        <td>
                            <code>
                SELECT [DISTINCT] select_expr [AS alias_name] [,select_expr [AS alias_name] ...]
                [FROM table_name]
                [WHERE where_condition]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Datensatz einfügen</td>
                        <td><code>INSERT INTO tbl_name (col_name, ...) VALUES (value, ...)</code></td>
                    </tr>
                    <tr>
                        <td><b>Datensätze ändern</b></td>
                        <td>
                            <code>
                UPDATE table_name SET col_name1 = value1 [, col_name2 = value2]
                [WHERE where_condition]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td><b>Datensätze löschen</b></td>
                        <td><code>DELETE FROM table_name [WHERE where_condition]</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Was passiert, wenn Sie eine DELETE-Anweisung ohne WHERE verwenden?</p>
                    </question_text>
                    <answer>Der <b>erste</b> Datensatz wird gelöscht.</answer>
                    <answer correct="correct">Es werden <b>alle</b> Datensätze gelöscht.</answer>
                    <answer>Das DBMS meldet einen Fehler.</answer>
                    <answer>Es passiert gar nichts. Die Anweisung wird ignoriert.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Was passiert, wenn Sie eine UPDATE-Anweisung ohne WHERE verwenden?</p>
                    </question_text>
                    <answer>Der <b>erste</b> Datensatz wird geändert (sofern die Änderung möglich ist).</answer>
                    <answer correct="correct">Es werden <b>alle</b> Datensätze geändert (sofern die Änderungen möglich sind).</answer>
                    <answer>Das DBMS meldet einen Fehler.</answer>
                    <answer>Es passiert gar nichts. Die Anweisung wird ignoriert.</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <!-- rvh: korrekt. ALTER wäre auch ein schöner Distraktor, me: ergänzt -->
                    <question_text>
                        <p>Welcher SQL-Befehl wird zum Ändern von Datensätzen benutzt?</p>
                    </question_text>
                    <answer>EDIT</answer>
                    <answer correct="correct">UPDATE</answer>
                    <answer>MODIFY</answer>
                    <answer>ALTER</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welcher SQL-Befehl wird zum Löschen von Datensätzen benutzt?</p>
                    </question_text>
                    <answer>REMOVE</answer>
                    <answer correct="correct">DELETE</answer>
                    <answer>DROP</answer>
                    <answer>DESTROY</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Fehlerkorrektur</name>
                <content>
                    <p>Die Spieldauer des Films <i>The Dark Knight</i> ist mit 180 Minuten falsch angegeben. Ändern Sie sie auf 152 Minuten.</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/218.sql"/>
                </answer>
            </exercise>
            <exercise>
                <name>Löschen alter Filme</name>
                <content>
                    <p>Alle Filme, die von 1998 und älter sind, werden aus dem Programm genommen. Löschen Sie sie!</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/219.sql"/>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Namensmigration</name>
                <content>
                    <p>Entwickeln Sie ein Migrationsskript für die Tabelle <i>regisseure</i>. Die Spalte <i>vorname</i> entfällt. Stattdessen soll der jeweilige <i>vorname</i> mit bei <i>name</i> gespeichert werden. Achten Sie darauf, dass die Migration verlustfrei geschieht.</p>
                    <h3>Beispiel</h3>
                    <p><b>Name:</b> Jackson, <b>Vorname:</b> Peter =&gt; <b>Name:</b> Peter Jackson</p>
                </content>
                <answer>
                    <blockcode type="sql" src="code/220.sql"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Sortierung und LIMIT</lesson_name>
            <topics>
                <li>wie Sie Datensätze mit SQL sortieren.</li>
                <li>wie Sie mit Hilfe von SQL eine Blättern-Funktion realisieren.</li>
            </topics>
            <hint src="images/mitarbeiterin.jpg">
                <p>Das Mitarbeiterinterface zur Seminarverwaltung ist wirklich recht praktisch – vielen Dank für die hervorragende Arbeit. Leider geht uns bei den vielen Seminaren immer noch hin und wieder die Übersicht verloren. Wir haben uns beraten und sind auf folgende Idee gekommen:</p>
                <p>Die Überschriften Titel, Preis und Kategorie sollten anklickbar sein. Durch das Klicken müssen die Seminare dann entsprechend sortiert werden – und am besten jeweils wahlweise auf- oder absteigend.</p>
            </hint>
            <h1>Sortierung</h1>
            <p>Einmal mehr überrascht Sie Ihre Kundin mit neuen Ideen. Zum Glück ist das kein Problem für Sie – denn wie immer hat SQL die richtige Lösung parat. Sortieren können Sie in SQL mit der <code>ORDER BY</code> -Anweisung, die Sie zusätzlich noch hinter dem WHERE notieren. Sie können ORDER BY aber natürlich auch ohne WHERE verwenden. Es genügt dabei, das Attribut anzugeben, nach dem Sie sortieren möchten.</p>
            <h3>Beispiele</h3>
            <blockcode type="sql" src="code/221.sql"/>
            <blockcode src="code/222.txt"/>
            <blockcode type="sql" src="code/223.sql"/>
            <blockcode src="code/224.txt"/>
            <h1>Sortierung nach mehreren Attributen</h1>
            <blockcode type="sql" src="code/225.sql"/>
            <blockcode src="code/226.txt"/>
            <p>Es ist auch möglich, mehrere Attribute zur Sortierung heranzuziehen. Beispielsweise können Sie erst nach Kategorie sortieren und dann noch mal innerhalb der Kategorie alphabetisch nach dem Titel. Geben Sie dazu einfach beide Attribute an – durch Komma getrennt. Die Reihenfolge ist dabei entscheidend. Das erste Attribut wirkt auch als wichtigstes Sortierkriterium.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/227.sql"/>
            <blockcode src="code/228.txt"/>
            <blockcode type="sql" src="code/229.sql"/>
            <blockcode src="code/230.txt"/>
            <blockcode type="sql" src="code/231.sql"/>
            <blockcode src="code/232.txt"/>
            <h1>Auf- und absteigende Sortierung</h1>
            <p>Ihre Auftraggeberin hat sich insbesondere noch gewünscht, dass zwischen auf- und absteigender Sortierung gewechselt werden kann. Auch das ist in SQL vorgesehen – in Form der Schlüsselwörter <code>ASC</code> und <code>DESC</code>.</p>
            <p>ASC steht für <i>ascending</i>, d.h. aufsteigend. Eine aufsteigende Sortierung bedeutet, dass die Ausgabe mit dem kleinsten Wert beginnt und dann immer größere listet. Im Falle von Zeichentypen gibt es eine vordefinierte Reihenfolge, bei der A kleiner als Z gilt. Dementsprechend ist mit <i>aufsteigend</i> hier eine normale alphabetische Sortierung gemeint. Sie könnten also beispielsweise schreiben:</p>
            <blockcode type="sql" src="code/233.sql"/>
            <p>Das ASC müssen Sie aber nicht angeben, da es sich sowieso schon um das Standardverhalten von ORDER BY handelt.</p>
            <p>Wollen Sie dagegen absteigend sortieren, ist die Angabe von DESC (descending – absteigend) verpflichtend.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/234.sql"/>
            <blockcode src="code/235.txt"/>
            <p>Wie Sie sehen, steht nun das Seminar <i>Ruby on Rails</i> (das letzte nach der alphabetischen Reihenfolge) an erster Stelle, während <i>Adobe Flash (ActionScript)</i> die letzte Stelle belegt.</p>
            <h1>Die BNF von ORDER BY</h1>
            <p>Die BNF von ORDER BY ist nicht weiter kompliziert. ORDER BY erweitert wieder einmal die BNF von SELECT.</p>
            <figure>
                <blockcode src="code/236.txt"/>
                <figcaption>BNF von SELECT ergänzt um ORDER BY</figcaption>
            </figure>
            <h1>Limit</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Eine weitere Verbesserung, die zur Übersichtlichkeit beitragen könnte, wäre, wenn die Katalogseite nicht immer alle Seminare zeigt. Ich denke, die Seite wird bedienbarer und die Ladezeiten sicherlich ein wenig kürzer, wenn die Seite nur die ersten 20 Seminare anzeigt. Um zu den nächsten 20 zu kommen, wäre eine Blätterfunktion angebracht.</p>
            </hint>
            <p>Tatsächlich bietet MySQL eine solche Funktion bereits out-of-the-box. Die Rede ist vom Schlüsselwort <code>LIMIT</code>. Mit Hilfe von LIMIT können Sie die Suchergebnisse auf eine fixe Anzahl beschränken. Im einfachsten Fall geben Sie die Anzahl von Zeilen an, die die Ergebnistabelle zeigen soll.</p>
            <h3>Beispiel</h3>
            <p>Das folgende Beispiel zeigt die ersten drei Seminare. Natürlich ließen sich statt 3 auch 20 Seminare anzeigen. Um den Effekt zu sehen, bräuchten Sie aber viel mehr Testdatensätze.</p>
            <blockcode type="sql" src="code/237.sql"/>
            <blockcode src="code/238.txt"/>
            <p>Wenn der Kunde die zweite Seite sehen möchte, müssen Sie die Seminare 4 bis 6 ausgeben. Geben Sie LIMIT dazu einfach zwei Parameter. Der erste Parameter ist in diesem Fall die Verschiebung – der sogenannte <keyword>Offset</keyword>. Der zweite Parameter gibt erneut die Anzahl an.</p>
            <h3>Beispiel</h3>
            <blockcode type="sql" src="code/239.sql"/>
            <blockcode src="code/240.txt"/>
            <p>Genauso geben Sie dann eine dritte Seite aus. Sie beginnen bei Seminar 7 (Verschiebung um 6) und geben wiederum 3 Seminare aus.</p>
            <blockcode type="sql" src="code/241.sql"/>
            <blockcode src="code/242.txt"/>
            <p>Da es in den Testdaten nur insgesamt sieben Seminare gibt, wird nur noch das letzte ausgegeben.</p>
            <h1>BNF von LIMIT</h1>
            <p>LIMIT ist die letzte Angabe in der SELECT-Anweisung. Damit ist die BNF von SELECT – für die Belange dieses Buches – fast komplett. Eine Erweiterung lernen Sie aber später noch kennen.</p>
            <figure>
                <blockcode src="code/243.txt"/>
                <figcaption>BNF von SELECT ergänzt um LIMIT</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Mit ORDER BY können Sie die Ergebnistabelle sortieren.</li>
                <li>Mit LIMIT können Sie die Ausgabe auf eine fixe Anzahl von Zeilen beschränken.</li>
                <li>LIMIT ist besonders nützlich, um eine Blättern-Funktion zu programmieren.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Begrenzen Sie die Ausgabe der Produkte auf 3:</p>
                        <p><code>SELECT * from produkte </code><blank>LIMIT 3</blank><code>;</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Geben Sie maximal 5 Mitarbeiter aus, deren Nachnamen mit »E« beginnen.</p>
                        <p><code>SELECT personal_nr, vorname, nachname FROM mitarbeiter</code>
                            <blank>WHERE nachname LIKE </blank>'E%' <blank>LIMIT 5</blank><code>;</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie sortieren Sie die Tabelle <i>seminare</i> nach dem Attribut <i>preis</i> in aufsteigender Reihenfolge?</p>
                    </question_text>
                    <answer correct="correct">
                        <blockcode src="code/answer7_1.txt"/>
                    </answer>
                    <answer>
                        <blockcode src="code/answer7_2.txt"/>
                    </answer>
                    <answer correct="correct">
                        <blockcode src="code/answer7_3.txt"/>
                    </answer>
                    <answer>
                        <blockcode src="code/answer7_4.txt"/>
                    </answer>
                    <answer>
                        <blockcode src="code/answer7_5.txt"/>
                    </answer>
                </question>

                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1249), bestätigt (rvh) -->
                    <question_text>
                        <p>Mit welchem Schlüsselwort werden in einer SQL-Abfrage die Ergebnisse sortiert?</p>
                    </question_text>
                    <answer>AVG</answer>
                    <answer>COUNT</answer>
                    <answer correct="correct">ORDER BY</answer>
                    <answer>INTERSECT</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- korrekt (WE-ID 1254), bestätigt (rvh) -->
                    <question_text>
                        <p>Sie möchten in einer SELECT-Anweisung nach dem Preis (Attribut: 'preis', Datentyp DECIMAL) sortieren. Dabei soll der niedrigste Preis zuerst angezeigt werden und der höchste zuletzt. Welches der folgenden Befehlsfragmente können Sie in Ihrer SQL-Anweisung verwenden, um die gewünschte Ergebnistabelle zu erhalten?</p>
                    </question_text>
                    <answer>
                        <p>ORDER BY preis LOWER</p>
                    </answer>
                    <answer>
                        <p>ORDER BY preis UPPER</p>
                    </answer>
                    <answer correct="correct">
                        <p>ORDER BY preis ASC</p>
                    </answer>
                    <answer>
                        <p>ORDER BY preis DESC</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Filme sortiert ausgeben</name>
                <content>
                    <ol>
                        <li>Geben Sie alle Filme nach Titel sortiert aus.</li>
                        <li>Geben Sie alle Filme nach Spieldauer sortiert aus. Dabei soll der längste Film zuerst erscheinen und der kürzeste zuletzt.</li>
                        <li>Geben Sie alle Filme in der Reihenfolge ihres Erscheinens aus. Falls in einem Jahr mehrere Filme vorhanden sind, so müssen diese innerhalb des Jahres noch alphabetisch sortiert werden.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT * FROM filme ORDER BY titel;</code>
                        </li>
                        <li>
                            <code>SELECT * FROM filme ORDER BY spieldauer DESC;</code>
                        </li>
                        <li>
                            <code>SELECT * FROM filme ORDER BY erscheinungsjahr, titel;</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <exercise>
                <name>Filme ausgeben mit Limit</name>
                <content>
                    <ol>
                        <li>Geben Sie zwei Filme aus, die nach dem Jahr 2000 erschienen sind.</li>
                        <li>Geben Sie die nächsten zwei Filme aus, die nach dem Jahr 2000 erschienen sind.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT * FROM filme WHERE erscheinungsjahr &gt; 2000 LIMIT 2;</code>
                        </li>
                        <li>
                            <code>SELECT * FROM filme WHERE erscheinungsjahr &gt; 2000 LIMIT 2, 2;</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Die Null-Markierung</lesson_name>
            <topics>
                <li>wie Sie mit unbekannten Daten umgehen.</li>
                <li>wie Sie Pflichtfelder anlegen.</li>
                <li>unbekannte Daten wiederzufinden.</li>
            </topics>
            <h1>NULL-Marker</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir haben einige Seminare einzutragen, für die noch kein Preis feststeht. Kann ich das Feld leer lassen, oder soll ich 0 reinschreiben?</p>
            </hint>
            <p>Ein Seminarpreis von <i>0</i> würde bedeuten, dass das Seminar nichts kostet. Ein solches Seminar würde aber später auf der Seite als buchbar gelistet und ein Kunde könnte es kostenlos belegen – das ist sicherlich nicht im Sinne der Akademie.</p>
            <p>Deswegen müssen Sie in der Datenbank gezielt vermerken, dass der Preis noch nicht feststeht, d.h. unbekannt ist. Für diesen Fall hat SQL den Wert <code>NULL</code> vorgesehen. <code>NULL</code> ist nicht wirklich ein Wert, sondern eher eine Art Markierung. Sie können in ein Tabellenfeld statt eines Wertes NULL eintragen. Das hat die Bedeutung, dass das Feld zwar einen Wert besitzt, dieser jedoch unbekannt ist. Wenn also z.B. der Preis für das Seminar <i>Web Usability</i> noch nicht feststeht, lässt sich das folgendermaßen darstellen:</p>
            <table>
                <caption>Seminare mit NULLs</caption>
                <thead>
                    <tr>
                        <th>id</th>
                        <th>titel</th>
                        <th>beschreibung</th>
                        <th>preis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Ruby on Rails</td>
                        <td>Ruby on Rails ist das neue, sensationelle OpenSource-Framework, das auf der modernen…</td>
                        <td>2500,00</td>
                    </tr>
                    <tr>
                        <td>8</td>
                        <td>Web Usability</td>
                        <td>Webanwendungen wie etwa Online-Shops zeichnen sich durch eine Vielzahl …</td>
                        <td>
                            <b>NULL</b>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>NULL ist dabei nicht etwa der String 'NULL', sondern ein SQL-Schlüsselwort, das eben für einen unbekannten Wert steht. Deswegen können Sie NULL bei jedem beliebigen Datentyp verwenden.</p>
            <p>Fügen Sie das neue Seminar mit folgender Anweisung ein:</p>
            <blockcode type="sql" src="code/244.sql"/>
            <p>Die Tabellenzelle markiert den Preis für das neue Seminar mit <code>NULL</code>:</p>
            <blockcode type="sql" src="code/245.sql"/>
            <blockcode src="code/246.txt"/>
            <h1>NULL-Operatoren</h1>
            <p>Dass NULL kein Wert ist, sehen Sie daran, wie SQL NULL in Ausdrücken behandelt. Versuchen Sie alle Seminare auszugeben, deren Preis NULL ist.</p>
            <p>Ein erster Versuch könnte lauten:</p>
            <blockcode type="sql" src="code/247.sql"/>
            <blockcode src="code/248.txt"/>
            <p>Sie erhalten eine leere Ergebnismenge, da NULL kein Wert ist. Es gibt nichts, was gleich NULL sein kann. Das Ergebnis von <code>NULL = NULL</code> ist nicht <code>TRUE</code>, sondern <code>NULL</code>. Sie können es leicht ausprobieren mit</p>
            <blockcode type="sql" src="code/249.sql"/>
            <blockcode src="code/250.txt"/>
            <p>Woran liegt das?</p>
            <p>NULL ist kein Wert, sondern steht für einen unbekannten Wert. Da auf beiden Seiten der Gleichung NULL steht, bedeutet das, dass es sich um zwei unbekannte Werte handelt. Die beiden Werte könnten gleich sein, sie könnten aber auch verschieden sein – wir wissen es nicht. Deswegen lässt sich die Frage nach der Gleichheit weder mit <code>TRUE</code> (<code>1</code>) noch mit <code>FALSE</code> (<code>0</code>) beantworten. Sie erhalten wiederum <code>NULL</code>, d.h. <i>unbekannt</i> als Ergebnis.</p>
            <p>Dennoch kann es interessant sein, diese Anfrage zu stellen:</p>
            <ul>
                <li>
                    <i>Gib alle Seminare zurück, deren Preis noch nicht feststeht!</i>
                </li>
            </ul>
            <p>SQL bietet für solche Fälle speziellen Operatoren an:</p>
            <ul>
                <li>
                    <code>IS NULL</code>
                </li>
            </ul>
            <ul>
                <li>
                    <code>IS NOT NULL</code>
                </li>
            </ul>
            <p>Mittels</p>
            <blockcode type="sql" src="code/251.sql"/>
            <p>erhalten Sie alle Seminare, deren Preis unbekannt ist bzw. noch nicht feststeht.</p>
            <blockcode src="code/252.txt"/>
            <p>Die Anweisung</p>
            <blockcode type="sql" src="code/253.sql"/>
            <p>zeigt dagegen alle, für die ein Preis angegeben ist:</p>
            <blockcode src="code/254.txt"/>
            <h1>NULL-Marker für »nicht existent«</h1>
            <p>Neben der Bedeutung <i>unbekannt</i> setzen viele Entwickler NULL-Marker auch mit der Bedeutung <i>nicht existent</i> ein. Sollte beispielsweise ein Benutzer (d.h. Kunde) tatsächlich keine E-Mail-Adresse besitzen, so könnten Sie auch NULL in das entsprechende Feld eintragen.</p>
            <p>Nun kann die Anwendung aber nicht mehr unterscheiden zwischen Benutzern, deren E-Mail unbekannt ist, und solchen, die gar keine haben. Deswegen empfiehlt es sich, wenn möglich, stattdessen einen speziellen Wert zu verwenden. Sie könnten z.B.</p>
            <ul>
                <li>den String <i>n/a</i> (<i>not available</i>, engl. für <i>nicht verfügbar</i>)</li>
                <li>den String <i>keine E-Mail vorhanden</i></li>
                <li>oder einfach einen leeren String</li>
            </ul>
            <p>verwenden. Das ist aber auch nicht immer möglich – und schon gar nicht mit jedem Datentyp. Bei INTEGER z.B. verwenden Datenbankentwickler oft -1. Das ist natürlich nur möglich, falls die regulären Werte alle positiv sind. Außerdem birgt diese Technik ihre eigenen Gefahren, wie folgendes Beispiel zeigt.</p>
            <hint>
                <h3>Der NONE-Fahrer</h3>
                <p>Nicht bei allen Fahrzeugen, denen ein Strafzettel zugeordnet werden soll, kann das Kennzeichen festgestellt werden. Deswegen speicherte die Datenbank einer amerikanischen Polizeistation stattdessen in solchen Fällen den String »NONE« (keins) als Kennzeichen ab.</p>
                <p>Als dann später ein Autofahrer tatsächlich ein Kennzeichen mit der Buchstabenkombination »NONE« anmeldete, sandte ihm die Polizeistation mehrere tausend Strafzettel zu (gefunden bei Celko, 2005).</p>
            </hint>
            <p>In der Praxis ist es deswegen auch nicht unüblich, NULL in der Bedeutung <i>nicht existent</i> zu verwenden. Sie müssen es von Fall zu Fall abwägen. Außerdem kann es je nach Situation neben <i>unbekannt</i> und <i>nicht existent</i> weitere Zustände geben. Die Lösungen sind dementsprechend auch situationsabhängig. Sie sehen wieder einmal: Datenbankdesign ist ein kreativer Prozess!</p>
            <h1>NULL im relationalen Modell</h1>
            <p>Codd führte die NULL-Marker in der ersten Version des relationalen Modells ein. 1990 hat er eine neue Version des Modells vorgestellt, die zwei verschiedene Arten von NULL-Markern unterscheidet. Diese Version hat sich aber in der Praxis nie durchgesetzt, da sie logische Berechnungen und das Behandeln von NULL-Markern weiter verkompliziert.</p>
            <p>Aus der neusten Version des relationalen Modells haben Date und Darwen (2006) die NULL-Marker sogar gänzlich entfernt. Zuvor haben sie gezeigt, dass NULL-Marker auch zu erheblichen Problemen führen können.</p>
            <hint>
                <h3>Christopher sagt…</h3>
                <blockquote>
                    <p><!--nulls have no place in the relational model.-->NULL-Marker haben keinen Platz im relationalen Modell.</p>
                </blockquote>
            </hint>
            <p>Leider hat bisher noch kein Datenbankhersteller ein praxistaugliches DBMS entwickelt, das die neueste Version des Modells vollständig umsetzt. In der Praxis sind Sie deswegen in vielen Situationen auf NULL-Marker angewiesen.</p>
            <h1>Not-Null-Spalten</h1>
            <hint src="images/mitarbeiterin.jpg">
                <p>Einer unserer Mitarbeiter hat versehentlich ein Seminar ohne Titel eingetragen. Das macht natürlich keinen Sinn. Können Sie so etwas wie Pflichtfelder in der Datenbank hinterlegen, damit niemand mehr unvollständige Datensätze eingibt?</p>
            </hint>
            <p>Natürlich können Sie! Um eine Art Pflichtfeld zu erhalten, teilen Sie der Datenbank mit, dass die entsprechende Spalte kein NULL annehmen darf. Markieren Sie dazu die entsprechende Spalte in einer DDL-Anweisung als <code>NOT
          NULL</code>.</p>
            <p>Würde die Tabelle <i>seminare</i> noch nicht existieren, könnten Sie folgende Anweisung verwenden:</p>
            <blockcode type="sql" src="code/255.sql"/>
            <p>Da die Tabelle schon besteht und Sie keine Daten verlieren möchten, verwenden Sie stattdessen folgende ALTER-Anweisung – sinnvollerweise in einem Migrationsskript.</p>
            <figure>
                <blockcode type="sql" src="code/256.sql"/>
                <figcaption>003_markiere_seminare_titel_als_nn.sql</figcaption>
            </figure>
            <p>Wenn Sie nun noch mal versuchen, ein Seminar ohne Titel einzutragen, erhalten Sie eine Fehlermeldung:</p>
            <blockcode type="sql" src="code/257.sql"/>
            <blockcode src="code/258.txt"/>
            <p>Außerdem können Sie sich jederzeit anschauen, welche Spalten NULL-Marker enthalten dürfen und welche nicht:</p>
            <blockcode type="sql" src="code/259.sql"/>
            <blockcode src="code/260.txt"/>
            <p>Die Spalten, die bei NULL mit <i>NO</i> gekennzeichnet sind, sind NOT-NULL-Spalten und dürfen keine NULL-Markierungen aufnehmen. Die <i>id</i> ist übrigens auch eine NOT-NULL-Spalte, da für den Primärschlüssel NULL-Markierungen grundsätzlich nicht erlaubt sind.</p>
            <h1>NOT NULL in UML</h1>
            <p>Scott Ambler (2003) schlägt vor, <code>NOT NULL</code> im physischen Datenbankmodell mit Hilfe der <keyword>Object Constraint Language (OCL)</keyword> zu modellieren. Dazu müssen Sie <code>not null</code> jeweils hinter dem betreffenden Attribut in geschweiften Klammern angeben. Beachten Sie, dass <code>not null</code> in UML kleingeschrieben wird.</p>
            <figure width="40%">
                <img src="images/klassendiagramme/pm_seminare_mit_nn.png"/>
                <figcaption>Physisches Datenmodell mit NOT-NULL-Spalten</figcaption>
            </figure>
            <h1>Vorgeschlagene Vorgehensweise</h1>
            <p>Für das Design Ihrer Datenbank empfehle ich Ihnen, nach folgender Reihenfolge vorzugehen:</p>
            <ul>
                <li>Falls es möglich und sinnvoll ist, versuchen Sie, Attribute als <i>not null</i> zu markieren. Das vereinfacht die Handhabung und bringt zudem Performancevorteile (Schwartz et al., 2008).</li>
                <li>Falls es nötig ist, setzen Sie <code>NULL</code> mit der Bedeutung <i>unbekannt</i> ein. </li>
                <li>Falls es nötig ist, führen Sie für <i>nicht existent</i>, <i>nicht anwendbar</i> usw. spezielle Werte ein, wie z.B. den leeren String, <i>n/a</i> usw. (Celko, 2005).</li>
                <li>Erwägen Sie, NULL mit einer anderen Bedeutung als <i>unbekannt</i> einzusetzen. </li>
                <li>Finden Sie eine angemessene Lösung unter Abwägung der Vor- und Nachteile.</li>
            </ul>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>NULL-Marker stehen für unbekannte Werte.</li>
                <li>Sie können sie aber auch in anderer Bedeutung verwenden, z.B. als <i>nicht existent</i>.</li>
                <li>Spalten, die Sie als <code>NOT NULL</code> markiert haben, sind Pflichtfelder.</li>
                <li>Zum Abfragen von NULL-Werten benötigen Sie die Operatoren <code>IS NULL</code> und <code>IS NOT NULL</code>.</li>
            </ul>
            <h3>SQL: DDL</h3>
            <table>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabelle anlegen</td>
                        <td>
                            <code>
                CREATE TABLE tbl_name (create_definition, ...)

                create_definition:
                  col_name column_definition
                  | PRIMARY KEY (col_name, ...)
                  | UNIQUE KEY (col_name, ...)

                column_definition:
                  data_type [NOT NULL] [AUTO_INCREMENT] [UNIQUE KEY | PRIMARY KEY]
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Tabelle löschen</td>
                        <td><code>DROP TABLE tbl_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabellenschema ändern</td>
                        <td>
                            <code>
                ALTER TABLE tbl_name alter_specification [, alter_specification] ...

                alter_specification:
                  ADD col_name column_definition
                  | DROP col_name
                  | CHANGE old_col_name new_col_name column_definition
                  | RENAME TO new_tbl_name
              </code>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Was ergibt NULL = NULL in SQL?</p>
                        <p>Antwort: <blank>NULL</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Welches UML-Mittel benötigen Sie, um Attribute in einem Klassendiagramm als NOT NULL zu kennzeichnen? Wie lautet die Kennzeichnung genau?</p>
                        <p>Sie kennzeichnen die Attribute mit Hilfe der OCL als <blank>{not null}</blank>.</p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Überlegen Sie sich weitere Bedeutungen, für die Sie den NULL-Marker einsetzen könnten.</p>
                    </question_text>
                    <answer correct="correct"><i>Nicht anwendbar</i> – z.B. Ehepartner einer unverheirateten Person</answer>
                    <answer correct="correct"><i>Information noch nicht verfügbar</i> – z.B. Todesdatum bei einer lebenden Person</answer>
                    <answer correct="correct"><i>Information nicht mehr anwendbar</i> – z.B. Lebensdauer eines defekten Gerätes</answer>
                    <answer correct="correct"><i>Information nicht ermittelbar</i> – z.B. Eltern einer Waise</answer>
                </question>
               <!-- <question public="public" type="multiple_choice">
                    <!-\- rvh: korrekt, aber ist hier die neueste Version wirklich "neu" und aktuell?  -\->
                    <!-\- me: tja, das ist eine längere Diskussion..., angepasst auf dritte Version und Autor ergänzt-\->
                    <question_text>
                        <p>Welche Änderung ergibt sich bezüglich NULLs in der dritten Version des relationalen Modells? (<?oxy_comment_start author="tschneid" timestamp="20200224T183915+0100" comment="diese Frage hat nur drei Antwortoptionen"?>nach<?oxy_comment_end?> C.J. Date)</p>
                    </question_text>
                    <answer correct="correct">Sie sind nicht länger erlaubt.</answer>
                    <answer>Sie werden aufgeteilt in NULL und NONE.</answer>
                    <answer>Sie können parametrisiert werden mit ihrer spezifischen Bedeutung, z.B. N/A, Not Available, Not Allowed, ...</answer>
                </question>-->
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>NOT NULL Spalten</name>
                <content>
                    <p>Verwenden Sie für die beiden folgenden Änderungen ein Migrationsskript:</p>
                    <ol>
                        <li>Sorgen Sie dafür, dass keine Filme mehr ohne Erscheinungsjahr eingetragen werden können.</li>
                        <li>Machen Sie die Spalten <i>vorname</i> und <i>nachname</i> der Tabelle <i>regisseure</i> zu Pflichtfeldern.</li>
                    </ol>
                </content>
                <answer>Sie finden die Skripte im Begleitmaterial zu diesem Buch.</answer>
            </exercise>
            <exercise>
                <name>Abfrage mit NULL-Werten</name>
                <content>
                    <ol>
                        <li>Geben Sie alle Filme aus, bei denen keine Spieldauer angegeben ist.</li>
                        <li>Geben Sie alle Filme nach Spieldauer sortiert aus. Filme, die keine Spieldauer haben, sollen in dieser Auflistung nicht erscheinen.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT * FROM filme WHERE spieldauer IS NULL;</code>
                        </li>
                        <li>
                            <code>SELECT * FROM filme WHERE spieldauer IS NOT NULL ORDER BY
                spieldauer;</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Pflichtfelder im Projekt »Fluggesellschaft«</name>
                <content>
                    <p>Überlegen Sie sich sinnvolle Pflichtfelder für die Tabellen der Fluggesellschaft und schreiben Sie ein Migrationsskript, das die ensprechenden Spalten als NOT NULL markiert.</p>
                </content>
            </exercise>
            <exercise>
                <name>Pflichtfelder im Projekt »Partnervermittlung«</name>
                <content>
                    <p>Schreiben Sie ein Migrationsskript, um nun auch die Spalten der Partnervermittlung als NOT NULL auszuweisen, die Ihrer Meinung nach Pflichtfelder sein sollten.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Beziehungen im Domänenmodell</lesson_name>
            <topics>
                <li>wie Sie Beziehungen zwischen Entities herstellen.</li>
                <li>verschiedene Arten von Beziehungen zu unterscheiden.</li>
                <li>wie Sie Beziehungen in UML ausdrücken.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Jehnna: »Conan! Da sind sechs von ihnen gegen sie!«<br/> Conan: »Eins, zwei, drei, … Ich denke, Du hast recht.«</p>
                </blockquote>
                <figcaption>Arnold Schwarzenegger &amp; Grace Jones inConan der Zerstörer</figcaption>
            </figure>
            <hint src="images/mitarbeiterin.jpg">
                <p>Damit wir besser planen können, müssen wir für die Seminare noch Termine eintragen. Für jeden Seminartermin muss festgehalten werden, an welchem Tag das Seminar beginnt und an welchem es endet. Außerdem möchten wir wissen, in welchem Raum das Seminar zu diesem Termin stattfindet.</p>
                <p>In der Anwendung wollen wir ein Seminar wie z.B. »Datenbanken &amp; SQL« auswählen. Die Anwendung soll alle dazugehörigen Termine mit den entsprechenden Daten auflisten.</p>
            </hint>
            <h1>Beziehungen modellieren und benennen</h1>
            <p>Pflegen Sie diese neuen Anforderungen zunächst wieder im Domänenmodell ein. Das Resultat könnte folgendermaßen aussehen:</p>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_mit_termin.png"/>
                <figcaption>Domänenmodell mit der neuen Entity <i>Seminartermin</i></figcaption>
            </figure>
            <p>Damit Sie die Termine den jeweiligen Seminaren zuordnen können, benötigt das Modell noch eine Verbindung zwischen Seminaren und Seminarterminen. Dadurch können Sie auch die letzte Anforderung Ihrer Kundin umsetzen und zu jedem Seminar alle Termine auflisten. In der Datenbankentwicklung wird eine solche Verbindung zwischen zwei Entities <keyword>Beziehung</keyword> genannt (engl.: <keyword>Relationship</keyword>).</p>
            <p>In UML wird sie durch eine einfache Linie dargestellt. Sie können die Beziehung außerdem noch benennen. Für die Benennungen bieten sich Verben an, die in Verbindung mit den Entities einen Satz ergeben. Sie können also z.B. sagen:</p>
            <ul>
                <li>Ein Seminar <b>findet statt</b> zu einem Seminartermin.</li>
            </ul>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_mit_findet_statt.png"/>
                <figcaption>Domänenmodell mit der Beziehung <i>findet statt</i></figcaption>
            </figure>
            <p>Die Beziehung heißt entsprechend <i>findet statt.</i> Sie müssen übrigens nicht zusätzlich festhalten, wie das Seminar zum jeweiligen Termin heißt, welche Beschreibung es hat, was es kostet usw. Das ergibt sich jeweils aus der Beziehung.</p>
            <p>Nachdem Sie Ihrer Kundin das Diagramm gezeigt haben, fällt ihr noch etwas ein.</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Ach ja, wir möchten auch noch festhalten, welche Teilnehmer welche Seminare zu welchem Termin besuchen. Alle Teilnehmer registrieren sich entweder selbst oder werden von uns eingetragen. Deswegen sind alle Teilnehmer auch Benutzer. Es sollte doch kein Problem sein, diese zuzuordnen, oder?</p>
            </hint>
            <p>Auch hier benötigen Sie wieder eine Beziehung. Diesmal zwischen Benutzer und Seminartermin.</p>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_mit_nimmt_teil.png"/>
                <figcaption>Domänenmodell mit den Beziehungen <i>findet statt</i> und <i>nimmt teil</i></figcaption>
            </figure>
            <h1>Kardinalität</h1>
            <p>Für jede Beziehung müssen Sie noch eine sogenannte <keyword>Kardinalität</keyword> ermitteln. Die Kardinalität gibt an, in welcher Anzahl Einträge einander zugeordnet werden. Zu einem Seminar z.B. gehören mehrere Seminartermine, da das gleiche Seminar immer wieder mit neuen Gruppen zu anderen Terminen stattfindet. Aber zu jedem Seminartermin gehört nur ein Seminar. Ein Termin, wie z.B. der Datenbankenkurs vom 11.02.09 bis zum 14.02.09, kann nur zu einem Seminar gehören – dem Seminar <i>Datenbanken &amp; SQL</i>. Der Termin kann nicht gleichzeitig zum Seminar <i>Grundlagen der PHP-Programmierung</i> gehören.</p>
            <p>Für einen Datenbankentwickler ist es nicht wichtig, ob das Seminar dreimal, viermal oder 150-mal stattfindet. Es ist lediglich wichtig zu wissen, dass es mehr als einmal stattfinden kann. In dieser Hinsicht hat es ein Datenbankentwickler sogar einfacher als Conan, der Barbar. Conan kann nur bis drei zählen: »Eins, zwei, drei … ganz viele«. Ein Entwickler muss lediglich zwischen 1 oder mehreren unterscheiden. Eine solche Beziehung heißt <keyword>1:n-Beziehung</keyword> – gesprochen: <i>eins-zu-n-Beziehung</i>.</p>
            <p>Sie müssen jede Beziehung immer aus zwei Perspektiven betrachten – immer jeweils einmal aus der Sicht der beteiligten Entities. Deswegen ist es bei der 1:n-Beziehung wichtig, auf welcher Seite die <i>1</i> und auf welcher das <i>n</i> steht.</p>
            <p>Betrachten Sie nun noch die Beziehung zwischen Benutzern und Seminarterminen. Ein Benutzer kann mehrere Termine besuchen. Ein Termin wird von mehr als einer Person besucht. In diesem Fall liegt eine sogenannte <keyword>n:m-Beziehung</keyword> vor. Beide Buchstaben stehen jeweils für eine Zahl unbekannter Größe.</p>
            <p>Hier nochmal eine Übersicht über die Beziehungstypen:</p>
            <table>
                <caption>Beziehungen unterschiedlicher Kardinalität</caption>
                <thead>
                    <tr>
                        <th>Kardinalität der Beziehung</th>
                        <th>Beispiel</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1:n</td>
                        <td>Zu einem Seminar finden mehrere Seminarveranstaltungen statt. In jeder Seminarveranstaltung wird nur ein Seminar unterrichtet.</td>
                    </tr>
                    <tr>
                        <td>n:m</td>
                        <td>Ein Benutzer kann an mehreren Seminarveranstaltungen teilnehmen. In einer Seminarveranstaltung sitzen mehrere Benutzer.</td>
                    </tr>
                </tbody>
            </table>
            <p>In UML beschriften Sie die n-Seite einer Beziehung mit einem Stern »<code>*«</code>.</p>
            <figure width="60%">
                <img src="images/klassendiagramme/dm_mit_kardinalitaet.png"/>
                <figcaption>Domänenmodell mit Kardinalität</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Beziehungen stellen eine Verbindung zwischen Entities her.</li>
                <li>Die Namen von Beziehungen sind normalerweise Verben. Zusammen mit den dazugehörigen Entities einer Beziehung können Sie einen Satz bilden. </li>
                <li>Die Kardinalität gibt die Anzahl von Datensätzen an, die an einer Beziehung beteiligt sind.</li>
                <li>Beziehungen lassen sich anhand ihrer Kardinalität in 1:n und n:m unterteilen.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Stellen Sie sich vor, Sie modellieren einen Online-Shop. Welche Kardinalität würde Sie für die Beziehung zwischen <i>Kunde</i> und <i>Warenkorb</i> angeben?</p>
                        <p>Antwort:
                                <?oxy_comment_start author="admin" timestamp="20201020T144418+0200" comment="warum 1:n ? Ein Kunde hat doch nur einen Warenkorb oder soll davon ausgegangen werden, dass ein Kunde mehrere Warenkörbe haben kann ?"?><blank>1:n</blank><?oxy_comment_end ?></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Für eine E-Book-Software soll ein Tagging-System modelliert werden, mit Hilfe dessen den Büchern einzelne Tags wie <i>Roman</i>, <i>Fachbuch</i>, <i>Spannend</i>, <i>Einfach</i> und <i>Komplex</i> zugeordnet werden können. In welcher Beziehung stehen die Entities <i>Tag</i> und <i>Buch</i>?</p>
                        <p>Antwort: <blank>n:m</blank></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Warum wird die Kardinalität nicht genauer bestimmt, z.B. 1:7 statt 1:n?</p>
                    </question_text>
                    <answer>Man bräuchte mehrere Fremdschlüssel, um bestimmte feste Kardinalitäten abzubilden.</answer>
                    <answer correct="correct">Das wäre sehr unflexibel, da die genaue Kardinalität in der Praxis oft variiert.</answer>
                    <answer>Hohe Kardinalitäten würden später ein Performance-Problem verursachen.</answer>
                    <answer correct="correct">Es ist für die Datenbankentwicklung (Übertragung ins physische Datenbankmodell) nicht weiter wichtig.</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Beziehungen im Filmverleih</name>
                <content>
                    <blockquote>
                        <p>Wir benötigen nun die Möglichkeit, Filme anhand des Regisseurs zu suchen. Pro Film gibt es immer genau einen. Manche unserer Kunden möchten auch nach Schauspielern suchen. Die Schauspieler erfassen wir ebenfalls mit Vor-, Nachname und Geburtsdatum. Natürlich können in einem Film auch mehrere Schauspieler mitspielen.</p>
                    </blockquote>
                    <blockquote>
                        <p>Außerdem muss für jeden Film festgelegt werden, in welcher Preiskategorie (<i>günstig – 0,50 €</i>, <i>beliebt</i> – 1 € oder <i>neu – 2 €</i>) er sich befindet, damit wir Rechnungen schreiben können.</p>
                    </blockquote>
                    <ul>
                        <li>Erweitern Sie das Domänenmodell gemäß der obigen Kundenanforderungen.</li>
                        <li>Bestimmen Sie die Kardinalitäten.</li>
                        <li>Überlegen Sie, ob es eventuell Möglichkeiten gibt, schon bei der Modellierung Redundanzen zu vermeiden.</li>
                    </ul>
                </content>
                <answer>
                    <figure width="60%">
                        <img src="images/loesungen/beziehungen_im_domaenenmodell/film_verleih_mit_beziehungen_dm.png"/>
                    </figure>
                    <p>Die obige Lösung lässt sich weiter optimieren. Vielleicht ist Ihnen aufgefallen, dass Schauspieler und Regisseure strukturell identisch sind. In diesem Fall ist es auch möglich, eine gemeinsame Klasse zu bestimmen (<code>Person</code>) und diese mit <code>Film</code> in Beziehung zu setzen.</p>
                    <figure width="60%">
                        <img src="images/loesungen/beziehungen_im_domaenenmodell/film_verleih_mit_beziehungen_dm_2.png"/>
                    </figure>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Beziehungen bei der Fluggesellschaft</name>
                <content>
                    <p>Die Datenbank muss erfassen, welcher Pilot welchen Flugzeugtyp fliegen kann. Passen Sie das Domänenmodell entsprechend an.</p>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>1:n-Beziehungen in SQL</lesson_name>
            <topics>
                <li>was Fremdschlüssel sind und wie Sie sie in UML kennzeichnen.</li>
                <li>wie Sie 1:n-Beziehungen im relationalen Modell anlegen.</li>
                <li>wie Sie SELECTs über zwei Tabellen realisieren.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Beziehungen hat jeder, aber nicht jeder die richtigen.</p>
                </blockquote>
                <figcaption>Prof. Michael Marie Jung *1940, deutscher Hochschullehrer </figcaption>
            </figure>
            <p>Nachdem Sie die Beziehungen im Domänenmodell erstellt haben, ist es nun Ihr Ziel, sie ins physische Datenmodell zu übertragen. Erinnern Sie sich noch an die Übertragung der Entities vom Domänenmodell ins relationale Datenbankmodell? Falls nicht, werfen Sie doch noch mal einen Blick in <a href="#transformation_dm_pdm"/>. Nun ist es an der Zeit, auch die Beziehungen zu überführen. Bei den Beziehungen kommt es im Wesentlichen darauf an, welche Kardinalität vorliegt.</p>
            <p>Übertragen Sie zuerst die 1:n-Beziehungen. Im UML-Diagramm des physischen Datenbankmodells gibt es keine Verbindungslinien zwischen den Tabellen, da die Beziehungen hier nicht fest sind (siehe <a href="#transformation_beziehung_n1"/>). Stattdessen stellen Sie die gewünschten Verbindungen erst beim SELECT her. Sie benötigen dazu einen sogenannten <keyword>Fremdschlüssel</keyword> (<keyword>foreign key</keyword>).</p>
            <h1>Fremdschlüssel</h1>
            <p>Ein Fremdschlüssel ist ein Attribut (oder auch eine Menge von Attributen), das in einer anderen Tabelle Primärschlüssel ist. Sie erzeugen ihn aus dem Primärschlüssel der 1-Seite der Beziehung und fügen ihn der Tabelle der n-Seite hinzu. Für den Seminartermin bedeutet das, dass Sie die <i>id</i> der Seminare in der Tabelle <i>seminartermine</i> hinterlegen.</p>
            <p>Sie dürfen natürlich nicht zwei Attribute in der Tabelle haben, die beide <i>id</i> heißen. Deswegen hat sich eine Benennungsrichtlinie eingebürgert. Üblicherweise benennen Sie einen Fremdschlüssel nach folgendem Schema:</p>
            <blockcode src="code/261.txt"/>
            <p>Damit lautet der Fremdschlüssel hier <code>seminar_id</code>. In UML kennzeichnen Sie einen Fremdschlüssel durch den Zusatz <code>&lt;&lt;FK&gt;&gt;</code>.</p>
            <figure width="70%" id="transformation_beziehung_n1">
                <img src="images/klassendiagramme/transformation_beziehung_n1.png"/>
                <figcaption>Transformation einer 1:n-Beziehung</figcaption>
            </figure>
            <p>Wieso bildet der Fremdschlüssel die 1:n-Beziehung ab? Schauen Sie sich dazu ein paar Daten an:</p>
            <figure width="100%">
                <img src="images/data_in_1n.png"/>
                <figcaption>Daten in einer 1:n-Beziehung</figcaption>
            </figure>
            <p>Anhand des Fremdschlüssels <i>seminar_id</i> können Sie die Zusammenhänge erkennen. <i>seminar_id</i> dient jedem Termin als eine Referenz, die auf die <i>id</i> des jeweiligen Seminars verweist. So können Sie den Daten beispielsweise entnehmen, dass der Termin vom <b>20.06.2005</b> das Seminar <i>Datenbanken &amp; SQL</i> zum Inhalt hat. Zum <b>17.01.2005</b> findet stattdessen ein <i>JavaScript</i> -Seminar statt. Umgekehrt sehen Sie auch, dass es für das Seminar <i>Datenbanken &amp; SQL</i> 4 Termine gibt und für <i>JavaScript</i> 3.</p>
            <p>Nun wird deutlich, warum der Fremdschlüssel auf der n-Seite eingeordnet ist. Ein Seminar kann mehrere Termine haben. Technisch bedeutet das, dass mehrere Termindatensätze in der Spalte <i>seminar_id</i> den gleichen Wert haben können – d.h. sich auf das gleiche Seminar beziehen. Umgekehrt kann aber jeder Termin immer nur zu einem Seminar gehören, da Sie als <i>seminar_id</i> immer nur <b>eine</b> Zahl eintragen können.</p>
            <h1>Die 1:n-Beziehung in SQL</h1>
            <p>Verwirklichen Sie das physische Datenmodell nun mit SQL. Erzeugen Sie dazu die Tabelle <i>seminartermine</i> – einschließlich des Fremdschlüssels.</p>
            <figure>
                <blockcode type="sql" src="code/262.sql"/>
                <figcaption>004_erzeuge_seminarveranstaltungen.sql</figcaption>
            </figure>
            <p>Fügen Sie ein paar Beispieldaten mit folgendem Skript ein:</p>
            <figure>
                <blockcode type="sql" src="code/263.sql"/>
                <figcaption>seminartermine.sql</figcaption>
            </figure>
            <p>Durch die Beziehung, die Sie mit Hilfe des Fremdschlüssels hergestellt haben, können Sie die Daten der beiden Tabellen <i>seminare</i> und <i>seminartermine</i> nun auch in SQL verbinden (engl. <keyword>join</keyword>). Dazu benötigen Sie einen sogenannten <code>JOIN</code>. SQL weiß allerdings nicht automatisch, dass der Fremdschlüssel und der Schlüssel zusammengehören. Sie müssen das bei Ihrer Anfrage angeben. Dazu dient das SQL-Schlüsselwort <code>ON</code>. Zum Auflisten der Termine mit den zugehörigen Seminardaten schreiben Sie:</p>
            <blockcode type="sql" src="code/264.sql"/>
            <p>Hinter dem <code>FROM</code> haben Sie bisher immer nur eine Tabelle angegeben. In dieser SQL-Anweisung geben Sie nun zwei Tabellen an, die Sie mit <code>JOIN</code> verbinden. Die Bedingung hinter dem ON ist die sogenannte <keyword>Join-Bedingung</keyword>. Sie ordnet Fremd- und Primärschlüssel einander zu. Da Sie zwei Tabellen in der Anfrage verwenden, müssen Sie außerdem für jede Spalte angeben, in welcher Tabelle sie sich befindet. Dazu dient die <keyword>Punkt-Notation</keyword>. <code>seminare.id</code> meint die Spalte <i>id</i> aus der Tabelle <i>seminare</i>. Mit <code>seminartermine.seminar_id</code> ist entsprechend die Spalte <i>seminar_id</i> der Tabelle <i>seminartermine</i> gemeint. Genauso geben Sie hinter dem <code>SELECT</code> an, aus welcher Tabelle die Spalten kommen, die Sie in der Ergebnistabelle benötigen. Hier das Resultat:</p>
            <blockcode src="code/265.txt"/>
            <p>Wie Sie sehen, sind alle Termine gelistet – mit den benötigten Spalten (hier: <i>titel</i> und <i>preis</i>) des jeweiligen Seminars.</p>
            <h1>JOIN und WHERE</h1>
            <p>Natürlich lassen sich <code>JOIN</code> und <code>WHERE</code> kombinieren. Sie können somit z.B. folgende Suchanfrage stellen:</p>
            <ul>
                <li>Zeige mir alle Seminartermine, die in Schulungsraum 1 stattfinden bzw. stattfanden.</li>
            </ul>
            <p>Ergänzen Sie einfach die WHERE-Bedingung:</p>
            <blockcode type="sql" src="code/266.sql"/>
            <blockcode src="code/267.txt"/>
            <h1>BNF</h1>
            <p>Hier noch die erweiterte BNF von SELECT:</p>
            <figure>
                <blockcode src="code/268.txt"/>
                <figcaption>BNF von SELECT mit JOIN</figcaption>
            </figure>
            <p>Damit ist die BNF für SELECT nun komplett – zumindest für dieses Buch. Insgesamt bietet SQL noch mehr Möglichkeiten. Es können aber nicht alle im Rahmen dieser Einführung behandelt werden. Außerdem sind viele eher exotischer Natur und finden in der Praxis kaum Verwendung.</p>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>1:n-Beziehungen können Sie mit Hilfe von Fremdschlüsseln realisieren.</li>
                <li>Ein Fremdschlüssel entspricht dem Primärschlüssel einer anderen Tabelle.</li>
                <li>Mit einem JOIN können Sie Daten aus mehreren Tabellen abfragen.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Ein Fremdschlüssel, der auf eine <i>id</i> in der Tabelle <i>buecher</i> zeigt, heißt gemäß dem vorgestellten Namensschema <blank>buch_id</blank>.</p>
                    </question_text>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>1:n-Beziehungen im Filmverleih</name>
                <content>
                    <ul>
                        <li>Erweitern Sie das physische Datenbankmodell des Filmverleihs um die 1:n-Beziehungen aus Ihrem Domänenmodell.</li>
                        <li>Schreiben Sie ein neues Migrationsskript, das die 1:n-Beziehungen erzeugt.</li>
                    </ul>
                </content>
                <answer>
                    <figure width="70%">
                        <img src="images/loesungen/1n_beziehungen_in_sql/film_verleih_pm_1n.png"/>
                    </figure>
                    <p>Das Migrationsskript finden Sie im Begleitmaterial zu diesem Buch.</p>
                </answer>
            </exercise>
            <exercise>
                <name>Joins</name>
                <content>
                    <p>
                        <b>Hinweis:</b> Für die folgende Übung können Sie die Beispieldaten aus dem Übungsmaterial importieren.</p>
                    <p>DROP DATABASE filmverleih;</p>
                    <p>CREATE DATABASE filmverleih;</p>
                    <p>mysql -u root filmverleih &lt; filmverleih.sql</p>
                    <ol>
                        <li>Geben Sie alle Filme mit ihrem Regisseur aus.</li>
                        <li>Geben Sie die Titel aller Filme aus, bei denen <i>Peter Jackson</i> Regie geführt hat.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT filme.titel, regisseure.vorname, regisseure.name FROM filme JOIN regisseure ON
              filme.regisseur_id = regisseure.id;</code>
                        </li>
                        <li>
                            <code>SELECT filme.titel, regisseure.vorname, regisseure.name
              FROM filme JOIN regisseure ON filme.regisseur_id = regisseure.id
              WHERE CONCAT(regisseure.vorname, ' ', regisseure.name) = 'Peter Jackson';</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>n:m-Beziehungen in SQL</lesson_name>
            <topics>
                <li>wie Sie n:m-Beziehungen im relationalen Modell anlegen.</li>
                <li>wie Sie JOINs über beliebig viele Tabellen realisieren.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Auch in der Natur ist alles irgendwie geordnet, wenn auch in verschiedener Weise… Und es ist nicht so, dass eines beziehungslos neben dem anderen stünde, sondern überall gibt es Beziehungen. Auf ein Ziel hin ist alles in der Welt gerichtet.</p>
                </blockquote>
                <figcaption>Aristoteles</figcaption>
            </figure>
            <p>Nachdem Sie die 1:n-Beziehung erfolgreich übertragen haben, können Sie sich nun an die n:m-Beziehung wagen. Ein Fremdschlüssel reicht in diesem Fall aber leider nicht aus. Um eine n:m-Beziehung im relationalen Modell abzubilden, benötigen Sie eine <keyword>Zwischentabelle</keyword>.</p>
            <h1>Die Zwischentabelle</h1>
            <p>In der Zwischentabelle sortieren Sie die Fremdschlüssel der beiden beteiligten Tabellen ein. Als Name für die Tabelle bietet sich der Name der Beziehung an: <i>nimmt_teil</i>. Die Zwischentabelle benötigt auch keine eigene id. Stattdessen verwenden Sie einen Primärschlüssel, der sich aus den beiden Fremdschlüsseln zusammensetzt.</p>
            <figure width="70%">
                <img src="images/klassendiagramme/transformation_beziehung_nm.png"/>
                <figcaption>Transformation einer n:m-Beziehung</figcaption>
            </figure>
            <p>Beachten Sie bitte, dass es zwei Fremdschlüssel sind (<i>{seminartermin_id}</i> und <i>{benutzer_id}</i>), aber nur ein Primärschlüssel (<i>{benutzer_id, seminartermin_id}</i>) – zusammengesetzt aus zwei Attributen.</p>
            <p>Betrachten Sie folgendes Beispiel:</p>
            <figure width="100%">
                <img src="images/data_in_nm.png"/>
                <figcaption>Daten in einer n:m-Beziehung</figcaption>
            </figure>
            <p>Die Tabellen <i>benutzer</i> und <i>seminartermine</i> sind durch die Zwischentabelle <i>nimmt_teil</i> und deren Fremdschlüssel miteinander verbunden. Sie sehen z.B. anhand der Zwischentabelle, dass Herr Reich die Seminartermine vom 07.11.2005 und vom 31.05.2005 belegt hatte. Genauso können Sie auch ablesen, dass zum Seminartermin vom 07.11.2005 neben Herrn Reich auch Frau Huana und Herr Meisenbär im Schulungsraum 2 saßen. Mit Hilfe der Zwischentabelle lassen sich auf diese Weise beliebige Beziehungen darstellen.</p>
            <h1>Die n:m-Beziehung in SQL</h1>
            <p>Verwirklichen Sie die neue Beziehung nun wiederum mit SQL. Erzeugen Sie dazu die Zwischentabelle <i> nimmt_teil</i>.</p>
            <figure>
                <blockcode type="sql" src="code/269.sql"/>
                <figcaption>005_erzeuge_nimmt_teil.sql</figcaption>
            </figure>
            <p>Fügen Sie ein paar Beispieldaten mit folgendem Skript ein:</p>
            <figure>
                <blockcode type="sql" src="code/270.sql"/>
                <figcaption>nimmt_teil.sql</figcaption>
            </figure>
            <p>Um beim SELECT die Verbindung wieder herzustellen, müssen Sie alle drei Tabellen mit JOIN verbinden. Zudem benötigen Sie nun zwei Join-Bedingungen:</p>
            <blockcode type="sql" src="code/271.sql"/>
            <blockcode src="code/272.txt"/>
            <h1>n:m-Beziehungen in Entities überführen</h1>
            <p>In einigen Fällen ist es notwendig, dass Beziehungen selbst wiederum Attribute führen. Betrachten Sie dazu folgende Anforderung:</p>
            <hint src="images/mitarbeiterin.jpg">
                <p>Wir haben festgestellt, dass wir nun verpflichtet sind, für jeden Teilnehmer die Anwesenheit zu erfassen. In Zukunft müssen wir für jeden Teilnehmer (d.h. Benutzer) eintragen, wie viele Stunden er ein bestimmtes Seminar besucht hat.</p>
            </hint>
            <p>Die Information, wie viele Stunden ein Teilnehmer ein Seminar besucht hat, lässt sich zweifellos in einem Attribut vom Typ INTEGER speichern. Aber in welcher Tabelle hinterlegen Sie das Attribut?</p>
            <p>Würden Sie es beim Benutzer hinterlegen, so ließe sich nicht mehr feststellen, auf welchen Seminartermin es sich bezieht. Hinterlegen Sie es beim Seminartermin, ist unklar, welcher Benutzer gemeint ist.</p>
            <p>Sie benötigen den Bezug zu beiden Tabellen. Die klassische Lösung ist deswegen, das Attribut der Beziehung zuzuordnen. Das würde bedeuten, die Zwischentabelle <i>nimmt_teil</i> erhält eine neue Spalte <i>anwesenheit_in_stunden</i>.</p>
            <p>Leider lässt sich das jedoch im UML-Diagramm des Domänenmodells nur schwer darstellen. Außerdem sorgt dieses Konzept für Ärger beim objekt-relationalen Mapping. Deswegen ist es üblich, bei solchen oder ähnlichen Problemen die Beziehung in ein Entity zu überführen. Statt der Beziehung <i>nimmt teil</i> entwerfen Sie das Entity <i>Teilnahme</i>. Diesem können Sie problemlos das neue Attribut zuordnen und haben später auch keine Schwierigkeiten beim Mapping. Zusätzlich benötigen Sie noch zwei 1:n-Beziehungen, die die Verbindung zu den anderen Entities herstellen. Die n-Seite dieser Beziehung liegt dann immer beim neu entstandenen Entity.</p>
            <figure width="70%">
                <img src="images/klassendiagramme/transformation_teilnahme.png"/>
                <figcaption>Transformation einer Entity, die aus einer n:m-Beziehung entstandenen ist</figcaption>
            </figure>
            <p>Das resultierende physische Modell ist dem ursprünglichen recht ähnlich. Was im ursprünglichen Modell eine Zwischentabelle ist, die aus einer Beziehung entstanden ist, ist hier eine simple Entity-Tabelle. Beim OR-Mapping ergeben sich dann später aber handfeste Vorteile.</p>
            <h1>BNF</h1>
            <p>Die BNF für ein SELECT mit mehreren JOINs ist etwas komplexer, da Sie jetzt für jedes JOIN eine Tabellenreferenz einsetzen dürfen, die wiederum aus einem JOIN bestehen kann. Diese Konzept wird als <keyword>rekursive Definition</keyword> bezeichnet. Sie können somit JOINs beliebig oft verschachteln.</p>
            <figure>
                <blockcode src="code/273.txt"/>
                <figcaption>BNF von SELECT mit mehreren JOINs</figcaption>
            </figure>
            <h1>Zusammenfassung</h1>
            <ul>
                <li>Eine n:m-Beziehung können Sie mit Hilfe einer Zwischentabelle abbilden.</li>
                <li>Der Primärschlüssel der Zwischentabelle setzt sich aus den beiden Fremdschlüsseln zu den beteiligten Tabellen zusammen. </li>
                <li>Beziehungen können selbst Attribute haben; aber besser ist es, solche Beziehungen als Entity darzustellen.</li>
            </ul>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" public="public" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie viele JOINs benötigen Sie, um eine einfache n:m-Beziehung abzufragen?</p>
                    </question_text>
                    <answer>1</answer>
                    <answer correct="correct">2</answer>
                    <answer>3</answer>
                    <answer>4</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <!-- rvh: korrekt -->
                    <question_text>
                        <p>Wie viele JOINs sind in einer SELECT-Anweisung prinzipiell möglich?</p>
                    </question_text>
                    <answer>0 bis 2</answer>
                    <answer>0 bis 3</answer>
                    <!--<answer>0 bis 4</answer>-->
                    <answer>1 bis 2</answer>
                    <answer>1 bis 3</answer>
                    <answer correct="correct">beliebig viele</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>n:m-Beziehungen im Filmverleih</name>
                <content>
                    <ul>
                        <li>Erweitern Sie das physische Datenbankmodell des Filmverleihs um die n:m-Beziehungen aus Ihrem Domänenmodell.</li>
                        <li>Schreiben Sie ein neues Migrationsskript, das die n:m-Beziehungen erzeugt.</li>
                    </ul>
                </content>
                <answer>
                    <figure width="100%">
                        <img src="images/loesungen/nm_beziehungen_in_sql/film_verleih_pm_nm.png"/>
                    </figure>
                    <p>Das Migrationsskript finden Sie im Begleitmaterial zu diesem Buch.</p>
                </answer>
            </exercise>
            <exercise>
                <name>Joins</name>
                <content>
                    <p>
                        <b>Hinweis:</b> Für die folgende Übung können Sie die Beispieldaten aus dem Übungsmaterial importieren.</p>
                    <ol>
                        <li>Geben Sie Filme mit hinterlegten Schauspielern aus.</li>
                        <li>Geben Sie alle Filme aus, in denen Christian Bale mitspielt.</li>
                    </ol>
                </content>
                <answer>
                    <ol>
                        <li>
                            <code>SELECT filme.titel, personen.vorname, personen.name FROM filme JOIN
                spielt ON spielt.film_id = filme.id JOIN personen ON spielt.schauspieler_id =
                personen.id;</code>
                        </li>
                        <li>
                            <code>SELECT filme.titel, personen.vorname, personen.name FROM filme JOIN
                spielt ON spielt.film_id = filme.id JOIN personen ON spielt.schauspieler_id =
                personen.id WHERE CONCAT(personen.vorname, ' ', personen.name) = 'Christian
                Bale';</code>
                        </li>
                    </ol>
                </answer>
            </exercise>
            <h1>Zusatzübungen</h1>
            <exercise>
                <name>Beziehungen bei der Fluggesellschaft</name>
                <content>
                    <ul>
                        <li>Übertragen Sie die n:m-Beziehung aus Ihrem Domänen-Modell in ein physisches DB-Modell.</li>
                        <li>Entwickeln Sie ein Migrationsskript, das die n:m-Beziehung aus dem physischen Modell in der Datenbank verwirklicht.</li>
                    </ul>
                </content>
            </exercise>
            <exercise>
                <name>Beziehungen bei der Fluggesellschaft: Flugstunden</name>
                <content>
                    <p>Die Fluggesellschaft möchte nun noch genauer wissen, welcher Pilot wie viel Erfahrung mit welchem Flugzeugtyp hat. Dazu ist es notwendig, die Flugstunden zu erfassen, die ein Pilot auf einem bestimmten Flugzeugtyp gesammelt hat.</p>
                    <ul>
                        <li>Passen Sie Ihr Domänenmodell an, um das zu ermöglichen.</li>
                        <li>Übernehmen Sie die Änderungen ins physische Modell.</li>
                        <li>Schreiben Sie ein Migrationsskript, das die Änderungen durchführt.</li>
                    </ul>
                </content>
            </exercise>
            <exercise>
                <name>Beziehungen bei der Fluggesellschaft: Redundanzen</name>
                <content>
                    <p>Haben Sie mehrere Arten von Flugstunden in Ihrer Datenbank? Falls ja, ist ihr DB-Design noch redundanzbehaftet. Entfernen Sie die Redundanz:</p>
                    <ul>
                        <li>Verbessern Sie Ihr Domänenmodell.</li>
                        <li>Passen Sie Ihr physisches Datenbankmodell an.</li>
                        <li>Entwickeln Sie ein entsprechendes Migrationsskript.</li>
                        <li>Überlegen Sie sich die SELECT-Anweisungen, die nötig sind, um alle Informationen zu erhalten.</li>
                    </ul>
                </content>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Anhang A: Befehlsübersicht</lesson_name>
            <table>
                <caption>BNF</caption>
                <thead>
                    <tr>
                        <th>Konzept</th>
                        <th>Darstellung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Terminale</td>
                        <td>Wort in Großbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Nichtterminale (Variablen)</td>
                        <td>Wort in Kleinbuchstaben</td>
                    </tr>
                    <tr>
                        <td>Wiederholung</td>
                        <td>...</td>
                    </tr>
                    <tr>
                        <td>Verschachtelte Definition</td>
                        <td>:</td>
                    </tr>
                    <tr>
                        <td>Optional</td>
                        <td>[]</td>
                    </tr>
                    <tr>
                        <td>Alternativ</td>
                        <td>|</td>
                    </tr>
                </tbody>
            </table>
            <table>
                <caption>Utility- und Administrations-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbanken auflisten</td>
                        <td><code>SHOW DATABASES</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank wechseln</td>
                        <td><code>USE database_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabellen der aktuellen DB anzeigen</td>
                        <td><code>SHOW TABLES</code></td>
                    </tr>
                    <tr>
                        <td>Spalten einer Tabelle anzeigen</td>
                        <td><code>SHOW COLUMNS FROM tbl_name</code></td>
                    </tr>
                </tbody>
            </table>
            <table>
                <caption>DDL-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datenbank anlegen</td>
                        <td><code>CREATE DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Datenbank löschen</td>
                        <td><code>DROP DATABASE db_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabelle anlegen</td>
                        <td>
                            <code>
                CREATE TABLE tbl_name (create_definition, ...)

                create_definition:
                  col_name column_definition
                  | PRIMARY KEY (col_name, ...)
                  | UNIQUE KEY (col_name, ...)

                column_definition:
                  data_type [NOT NULL] [AUTO_INCREMENT] [UNIQUE KEY | PRIMARY KEY]

                data_type:
                  BOOLEAN | INTEGER | DECIMAL(length[,decimals]) | DATE
                  | TIME | DATETIME | YEAR | VARCHAR(length) | TEXT
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Tabelle löschen</td>
                        <td><code>DROP TABLE tbl_name</code></td>
                    </tr>
                    <tr>
                        <td>Tabellenschema ändern</td>
                        <td>
                            <code>
                ALTER TABLE tbl_name alter_specification [, alter_specification] ...

                alter_specification:
                    ADD col_name column_definition
                  | DROP col_name
                  | DROP PRIMARY KEY
                  | DROP KEY key_name
                  | CHANGE old_col_name new_col_name column_definition
                  | RENAME TO new_tbl_name
              </code>
                        </td>
                    </tr>
                </tbody>
            </table>
            <table>
                <caption>DML-Anweisungen</caption>
                <thead>
                    <tr>
                        <th>Zweck</th>
                        <th>BNF</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Datensätze auslesen</td>
                        <td>
                            <code>
                SELECT [DISTINCT] select_expr [AS alias_name] [,select_expr [AS alias_name] ...]
                [FROM table_reference]
                [WHERE where_condition]
                [ORDER BY col_name [ASC | DESC], ...]
                [LIMIT [offset,] row_count]

                table_reference: table_name | join_table
                join_table: table_reference JOIN table_name [join_condition]
                join_condition: ON conditional_expr
              </code>
                        </td>
                    </tr>
                    <tr>
                        <td>Datensatz einfügen</td>
                        <td><code>INSERT INTO tbl_name (col_name, ...) VALUES (value, ...)</code></td>
                    </tr>
                    <tr>
                        <td>Datensätze ändern</td>
                        <td>
                            <code>UPDATE table_name SET col_name1 = value1 [, col_name2 = value2] [WHERE where_condition]</code>
                        </td>
                    </tr>
                    <tr>
                        <td>Datensätze löschen</td>
                        <td><code>DELETE FROM table_name [WHERE where_condition]</code></td>
                    </tr>
                </tbody>
            </table>
        </lesson>
        <lesson>
            <lesson_name>Anhang B: Agilität in der Webentwicklung</lesson_name>
            <topics>
                <li>welche Rolle agile Vorgehensmodelle in der Webentwicklung spielen.</li>
                <li>warum Sie auf Wasserfälle allergisch reagieren sollten.</li>
                <li>was iterativ-inkrementell bedeutet.</li>
            </topics>
            <h3>Agile Vorgehensmodelle</h3>
            <p>In der Softwareentwicklung gibt es zwei extreme Vorgehensweisen. Entweder Sie folgen einem bis ins kleinste Detail ausgearbeiteten Plan, oder Sie haben überhaupt keinen Plan und programmieren einfach »wild drauflos«. Bernd Oestereich (1998) nennt das die <keyword>VHIT-Methode</keyword> – Vom Hirn ins Terminal. Beide Extreme sind nicht gerade zu empfehlen.</p>
            <p>Wenn Sie sich sofort auf den Code stürzen, verschwenden Sie meistens viel Zeit mit falschen Ansätzen, oder laufen gar in Sackgassen und Ihr Code lässt sich nicht mehr stabil weiterentwickeln. Oder Sie programmieren einfach tolle Features – die dann aber niemand wirklich braucht. Mit ein wenig Planung kann das alles vermieden werden.</p>
            <p>Das andere Extrem besteht darin, alles detailliert zu planen und genaue Methoden und Handlungsanleitungen vorzugeben. Das Ergebnis sind aber meist große Vorschriftenkataloge, Formalismen und Bürokratie. Ein Freund von mir hat bei einem großen Elektrokonzern Steuerungssoftware für medizinische Geräte programmiert. Er drückte das mal folgendermaßen aus:</p>
            <blockquote>
                <p>Wir warten nur noch darauf, dass wir ein Formular ausfüllen müssen, wenn wir auf die Toilette gehen.</p>
            </blockquote>
            <p>Zu viele Formalismen vernichten massiv wertvolle Entwicklungszeit. Die <keyword>Agile Softwareentwicklung</keyword> bevorzugt dagegen einen Mittelweg, der nur so viel Plannung, Dokumentation und Formalismen verwendet, wie es für das Projektergebnis nützlich ist. Die wichtigsten Grundsätze beschreibt das <i>Manifesto for Agile Software Development</i>, das 17 bekannte Entwickler und Forscher – unter anderem Martin Fowler – 2001 in Utah verfassten <a href="http://agilemanifesto.org">(Beck et al., 2001)</a>:</p>
            <ul>
                <li>
                    <p>Menschen und Interaktionen sind wichtiger als Prozesse und Werkzeuge.</p>
                </li>
                <li>
                    <p>Laufende Systeme sind wichtiger als umfassende Dokumentation.</p>
                </li>
                <li>
                    <p>Die Zusammenarbeit mit dem Kunden ist wichtiger als Vertragsverhandlungen.</p>
                </li>
                <li>
                    <p>Die Fähigkeit, auf Änderungen zu reagieren, ist wichtiger als das Verfolgen eines Plans.</p>
                </li>
            </ul>
            <blockquote>
                <p>Auch wenn die Punkte auf der rechten Seite wichtig sind, so erachten wir doch die Punkte auf der linken Seite als wichtiger.</p>
            </blockquote>
            <p>Ich möchte diese Sätze hier einfach mal so stehen lassen. Es gibt noch sehr viel mehr zum agilen Vorgehen zu sagen, das würde aber den Rahmen hier sprengen.  Deswegen möchte ich Sie an dieser Stelle auf weiterführende Literatur verweisen:</p>
            <ul>
                <li>Hruschka P. , Rupp C., Starke G. (2003). Agility kompakt: Tipps für erfolgreiche Systementwicklung. Spektrum Akademischer Verlag. </li>
                <li>Hunt A., Subramaniam V. (2006). Practices of an Agile Developer. The Pragmatic Programmers.</li>
                <li>Highsmith J. (2002). Agile Software Development Ecosystems. Pearson Education.</li>
                <li>Wallace D., Ragget I., Aufgang J. (2003). Extreme Programming for Web Projects. XP Series. Addison-Wesley. </li>
                <li><?oxy_comment_start author="admin" timestamp="20201020T144605+0200" comment="die Seite gibt es nicht mehr (404)"?><a href="http://www.martinfowler.com/articles/newMethodology.htm">Fowler M.
                        (2005). The New Methology</a>.<?oxy_comment_end ?></li>
                <li>Der deutsche <a href="http://de.wikipedia.org/wiki/Agile_Softwareentwicklung">Wikipedia Artikel über Agile Softwareentwicklung</a></li>
            </ul>
            <p>Es gibt außerdem eine Reihe <keyword>Agiler Vorgehensmodelle</keyword>, die jeweils einen Prozess für die Softwareentwicklung beschreiben. Hier eine kleine Auswahl:</p>
            <ul>
                <li>Crystal Clear</li>
                <li>Extreme Programming (XP)</li>
                <li>Feature Driven Development (FDD)</li>
                <li>ICONIX</li>
                <li>Scrum</li>
            </ul>
            <p>Welcher Prozess sich für Ihr Projekt am besten eignet, ist vor allem vom Entwicklerteam, der Beziehung zum Kunden, den Umgebungsbedingungen und der Art des Projektes abhängig.</p>
            <p>Generell bin ich der Meinung, dass es kaum Projekte gibt, die nicht von einem agilen Vorgehensmodell profitieren können. Die Ausnahme könnten Projekte mit sehr großen Entwicklungsteams oder extrem hohen Sicherheitsanforderungen sein (z.B. militärische Steuerungssoftware für Helikopter). Gerade Webprojekte sind ganz besonders für eine agile Vorgehensweise geeignet. Sowohl Anforderungen als auch verwendete Technologien entwickeln sich im Webbereich mit rasanter Geschwindigkeit. Wo für klassische Business-Software Entwicklungszyklen von 6 Monaten und mehr nichts Ungewöhnliches sind, werden im Web wesentlich kürze Zyklen verlangt. Die Anforderungen an eine Webanwendung ändern sich ständig, so wie sich der Markt und die Technologien ändern. Die meisten klassischen Vorgehensmodelle (z.B. V-Modell, Wasserfall) betrachten solche Änderungen als Störung. Sind bestimmte Plannungsphasen abgeschlossen, können Änderungswünsche nicht mehr (oder nur noch mit sehr hohem Aufwand) berücksichtigt werden. Für agile Vorgehensmodelle ist die Veränderung dagegen Normalität. Responding to change over following a plan (zu deutsch: »Auf Änderungen zu reagieren ist wichtiger als einem Plan zu folgen.«), heißt es im Agile Manifesto (Beck et al. 2001). Embrace Change (zu deutsch: »Umarme die Veränderung«, oder besser sinngemäß »Begrüße die Veränderung«) ist sogar der Leitspruch des Extreme Programmings (Beck &amp; Andres 2004).</p>
            <p>Auch wenn ich hier agile Vorgehensmodelle nicht umfassend erläutern kann, so gibt es doch einen Aspekt, der für datenbankbasierte Webanwendungen eine besonders wichtige Rolle spielt. Die Rede ist vom sogenannten <keyword>Iterativ-Inkrementellen Vorgehen</keyword>.</p>
            <h3>Das iterativ-inkrementelle Vorgehen</h3>
            <p>Das iterativ-inkrementelle Vorgehen zeichnet jedes agile Vorgehensmodell aus. Auch wenn sich die verschiedenen agilen Vorgehensmodelle in vielen Punkten unterscheiden, so ist das iterative-inkrementelle Vorgehen in jedem dieser Modelle ein wichtiges Kernkonzept – zumindest ist mir kein agiles Vorgehensmodell bekannt, auf das das nicht zutrifft. Da dieses Vorgehen die klassische Entwicklung datenbankbasierter Webanwendungen geradezu auf den Kopf stellt, möchte ich es hier etwas ausführlicher erläutern. Es war einmal …</p>
            <h3>Das Wasserfallmodell</h3>
            <p>Lange Zeit war das sogenannte <keyword>Wasserfallmodell</keyword> von
                    <?oxy_comment_start author="admin" timestamp="20201020T144659+0200" comment="ich kann auf diese Seite nicht zugreifen (403)"?><a href="http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf">Dr.
                    Winston W. Royce (1970)</a><?oxy_comment_end ?> das am weitesten verbreitete
                Modell der Softwareentwicklung. Es geht auf das noch ältere Phasenmodell von
                Bennington (1956) zurück. Royce erkannte schon damals die Probleme des Modells und
                führte viele Verbesserungen an – die die meisten Firmen dann jedoch völlig
                ignorierten.<br/>Mehr zur Entstehung des Wasserfallmodells finden Sie bei <a href="http://cartoon.iguw.tuwien.ac.at/fit/fit01/wasserfall/entstehung.html">Rerych M. (2002)</a>.</p>
            <p>Wie genau funktioniert das Wasserfallmodell?</p>
            <p>Im Wasserfallmodell gibt es verschiedene aufeinander folgende Phasen. Eine Phase muss abgeschlossen sein, bevor die nächste beginnt. Jede Phase produziert ein Ergebnis, das als Ausgangspunkt der folgenden Phase gilt. Typischerweise und bestenfalls erstellen die Entwickler in Zusammenarbeit mit dem Kunden in der ersten Phase <i>Aufnahme der Anforderungen</i> ein Pflichten- und/oder Lastenheft. Dieses dient dann als Ausgangspunkt für das softwaretechnische Design. Ergebnisse des Designs sind meist Diagramme und Richtlinien. Leider kann es auch passieren, dass der Kunde das Heft selbst erstellt oder eine externe Firma beauftragt. Die Entwickler erhalten es dann – schlimmstenfalls kommentarlos – und müssen rätseln, wie die Anforderungen genau zu verstehen sind.<br/> Danach erfolgt die eigentliche Implementierung, die das Design nun »nur noch« umsetzen soll. Die Phasen aus Royce' ursprünglichem Wasserfall waren wie folgt (Entnommen aus <a href="http://en.wikipedia.org/wiki/Waterfall_model">Wikipedia</a>):</p>
            <ol>
                <li>Aufnahme der Anforderungen (Requirements) </li>
                <li>Design </li>
                <li>Implementierung/Programmierung (Implementation) </li>
                <li>Integration </li>
                <li>Testen und Fehlerbereinigung (Verification) </li>
                <li>Installation </li>
                <li>Wartung (Maintenance) </li>
            </ol>
            <figure width="70%">
                <img src="images/waterfall.png"/>
                <figcaption>Eine verkürzte Variante des Wasserfallmodells<br/> entnommen aus Wikipedia (<a href="http://en.wikipedia.org/wiki/Waterfall_model">en.wikipedia.org/wiki/Waterfall_model</a>)</figcaption>
            </figure>
            <hint>
                <p>Das <i>Standard-Wasserfallmodell</i> der NASA verwendete einen alternativen Phasenplan, den Sie im <a href="http://web.archive.org/web/20040403211247/http://asd-www.larc.nasa.gov/barkstrom/public/The_Standard_Waterfall_Model_For_Systems_Development.htm">Webarchive</a> einsehen können.</p>
            </hint>
            <p>Wenn Sie das Wasserfallmodell auf ein datenbankbasiertes Webprojekt anwenden, erhalten Sie beispielsweise folgende Phasen:</p>
            <ol>
                <li>Aufnahme der Anforderungen (Ergebnis: Konzeptionelles Datenbank-Diagramm) </li>
                <li>Logisches Datenbank-Design </li>
                <li>Physisches Datenbank-Design </li>
                <li>Website-Konzeption </li>
            </ol>
            <p>In der Praxis sind außerdem Datenbankentwicklung und Anwendungsentwicklung oft getrennt. Es gibt Datenbankspezialisten auf der einen Seite und Softwareentwickler auf der anderen. Jede Gruppe befasst sich nur mit ihrem jeweiligen Teil der Anwendung. Oder schlimmer noch: Die Datenbank wurde gar nicht für diese Anwendung entwickelt, sondern enthält allgemeine Firmendaten. Die Anwendung muss dann »irgendwie« nachträglich auf diese zugreifen.</p>
            <p>Unabhängig davon, bringt das Wasserfallmodell selbst auch einige erhebliche Nachteile mit sich.</p>
            <h3>Nachteile des Wasserfallmodells</h3>
            <ul>
                <li>Änderungen sind kostspielig.</li>
            </ul>
            <p>Änderungswünsche, die der Auftraggeber erst spät im Projektverlauf äußert, können sehr kostspielig sein. Für jede Änderung ist das Modell zurückzufahren. Die Änderung muss alle einzelnen Phasen von Anfang bis Ende durchlaufen. Durch die hohen Abhängigkeiten in der Softwareentwicklung müssen dann (je nach Umfang der Änderung) meist große Teile des Codes umgeschrieben werden.</p>
            <ul>
                <li>Fehlendes Feedback aus der Benutzung</li>
            </ul>
            <p>Erst am Ende des Projekts liegt ein funktionsfähiges Produkt vor. Erst dann kann ein Benutzer das Produkt testen und Erfahrung sammeln. Diese Erkenntnisse kann das Wasserfallmodell aber nicht mehr berücksichtigen – oder nur in Form kostspieliger Änderungen einfließen lassen.</p>
            <p>Dabei ist dem Auftraggeber aber meist zu Beginn des Projektes noch nicht bewusst, welche Features er tatsächlich benötigt und wie sich diese am besten bedienen lassen.</p>
            <ul>
                <li>Fehlendes Feedback aus der Implementierung</li>
            </ul>
            <p>Ob ein bestimmtes Softwaredesign funktioniert, stellt sich oft erst bei der Programmierung heraus. Dann ist es aber zu spät, diese Änderungen im Design zu berücksichtigen – das Design ist bereits abgeschlossen.</p>
            <ul>
                <li>Unrealistische Schätzungen</li>
            </ul>
            <p>Aufwandsschätzungen, die auf einem Pflichtenheft basieren, sind meistens völlig unrealistisch. Sie müssten schon Hellseher sein, wenn Sie Aufwände über ein mehrmonatiges Projekt genau schätzen und planen wollen.</p>
            <ul>
                <li>Time to Market</li>
            </ul>
            <p>Die fertige Webanwendung ist erst dann einsetzbar, wenn sie alle Phasen durchlaufen hat. D.h. bei einer Projektgröße von ca. sechs Monaten kann es ohne Weiteres sein, dass Sie Ihrem Auftraggeber in den ersten fünf Monaten nur Diagramme und Powerpoint-Folien vorführen können.</p>
            <p>Trotz der bekannten Nachteile und Probleme wenden traditionell veranlagte Firmen auch heute noch das Wasserfallmodell an. Oft wird es nicht als Wasserfallmodell bezeichnet oder versteckt sich hinter anderen, gut klingenden Bezeichnungen. Im Kern ist es aber dann dennoch ein Wasserfall. Sollten Sie das Pech haben, in einer solchen Firma zu arbeiten, kann ich Ihnen nur Scott Amblers Rat ans Herz legen.</p>
            <hint>
                <h3>Scott sagt…</h3>
                <blockquote>
                    <p>Change your job or change your job (Ändern Sie Ihre Firma oder wechseln Sie Ihre Firma).</p>
                </blockquote>
            </hint>
            <h3>Funktionsweise des iterativ-inkrementellen Vorgehens</h3>
            <p>Nachdem Sie nun wissen, was Sie besser unterlassen, sollen Sie natürlich auch erfahren, was eine vernünftige Vorgehensweise ausmacht.</p>
            <p>Das Kernproblem des Wasserfallmodells besteht darin, dass es versucht, die ganze Komplexität eines Projektes auf einmal zu verdauen. So wird z.B. verlangt, dass alle Anforderungen bei Projektstart schon komplett verstanden und ausgearbeitet sind. In der Praxis moderner Webanwendungen sind aber bei Projektstart immer noch viele Fragen offen. Außerdem ist niemand perfekt. Auch Ihr Auftraggeber kann sich irren. Was sich heute wie eine sehr gute Idee anhört, kann in der Praxis sehr schlecht oder eventuell auch gar nicht funktionieren. Wenn Ihr Auftraggeber komplexe Features ausarbeitet, ist es hilfreich, wenn er die Anwendung schon einmal in der Praxis ausprobiert hat und sich nicht eine komplexe Anwendung vollständig im Kopf vorstellen muss.</p>
            <p>Das Gleiche gilt auch für Architektur und Design Ihrer Webanwendung. Wenn Sie ein Softwaredesign für die ganze Anwendung erstellen, müssen Sie auch Bereiche, in denen noch Unsicherheiten bezüglich der Anforderungen und der technischen Realisierung vorliegen, bereits vollständig ausarbeiten. Dieses Problem wird als <keyword>BDUF</keyword> (<keyword>Big Design Up Front-</keyword> zu deutsch: Zuviel Design am Anfang) bezeichnet. Oftmals lernen Sie erst bei der Implementierung, wie gut bestimmte Aspekte Ihres Designs funktionieren. Beim iterativ-inkrementellen Vorgehen können Sie solche gewonnenen Erfahrungen einsetzen.</p>
            <p>Arbeiten Sie in kleinen Schritten. Statt die komplette Anwendung auf einen Schlag zu konzipieren, konzipieren Sie nur einen kleinen Teil der Anwendung. Designen Sie dann auch nur einen kleinen Teil – und implementieren Sie schließlich nur diesen kleinen Teil. Sie können noch unklare Bereiche später bearbeiten, wenn Sie mehr wissen. Am wichtigsten ist jedoch, dass Sie Ihrem Auftraggeber schon nach kurzer Zeit einen kleinen – aber voll funktionstüchtigen! – Teil der Anwendung zeigen können. Er sieht, wie gut seine Ideen in der Praxis funktionieren. Deswegen kann er schon sehr früh Änderungswünsche äußern. Neue Features lassen sich auf Grund der gewonnenen Erfahrungen gezielter ausarbeiten.</p>
            <p>Im Grunde genommen gibt es die Phasen des Wasserfallmodells immer noch. Das Projekt durchläuft diese Phasen aber nicht nur einmalig und im Ganzen, sondern mehrmals in kleinen Schritten. Sie beginnen mit einigen Anforderungen, die Sie als Kernfeatures identifizieren. Nach der Anforderungsanalyse designen Sie den kleinen Teil Ihrer Anwendung, der diese Anforderungen abdeckt. Danach programmieren Sie diesen Teil und lieferen ihn an den Auftraggeber aus. Der kann den ersten Teil der Anwendung schon ausprobieren und mit mehr Erfahrung neue Features ausarbeiten. Der Zyklus beginnt erneut. Ein solcher Zyklus, in dem das Projekt alle Phasen einmal durchläuft, heißt <keyword>Iteration</keyword>. Dadurch, dass in jeder Iteration dem Projekt etwas neues hinzugefügt wird, können Sie sagen: In jeder Iteration wächst das Projekt um ein <keyword>Inkrement</keyword>. So setzt sich der Name der iterativ-inkrementellen-Vorgehensweise zusammen.</p>
            <p>Das Beispielprojekt dieses Buchs wird nicht alle Phasen durchlaufen, die ein reales Projekt durchläuft. Insbesondere ist es von der Wahl des konkreten Vorgehensmodells (RUP, XP, Scrum etc.) abhängig, welche Phasen es gibt, und wie und wann Sie zwischen diesen wechseln. In vielen agilen Modellen ist keine bestimmte Reihenfolge vorgegeben. Im XP z.B. gibt es nicht einmal Phasen, es lässt sich dort nur zwischen der Aufnahme der Anforderungen (Planning Game) und der Implementierung unterscheiden. Unser Beispielprojekt setzt kein bestimmtes Vorgehensmodell ein. Sie werden es aber iterativ-inkrementell entwickeln.</p>
            <p>Gehen Sie also bitte nicht davon aus, dass die in den Beispielen vorgestellten Aktivitäten und deren Reihenfolge zwingend sind. Sie stellen lediglich eine mögliche und außerdem unvollständige Vorgehensweise dar. Sie können sie aber als Einstiegspunkt adaptieren und später in ein Vorgehensmodell Ihrer Wahl einbinden.</p>
            <h3>Iterativ-inkrementelles Lernen im Spiralcurriculum</h3>
            <p>Ähnlich wie für das Entwickeln eines Projektes, ist es auch für das Lernen hilfreich, wenn Sie nicht einen riesigen Wissensbrocken auf einmal verdauen müssen. Sinnvoller ist es, kleine Teile zu lernen, diese auszuprobieren und schließlich zu meistern. Dann können Sie immer auf Ihrem bisherigen Stand aufbauen, um dann später Ihr Wissen und Ihre Fähigkeiten zu vertiefen und zu ergänzen. Das didaktische Konzept, das dem iterativ-inkrementellen Vorgehen am nächsten kommt, ist das <keyword>Spiralcurriculum</keyword> nach Bruner. Es dient als didaktischer Leitfaden dieses Buches und bietet mir die Möglichkeit, Ihnen die Webentwicklung in einer Reihenfolge zu vermitteln, die Sie auch in einem realen Projekt anwenden können. Im Sinne des Spiralcurriculums erkläre ich manche Themen oft erst einmal vereinfacht, um sie dann später zu vertiefen.</p>
            <assignment>
                <name>Weiterentwicklung einer Game-Community-Datenbank</name>
                <content>
                    <h3>Einführung</h3>
                    <p>Ihr Kunde ist Geschäftführer einer kleinen, aber im deutschsprachigen Raum sehr etablierten Game-
                        Community. Bisher besteht die Community im wesentlichen aus einem Forum und einem Bereich mit
                        Spieleberichten. Es gibt eine Handvoll von Autoren, die diese Berichte schreiben. Die Datenbanken für
                        normale Autoren und Benutzer waren bisher getrennt. Der Kunde hat nun einige neue Anforderungen,
                        die ein Überarbeiten der Datenbankstruktur erfordern.</p>
                    <h3>Bestehende Datenbank</h3>
                    <p>Hier sehen Sie das DDL der bestehenden Datenbank:</p>
                    <blockcode src="code/274.txt"/>
                    <h3>Aufgabe</h3>
                    <p>Entwickeln Sie ein Migrationsskript, dass die alte Struktur in eine neue überführt – entsprechend den
                        neuen Kundenanforderungen (siehe unten). Achten Sie darauf, dass die neue Struktur alle Daten der
                        alten speichern kann – solange das nicht im Widerspruch mit den neuen Anforderungen steht. Außerdem
                        sollten Sie die Migration so verlustfrei wie möglich gestalten. Versuchen Sie also, bestehende
                        Daten beizubehalten. Sie müssen jedoch keine Datenmigration durchführen.
                        Achten Sie beim Migrationsskript vor allem darauf, dass die SQL-Anweisungen keine überflüssigen
                        Informationen enthalten, wie z.B. Zeichenkodierung oder Storage Engine.</p>
                    <h3>Anforderungen</h3>
                    <p>Der Kunde formuliert folgende Anforderungen:</p>
                    <ul>
                        <li>Autoren sollen keinen getrennten Login mehr haben. Sie loggen sich zukünftig auf der gleichen Seite
                            ein wie normale Benutzer. Normale Benutzer haben natürlich dennoch kein Recht, Artikel zu verfassen.
                            <b>Hinweis</b>: Integrieren Sie dazu die Autoren in die Tabelle users. Mit Hilfe eines Attributes is_author
                            schaffen Sie die Grundlage zur Überprüfung des Autorenrechts.</li>
                        <li>Ein Benutzer oder Autor meldet sich nicht mehr mit seiner E-Mail-Adresse, sondern einem dafür neu
                            eingeführten Benutzernamen (user_login_name) an.</li>
                        <li>Die Idee, dass ein Artikel sich auf mehrere Spiele beziehen kann, hat sich nicht bewährt. In Zukunft
                            bezieht sich jeder Artikel immer auf ein bestimmtes Spiel. Zu einem Spiel kann es aber, nach wie vor,
                            mehrere Artikel geben. </li>
                        <li>Benutzer dürfen künftig ein Bild von sich hochladen (das Bild muss nicht in der Datenbank selbst
                            gespeichert werden). </li>
                        <li>Bestehende Forenposts dürfen noch 5 Minuten lang vom Poster geändert werden — danach nicht
                            mehr.</li>
                        <li>In Zukunft soll jeder Benutzer gleich sehen können, welche Forenbeiträge (Posts) er sich bereits angeschaut
                            hat.</li>
                        <li>Die alte Datenbank hat praktisch keine Validierungen integriert (leere Namen, doppelte E-Mail-
                            Adressen etc.).</li></ul>
                    <h3>Häufige Fragen</h3>
                    <ul><li>Soll dass Migrationsskript den neuen Stand des Datenbankschemas erzeugen oder das bestehende
                        Schmema in das neue Überführen?<br/>
                        Letzteres. Sie können das Skript testen, in dem Sie das SQL der besthenden Datenbank einfach aus
                        diesem Dokument übernehmen und auf einer leeren Datenbank ausführen. Auf dem resultierenden
                        Schema muss das Migrationsskript fehlerfrei laufen.</li>
                        <li>Sollen die Daten selbst auch migriert werden oder nur das Schema?<br/>
                            Das Schema reicht aus. In der Praxis würden Sie natürlich auch die Daten migrieren, aber das ist nicht
                            Teil dieser Aufgabe.</li>
                        <li>Werden ALTER- oder CREATE-Statements benötigt?<br/>
                            Bei einer Migration von einem alten Stand auf einen neuen können grundsätzlich beide Arten von
                            Statements (und weitere) benötigt werden - überwiegend allerdings eher ALTER-Statements.</li>
                    </ul>
                </content>
                 <answer>
                    <p>Musterlösung</p>
                    <a href="https://github.com/Cosnavel/webmasters-sample-solutions/tree/master/sql_datenbanken">https://github.com/Cosnavel/webmasters-sample-solutions/tree/master/sql_datenbanken</a>
                </answer>
                <criteria>
                    <criterion type="boolean" weight="5">physisches Datenbankmodell: ist vorhanden</criterion>
                    <criterion type="boolean" weight="5">Domänenmodell: ist vorhanden </criterion>
                    <criterion type="boolean" weight="10">Domänenmodell: ist größtenteils vollständig und korrekt (Anforderungen und UML-Syntax) </criterion>
                    <criterion type="boolean" weight="10">physisches Datenbankmodell: ist größtenteils vollständig und korrekt (Transformation vom DM und UML-Syntax) </criterion>
                    <criterion type="boolean" weight="30">Migrationskript: läuft fehlerfrei auf der bestehenden Datenbank </criterion>
                    <criteria_group>
                        <criteria_group_name>Anforderungen (im Migrationsskript prüfen) </criteria_group_name>
                        <criterion type="boolean" weight="1">A1: zusätzliches Attribut 'is_author' vom Typ BOOLEAN in users </criterion>
                        <criterion type="boolean" weight="1">A1: Attribut 'area_of_expertise' von authors in users übertragen </criterion>
                        <criterion type="boolean" weight="1">A1: Die Tabelle 'authors' wurde gelöscht  </criterion>
                        <criterion type="boolean" weight="1">A2: zusätzliches Attribut 'user_login_name' in users  </criterion>
                        <criterion type="boolean" weight="1">A3: Die Tabelle 'article_is_about_games' wurde gelöscht  </criterion>
                        <criterion type="boolean" weight="1">A3: In articles wurde ein Fremdschlüssel auf games ergänzt </criterion>
                        <criterion type="boolean" weight="1">A4: zusätzliches Attribut zum Hochladen von Bildern (z.B. VARCHAR für Bildpfad oder BLOB) in users </criterion>
                        <criterion type="boolean" weight="1">A5: zusätzliches Attribut vom Typ DATETIME in posts  </criterion>
                        <criterion type="boolean" weight="1">A6: neue Verbindungstabelle zwischen users und posts </criterion>
                        <criterion type="boolean" weight="1">A7: mindestens zwei sinnvolle NOT NULL Constraints </criterion>
                        <criterion type="boolean" weight="1">A7: mindestens ein sinnvoller UNIQUE-Constraint  </criterion>
                    </criteria_group>
                    <criterion type="boolean" weight="5">Migrationsskript: Das SQL ist technisch gelungen (keine überflüssigen Anweisungen, kein Generat aus PhpMyAdmin) </criterion>
                    <criterion type="boolean" weight="5">Domänenmodell und phy. DB-Modell sind vollständig und korrekt (Anforderungen und UML-Syntax, Pefektionsbonus!) </criterion>
                </criteria>
                <submission_instructions>  <p>Reichen Sie bitte folgende Dokumente ein:</p>
                    <ul>
                        <li>ein Domänenmodell, das die neuen Anforderungen abdeckt, als UML-Klassendiagramm (im Datei-
                            Format PNG).</li>
                        <li>ein daraus abgeleitetes physisches Datenbankmodell als UML-Klassendiagramm (im Datei-Format
                            PNG).</li>
                        <li>ein SQL-Migrationsskript, das die alte DB-Struktur in die neue überführt.</li></ul>
                </submission_instructions>
            </assignment>
        </lesson>
        <lesson>
            <lesson_name>Anhang C: Quellen &amp; Literaturhinweise</lesson_name>
            <h1>APA-Style</h1>
            <p>Zum Aufzeigen von Referenzen, Quellen und weiterführender Literatur verwende ich den sogenannten <keyword>APA-Style</keyword>. Der APA-Style ist – unter anderem – ein System zum Kennzeichnen von Referenzen. Entwickelt wurde dieses System von der <i>American Psychological Association</i> (APA).</p>
            <p>Unter <a href="http://en.wikipedia.org/wiki/Apa_style">https://en.wikipedia.org/wiki/Apa_style</a> können Sie sich noch genauer informieren. Eine APA-Style-Referenz besteht meist aus Nachname und Jahreszahl. Hier sehen Sie zwei Beispiele.</p>
            <h3>Beispiel</h3>
            <ul>
                <li>
                    <blockquote>
                        <p>Generell lässt sich sagen, dass die meisten Webanwendungen Datenbanken grundsätzlich zur persistenten Speicherung verwenden (Fowler, 2003b).</p>
                    </blockquote>
                </li>
                <li>
                    <blockquote>
                        <p>Ambler (2006) zeigt, dass es neben der technischen Kluft auch eine kulturelle gibt.</p>
                    </blockquote>
                </li>
            </ul>
            <p>In beiden Fällen beziehen sich die Angaben auf Quellen aus dem Referenzteil. Wenn Sie hinten im Referenzteil nachschlagen, finden Sie Folgendes:</p>
            <p>Die erste Referenz ist eine Internetquelle, die zweite ein Buch. Bei Internetquellen gebe ich Ihnen im Text oder in einer Fußnote meist nochmal die URL an oder verzichte sogar auf den Apa-Style-Verweis. Dadurch können Sie die Seite direkt besuchen, ohne erst nachschlagen zu müssen. Außerdem lagere ich Quellenangaben oft vollständig in die Fußnote aus, um den Textfluss nicht zu stören.</p>
            <h1>Quellen</h1>
            <p><b>Ambler S. W. (2003)</b> Agile Database Techniques: Effective Strategies for the Agile Software Developer. John Wiley &amp; Sons.</p>
            <p><b>Ambler S. W., Sadalage P. (2006)</b> Refactoring Databases: Evolutionary Database Design. Addison Wesley Professional.</p>
            <p><b>Ambler S. W. (Homepage)</b> Scott W. Ambler's Home Page. Betrachtet am 28.08.2008 unter <a href="http://www.ambysoft.com/scottAmbler.html">www.ambysoft.com/scottAmbler.html</a>.</p>
            <p><b>Ambler S.W. (August 2006)</b> A UML Profile for Data Modeling. Agile Data Home Page. Betrachtet am 11.02.2009 unter <a href="http://www.agiledata.org/essays/umlDataModelingProfile.html">http://www.agiledata.org/essays/umlDataModelingProfile.html</a>.</p>
            <p><b>Ainsworth S. (2009)</b> Buchbesprechung im O'Reilly Online-Shop, siehe <a href="http://shop.oreilly.com/product/9780596523084.do">shop.oreilly.com/product/9780596523084.do</a>.</p>
            <p><b>Aslett M. (2012)</b> MySQL vs. NoSQL and NewSQL - survey results. Präsentation auf Slideshare. Siehe <a href="http://www.slideshare.net/mattaslett/mysql-vs-nosql-and-newsql-survey-results-13073043">www.slideshare.net/mattaslett/mysql-vs-nosql-and-newsql-survey-results-13073043</a>.</p>
            <p><b>Beck K., Beedle M., van Bennekum A., Cockburn A., Cunningham W., Fowler M., Grenning J., Highs- mith J., Hunt A., Jeffries R., Kern J., Marick B., Robert C. M., Mellor S., Schwaber K., Sutherland J., Thomas D. (2001)</b>. Manifesto for Agile Software Development. Website, siehe <a href="http://agilemanifesto.org">agilemanifesto.org</a>.</p>
            <p><b>Beck K., Andres C. (November 2004)</b> Extreme Programming Explained: Embrace Change, Second Edition. Addison Wesley Professional.</p>
            <p><b>Bennington (Juni 1956)</b> Production of Large Computer Programs. In: Proceedings of the ONR Symposium on Advanced Programming Methods for Digital Computers, Seite 15.</p>
            <p><b>Braun F. (Februar 2007)</b> Grammar Types. Homepage von Frank Braun an der
                Universität Regensburg. Betrachtet am 10.09.2008 unter
                    <?oxy_comment_start author="admin" timestamp="20201020T144812+0200" comment="die Seite gibt es nicht mehr (404)"?><a href="http://www-cgi.uni-regensburg.de/~brf09510/grammartypes.html">www-cgi.uni-regensburg.de/~brf09510/grammartypes.html</a>.<?oxy_comment_end ?></p>
            <p><b>Campbell-Kelly M. (Mai 2003)</b> Edgar Codd – Computer programmer who saw
                others profit from his inventing the relational database. Artikel in The Independent
                (online-Zeitschrift). Betrachtet am 09.09.2008 unter
                    <?oxy_comment_start author="admin" timestamp="20201020T144853+0200" comment="die Siete gibt es nicht mehr"?><a href="http://www.independent.co.uk/news/obituaries/edgar-codd-730256.html">www.independent.co.uk/news/obituaries/edgar-codd-730256.html</a>.<?oxy_comment_end ?></p>
            <p><b>Celko Joe (2005)</b> SQL Programming Style. Elsevier, Morgan Kaufmann Publishers.</p>
            <p><b>Codd E. F. (1969)</b> Derivability, Redundancy, and Consistency of Relations Stored in Large Data Banks. IBM Research Report RJ599.</p>
            <p><b>Codd E. F. (Juni 1970)</b> A Relational Model of Data for Large Shared Data Banks. Communications of the ACM Volume 13, Issue 6: 377–387. Siehe <a href="http://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf">www.seas.upenn.edu/~zives/03f/cis550/codd.pdf</a>.</p>
            <p><b>Darrow B. (2004)</b> Ted Codd, Chris Date. Online Artikel im CRN-Magazin.
                Veröffentlicht: 10.12.2004, siehe
                    <?oxy_comment_start author="admin" timestamp="20201020T144949+0200" comment="die Seite gibt es nicht mehr (404)"?><a href="http://www.crn.com/news/channel-programs/55300688/ted-codd-chris-date.htm">www.crn.com/news/channel-programs/55300688/ted-codd-chris-date.htm</a><?oxy_comment_end ?>.</p>
            <p><b>Date C .J. (2004)</b> An Introduction into Database Systems. 8th Edition, Pearson Education Inc.</p>
            <p><b>Date C. J. (2005)</b> Database in Depth – Relational Theory for Practitioners. O'Reilly.</p>
            <p><b>Date C. J., Darwen H. (2007)</b> Databases, Types and the Relational Model – The Third Manifesto. 3rd Edition, Addison Wesley, siehe auch <a href="http://thethirdmanifesto.com">thethirdmanifesto.com</a>.</p>
            <p><b>Date C. J. (2007)</b> Fachwörterbuch Relationale Datenbanken – kurz &amp; gut. O'Reillys Taschenbibliothek. Deutsche Ausgabe von The Relational Database Dictonary (O'Reilly Media Inc. 2006).</p>
            <p><b>Endlich S. (2012)</b> The State of NoSQL. Fachartikel auf InfoQ.com. Betrachtet am 07.03.2013 unter <a href="http://www.infoq.com/articles/State-of-NoSQL">www.infoq.com/articles/State-of-NoSQL</a>.</p>
            <p><b>Fowler M., Beck K., Brant J., Opdykeet. W. (1999)</b> Refactoring, Improving the Design of Existing Code, Amsterdam: Addison-Wesley Longman.</p>
            <p><b>Fowler M. (2002)</b> Patterns of Enterprise Application Architecture. Amsterdam: Addison-Wesley Longman.</p>
            <p><b>Fowler, M. (Februar 2003a)</b> Domain Logic and SQL. Martin Fowlers persönliche Homepage. Betrachtet am 04.09.2008 unter <a href="http://www.martinfowler.com/articles/dblogic.html">www.martinfowler.com/articles/dblogic.html</a>.</p>
            <p><b>Fowler M. (April 2003b)</b> About Martin Fowler. Martin Fowlers persönliche Homepage. Betrachtet am 31.08.2008 unter <a href="http://martinfowler.com/aboutMe.html">martinfowler.com/aboutMe.html</a>.</p>
            <p><b>Fowler M. (2006)</b> Keynote der RailsConf 2006. Betrachtet am 31.08.2008 unter <a href="http://www.scribemedia.org/2006/07/03/rails-martin-fowler">www.scribemedia.org/2006/07/03/rails-martin-fowler</a>.</p>
            <p><b>Gornik D. (Mai 2002)</b> UML Data Modeling Profile. TP 162. Rational Software. IBM.</p>
            <p><b>Haigh T. (Juni 2007)</b> Oral History of C. J. Date (Interview). Mountain View, California: Computer History Museum. X4090. 2007, siehe <a href="http://www.computerhistory.org/collections/accession/102658166">http://www.computerhistory.org/collections/accession/102658166</a>.</p>
            <p><b>Horstmann J. (Februar 2006)</b> Freie Datenbanken im Unternehmenseinsatz –
                Analyse und Vergleich der wichtigsten Open-Source-Datenbanken. Artikel auf
                OpenHeise, Heise Verlags-Website. Betrachtet am 09.09.2008 unter
                    <?oxy_comment_start author="admin" timestamp="20201020T145035+0200" comment="die Seite gibt es nicht mehr (404)"?><a href="http://www.heise.de/open/Freie-Datenbanken-im-Unternehmenseinsatz-Ein-Vergleich--/artikel/70100/0">www.heise.de/open/Freie-Datenbanken-im-Unternehmenseinsatz-Ein-Vergleich--/artikel/70100/0</a>.<?oxy_comment_end ?></p>
            <p><b>Kellerwessel H. (2002)</b> Programmierrichtlinien in der Praxis. MITP.</p>
            <p><b>Muller R. J. (1999)</b> Database Design for Smarties: Using UML for Data Modelling. Morgan Kaufmann Publishers.</p>
            <p><b>MySQL AB (2008)</b> MySQL 5.1 Reference Manual. Erhältlich in der jeweils aktuellsten Version unter <a href="http://dev.mysql.com/doc">dev.mysql.com/doc</a>.</p>
            <p><b>Oestereich B. (1998)</b> Objektorientierte Softwareentwicklung: Analyse und Design mit der Unified Modeling Language. 4. aktualisierte Auflage. München, Wien: Oldenburg. siehe <a href="http://www.oose.de/uml">www.oose.de/uml</a>.</p>
            <p><b>Oshineye A. (März 2007)</b> Bild von Martin Fowler auf der Flicker Website, heruntergeladen am 31.08.2008 von <a href="http://www.flickr.com/photos/38234898@N00/423039025">www.flickr.com/photos/38234898@N00/423039025</a>.</p>
            <p><b>Rerych M. (2002)</b> Entstehungskontext. Studentischer Artikel in fit 2002 &gt; Softwareentwicklungsmodelle &gt; Wasserfallmodell. Institut für Gestaltungs- und Wirkungsforschung. Technische Universität Wien. Betrachtet am 10.09.2008 unter <a href="http://cartoon.iguw.tuwien.ac.at/fit/fit01/wasserfall/entstehung.html">cartoon.iguw.tuwien.ac.at/fit/fit01/wasserfall/entstehung.html</a>. Hinweis: Dieses Bild unterliegt der Creative Commons 2.0 Attribution-Lizenz14 und darf im Rahmen dieser Lizenz frei verwendet werden.</p>
            <p><b>Raymond E. S. (September 2000)</b> The Cathedral and the Bazaar. Artikel auf Eric S. Raymond's Home Page unter <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar">http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar</a>.</p>
            <p><b>Royce W. W. (August 1970)</b> Managing the development of large software systems:
                concepts and techniques. International Conference on Software Engineering
                Proceedings of the 9th international conference on Software Engineering,1987,
                Monterey, California, United States. Neudruck der Pro- ceedings, IEEE WESCON, Seiten
                1-9. Institute of Electrical and Electronics Engineers. Siehe
                    <?oxy_comment_start author="admin" timestamp="20201020T145135+0200" comment="ich kann auf diese Seite nicht zugreifen (403)"?><a href="http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf">www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf</a>.<?oxy_comment_end ?></p>
            <p><b>SQL Industry News (Juni 2007)</b> Gartner Says Worldwide Relational Database Market Increased 14 Percent in 2006. Nachrichtenartikel von SQL Industry News auf der SQL Manager.net-Website von EMS Database Management Solutions, Inc. Originalquelle: Gartner Dataquest (June 2007). Betrachtet am 09.09.2008 unter <a href="http://www.sqlmanager.net/en/news/sql/1189">www.sqlmanager.net/en/news/sql/1189</a>.</p>
            <p><b>Schwartz B., Zaitsev P., Tkachenko V., Zawodny J.D., Lentz A., Balling D.J. (2008).</b> High Performance MySQL 2nd Edition, O'REILLY.</p>
            <p><b>Sparks G. (1999)</b> Database Modelling in UML. Veröffentlicht in Methods &amp;
                Tools e-newsletter. Siehe
                    <?oxy_comment_start author="admin" timestamp="20201020T145216+0200" comment="die Seite gibt es nicht mehr (404)"?><a href="http://www.martinig.ch/mt/index.html">http://www.martinig.ch/mt/index.html</a><?oxy_comment_end ?> und <a href="http://www.sparxsystems.com.au">http://www.sparxsystems.com.au</a>.</p>
            <p><b>Spicer J. (July/August 2003)</b> Edgar (Ted) Codd, 1923-2003, Remembering the
                father of the relational database. Artikel auf der Oracle Hompage, betrachtet am
                08.09.2008 auf
                    <?oxy_comment_start author="admin" timestamp="20201020T145250+0200" comment="die Seite gibt es nicht mehr"?><a href="http://www.oracle.com/technology/oramag/oracle/03-jul/o43edit.html">www.oracle.com/technology/oramag/oracle/03-jul/o43edit.html</a>.<?oxy_comment_end ?></p>
            <p><b>Standish Group International Inc. (1994) The Chaos Report Teorey T., Lightstone S., Nadeau T. (2006)</b> Database Modelling and Design. 4th Edition, Morgan Kaufmann.</p>
            <h1>Empfehlungen</h1>
            <p>Codd und Date sind sicherlich die beiden bekanntesten und einflussreichsten Forscher im Bereich der relationalen Datenbanken. Ambler und Fowler dagegen gelten als Pioniere des objekt-relationalen Mappings (ORM) und haben mit ihren Arbeiten auch die agile Softwareentwicklung stark mitgeprägt.</p>
            <p>Das Lehrwissen dieses Skriptes stammt von diesen vier Wissenschaftlern und Praktikern und vielen weiteren, die sicherlich auch eine eigene Vorstellung verdient hätten. Aus Platzgründen kann ich aber leider nun eine kleine Auswahl treffen.</p>
            <p>Einen Tipp kann ich Ihnen an dieser Stelle aber noch mit auf den Weg geben:</p>
            <hint>
                <p>Lesen Sie die Originale!</p>
            </hint>
            <p>Viele Bücher – gerade im Datenbankenbereich – verfälschen Definitionen und Aussagen. Oftmals versuchen Autoren aus didaktischen Gründen, Vereinfachungen einzuführen, die dann aber leider manchmal schlicht falsch sind. Andere Autoren zitieren Codd oder Date und fehlinterpretieren deren Aussagen. Auch sehr geläufig ist Folgendes: Ein Autor übernimmt eine Aussage eines anderen, der diese von einem anderen hat, der Codd oder Date gelesen hat. Kennen Sie das Kinderspiel <i>Stille Post</i>?</p>
            <p>Ich kann Ihnen nur ans Herz legen: Verlassen Sie sich nicht nur auf mein Wort. Gehen Sie den Referenzen nach und lesen Sie wichtige Prinzipien noch mal im Original.</p>
            <p>Sollten Sie in dieser Unterlage Fehler finden, bin ich für Hinweise und Korrekturvorschläge natürlich auch dankbar.</p>
            <p>Hier nun die wichtigsten Originalquellen, die für diesen Kurs relevant sind:</p>
            <ul>
                <li>Codds ursprüngliches Paper <i>A Relational Model of Data for Large Shared Data Banks</i> (Codd, 1970). Es ist fast 40 Jahre alt und immer noch aktuell. Date und Darwen (2007) haben in der neuesten Version des Modells lediglich kleine Unstimmigkeiten bereinigt, wie sie immer wieder betonen.</li>
                <li>Das <i>Third Manifesto</i> (Date &amp; Darwen, 2007). Es beschreibt die aktuellste Version des relationalen Datenbankmodells. (Auch wenn Date selbst sich weigert, von Versionen zu sprechen.) Die gleiche Beschreibung finden Sie auch in (Date, 2004) und (Date, 2005). Alle drei Bücher sind recht theoretischer Natur. Das lesbarste der drei ist <i>Database In Depth</i> (Date, 2005). Der Untertitel <i>Relational Theory for Practitoners</i> zeigt, dass es sich nicht an Forscher, sondern an praktizierende Entwickler wendet.</li>
                <li>Fowlers <i>Enterprise-Patterns</i> (Fowler, 2002). Fowler beschreibt in diesem Buch (unter anderem) verschiedene ORM-Strategien in Form von Patterns (Muster).</li>
                <li>Der <i>SQL-Standard</i>. Die SQL-Standard-Dokumente von ANSI und ISO sind prinzipiell zwar relevant – als Bettlektüre kann ich Sie Ihnen aber eher weniger empfehlen. Sie sind – wie für formale Spezifikationen leider üblich – recht schwer lesbar. Zudem richten Sie sich eher an DBMS-Entwickler und weniger an Anwendungs- und Webentwickler wie uns. Die originalen Standard-Dokumente sind auch nicht frei verfügbar. Sie sind kommerziell erhältlich unter <a href="http://iso.org">iso.org</a> und <a href="http://ansi.org">ansi.org</a>. Auszüge und Drafts (Vorabversionen) können Sie aber mit etwas Googeln normalerweise zu Tage fördern. Gute Anlaufstellen zu den Standards sind beispielsweise auch <a href="http://www.wiscorp.com/SQLStandards.html">www.wiscorp.com/SQLStandards.html</a> und <a href="http://www.jcc.com/sql.htm">www.jcc.com/sql.htm</a>.</li>
                <li>Die offizielle <a href="https://dev.mysql.com/doc/">MySQL-Dokumentation</a>. Sie ist ein hervorragendes Nachschlagewerk für alles, was Sie über MySQL für die Praxis wissen müssen. Dazu gehören beispielsweise die SQL-Befehle oder das Anlegen von Backups.</li>
            </ul>
        </lesson>
    </lessons>
</html>
