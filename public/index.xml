<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "studybook.dtd" [

<!ENTITY nbsp   "&#x00A0;"> <!-- no-break space = non-breaking space, U+00A0 ISOnum -->
<!ENTITY shy    "&#x00AD;"> <!-- soft hyphen  -->
<!ENTITY thinsp "&#x202F;"> <!-- narrow no-break space -->
<!ENTITY zwsp   "&#x200B;"> <!-- zero width space for prince, see http://www.princexml.com/bb/viewtopic.php?f=4&t=1160&hilit=hyphens -->

<!ENTITY ndash  "&#8211;"> <!-- – en dash -->
<!ENTITY mdash  "&#x2014;"> <!-- em dash, U+2014 ISOpub -->
<!ENTITY hellip "&#8230;"> <!-- horizontal ellipsis = three dot leader, U+2026 ISOpub  -->
<!ENTITY times  "&#215;">  <!-- multiplication sign -->

<!ENTITY darr   "&#8595;"> <!-- downwards arrow -->
<!ENTITY larr   "&#8592;"> <!-- leftwards arrow -->
<!ENTITY uarr   "&#8593;"> <!-- upwards arrow -->
<!ENTITY rarr   "&#8594;"> <!-- rightwards arrow -->

<!ENTITY rsquo   "&#8217;"> <!-- right single quotation mark (apostrophe) -->
<!ENTITY lsquo   "&#8216;"> <!-- left single quotation mark -->
<!ENTITY raquo  "&#187;">  <!-- right pointing double angle quotation mark -->
<!ENTITY laquo  "&#171;">  <!-- left pointing double angle quotation mark -->
<!ENTITY rsaquo  "&#8250;"> <!-- › single right-pointing angle quotation mark -->
<!ENTITY lsaquo  "&#8249;"> <!-- ‹ single left-pointing angle quotation mark -->
<!ENTITY bdquo  "&#8222;"> <!-- double curved low 9 quotation mark -->
<!ENTITY ldquo  "&#8220;"> <!-- left double curved quotation mark -->
<!ENTITY rdquo  "&#8221;"> <!-- right double curved quotation mark -->

<!--Sample Solutions Assignments -->
<!ENTITY royal_flush_solution  "https://github.com/Webmasters-Europe/js_basics_royal_flush/releases/tag/1.9.0">
<!ENTITY flood_fill_solution  "https://github.com/Webmasters-Europe/js_basics_flood_fill/releases/tag/1.9.0">
<!ENTITY alk_test_solution  "https://github.com/Webmasters-Europe/js_basics_alk_test/releases/tag/1.9.0">

<!--Links Demos -->
<!ENTITY terminal_demo  "https://terminal.webmasters-akademie.dev">



]><html lang="de">
    <head>
        <link type="text/css" href="authoring.css"/>
        <title>JavaScript</title>
        <subtitle>Aller Anfang ist leicht</subtitle>
        <author>Marco Emrich und Christin Marit</author>
        <publication_year>2019</publication_year>
        <cover_image_credits>iStock/binkski</cover_image_credits>
        <cover_designer>Frank Schad</cover_designer>
        <layout_typesetting>Frank L. Schad</layout_typesetting>
        <editor>Horst Liske, Robert von Heeren</editor>
        <original_publication_year>2015</original_publication_year>

        <indexterms>
            <!--indexterm>Array</indexterm-->
            <indexterm>APA-Style</indexterm>
            <indexterm>API</indexterm>
            <indexterm>arithmetische Operatoren</indexterm>
            <indexterm>Babel</indexterm>
            <indexterm>Bezeichner</indexterm>
            <indexterm>benannte Parameter</indexterm>
            <indexterm>Boolean</indexterm>
            <indexterm>camelCase</indexterm>
            <indexterm>ceil</indexterm>
            <indexterm>charAt</indexterm>
            <indexterm>Codeblock</indexterm>
            <indexterm>coercion</indexterm>
            <indexterm>concat</indexterm>
            <indexterm>Debugger</indexterm>
            <indexterm>default</indexterm>
            <indexterm>Duck Typing</indexterm>
            <indexterm>destructuring</indexterm>
            <indexterm>ECMAScript</indexterm>
            <indexterm>endsWith</indexterm>
            <indexterm>Engine</indexterm>
            <indexterm>else</indexterm>
            <indexterm>EVA-Prinzip</indexterm>
            <indexterm>every</indexterm>
            <indexterm>explizite Typkonvertierung</indexterm>
            <indexterm>fill</indexterm>
            <indexterm>filter</indexterm>
            <indexterm>find</indexterm>
            <indexterm>findIndex</indexterm>
            <indexterm>Firefox</indexterm>
            <indexterm>Firefox Webkonsole</indexterm>
            <indexterm>first class</indexterm>
            <indexterm>floor</indexterm>
            <indexterm>forEach</indexterm>
            <indexterm>function expression</indexterm>
            <indexterm>function scope</indexterm>
            <indexterm>Funktionsausdruck</indexterm>
            <indexterm>Gruppierungsoperator</indexterm>
            <indexterm>GUI</indexterm>
            <indexterm>Higher-Order-Funktion</indexterm>
            <indexterm>Hoisting</indexterm>
            <indexterm>IDE</indexterm>
            <indexterm>identifier</indexterm>
            <indexterm>if</indexterm>
            <indexterm>implizite Typkonvertierung</indexterm>
            <!--indexterm>Index</indexterm-->
            <indexterm>indexOf</indexterm>
            <indexterm>Indexoperator</indexterm>
            <indexterm>includes</indexterm>
            <indexterm>IPO-Model</indexterm>
            <indexterm>join</indexterm>
            <indexterm>key</indexterm>
            <indexterm>Klammerung</indexterm>
            <indexterm>Kommentar</indexterm>
            <indexterm>Konstante</indexterm>
            <indexterm>Kontrollstrukturen</indexterm>
            <indexterm>lastIndexOf</indexterm>
            <indexterm>Literal</indexterm>
            <indexterm>local scope</indexterm>
            <indexterm>logische Operatoren</indexterm>
            <indexterm>Magic Number</indexterm>
            <!--indexterm>map</indexterm-->
            <indexterm>named parameters</indexterm>
            <indexterm>Modulo</indexterm>
            <indexterm>Mozilla</indexterm>
            <indexterm>oder-Operator</indexterm>
            <indexterm>Operand</indexterm>
            <indexterm>Paradigma</indexterm>
            <!--indexterm>Parameter</indexterm-->
            <indexterm>Pi</indexterm>
            <indexterm>Präzedenz</indexterm>
            <indexterm>Priorität</indexterm>
            <indexterm>Programmierrichtlinie</indexterm>
            <indexterm>pop</indexterm>
            <indexterm>Property</indexterm>
            <indexterm>Prototyp</indexterm>
            <indexterm>push</indexterm>
            <!--            <indexterm>Queries</indexterm>-->
            <!--            <indexterm>Query</indexterm>-->
            <indexterm>random</indexterm>
            <indexterm>reduce</indexterm>
            <indexterm>regular Expression</indexterm>
            <indexterm>relationale Operatoren</indexterm>
            <indexterm>repeat</indexterm>
            <indexterm>replace</indexterm>
            <indexterm>rest</indexterm>
            <indexterm>return</indexterm>
            <indexterm>reverse</indexterm>
            <indexterm>round</indexterm>
            <!--indexterm>Rückgabewert</indexterm-->
            <indexterm>Scopes</indexterm>
            <indexterm>Scoping</indexterm>
            <!--indexterm>Scratchpad</indexterm-->
            <indexterm>SCREAMING_SNAKE_CASE</indexterm>
            <indexterm>shift</indexterm>
            <indexterm>slice</indexterm>
            <indexterm>Signatur</indexterm>
            <indexterm>some</indexterm>
            <indexterm>sort</indexterm>
            <indexterm>splice</indexterm>
            <indexterm>split</indexterm>
            <indexterm>startsWith</indexterm>
            <indexterm>substr</indexterm>
            <indexterm>Template Strings</indexterm>
            <indexterm>toFixed</indexterm>
            <indexterm>toString</indexterm>
            <indexterm>toLowerCase</indexterm>
            <indexterm>toUpperCase</indexterm>
            <indexterm>trim</indexterm>
            <indexterm>Typkonvertierung</indexterm>
            <indexterm>und-Operator</indexterm>
            <indexterm>unshift</indexterm>
            <indexterm>Verkettungsoperator</indexterm>
            <indexterm>Verzweigung</indexterm>
            <indexterm>Webkonsole</indexterm>
            <indexterm>Zuweisungsoperator</indexterm>
        </indexterms>
        <learning_objectives>
            <li>Kleine und mittelgroße Problemstellungen mit JavaScript (ES6+) lösen.</li>
            <li>JavaScript (ES6+) Sprachmittel gezielt einsetzen, z.B. verschiedene Datentypen, Kontrollstrukturen, Funktionen und Higher-Order Funktionen.</li>
            <li>Eigenständig einen Lösungsansatz auswählen und selbständig Bibliotheksfunktionen nachschlagen.</li>
            <li>Eine angemessene Code-Qualität vorweisen.</li>
        </learning_objectives>
    </head>
    <about_author>
        <h3>Über die Autoren</h3>
        <h3>Marco Emrich</h3>
        <p>Marco Emrich ist Diplom-Informatiker (FH), leidenschaftlicher Trainer und Verfechter der Software-Craftsmanship-Bewegung. Er verfügt über langjährige Erfahrung als Software-Architekt und -Entwickler in ganz unterschiedlichen Branchen. An der Webmasters Akademie in Nürnberg leitet er den Fachbereich Web Engineering. Außerdem hält er regelmäßig Vorträge, leitet Workshops auf bekannten Softwarekonferenzen und schreibt Artikel für Fachzeitschriften. Wenn er in seiner Freizeit nicht gerade Softwerkskammer-Treffen organisiert, erklärt er wahrscheinlich gerade seinem Sohn, wie man Roboterschildkröten programmiert.</p>
        <social_links>
            <a href="https://github.com/marcoemrich">https://github.com/marcoemrich</a>
            <a href="https://twitter.com/marcoemrich">https://twitter.com/marcoemrich</a>
        </social_links>
        <h3>Christin Marit</h3>
        <p>Christin Marit ist Diplom-Sozialpädagogin, zertifizierte Webentwicklerin, Fotografin, Bloggerin, Weltenbummlerin und professionelle Lebenskünstlerin. Sie arbeitet für die Webmasters Akademie in Nürnberg als Kursentwicklerin, Autorin und E-Tutorin und findet, dass JavaScript lernen genauso einfach, schön und spannend sein sollte wie das Leben selbst.</p>
        <social_links>
            <a href="https://twitter.com/christinmarit">https://twitter.com/christinmarit</a>
        </social_links>
    </about_author>
    <acknowledgements>
        <p>Wir möchten uns vor allem bei all unseren Lesern und Reviewern für ihr wertvolles Feedback bedanken. Besonders hervorzuheben sind hier: Jan Teriete, Robert von Heeren, Horst Liske, David Seifert, Raimo Radczewski, Tom Scholz, Cord Mählmann, Thomas Metz, Günter Hanke und Phillippe Botzek. Außerdem danken wir unseren Lektoren Monika Beck&#x00A0;(†), Ulrike Walter und Thorsten Schneider &#x2014; insbesondere dafür, dass sie es immer noch nicht aufgegeben haben, uns deutsche Kommaregeln zu erklären.</p>
        <p>Weiterhin gebührt unser Dank dem Team von Think Geek Inc., das uns netterweise erlaubt hat, Produktbilder und Texte für unser fiktives NerdWorld-Projekt zu verwenden.</p>
        <p>Natürlich danken wir auch allen Entwicklerinnen und Entwicklern aus der JavaScript-Community, die unermüdlich an und mit besseren Technologien arbeiten und einen stetigen Austausch anstreben, damit JavaScript eine Sprache bleibt, mit der Programmieren wirklich Spaß macht.</p>
    </acknowledgements>
    <preface>
        <p>
            <b>JavaScript! JavaScript! JavaScript!</b>
        </p>
        <p>Immer häufiger ist diese Sprache anzutreffen. Webentwickler sind sich einig: An JavaScript führt kein Weg vorbei. Das bestätigen beispielsweise auch die <i>RedMonk Programming Language Rankings</i> &#x2014; eine Seite, die Programmiersprachen nach ihrer Popularität bewertet. Dort hält sich JavaScript momentan auf Platz eins, gefolgt von Java, PHP und Python.</p>
        <p>Letztes Jahr (2015) wurde der Sprachstandard ECMAScript2015 verabschiedet, den die meisten Browser nun fast vollständig unterstützen. Statt mit altem JavaScript anzufangen, um dann im Anschluss zu erfahren, wie es mit modernen Sprachmitteln &#187;besser geht&#171;, zeigen wir Ihnen von Anfang an das &#187;neue JavaScript&#171;. Dafür werfen wir jede Menge alten Ballast über Bord und zeigen Ihnen gleich das &#187;coole Zeug&#171;.</p>
        <p>Auch wenn diese Class für Anfänger ist, und wir uns bemühen, Ihnen JavaScript möglichst schonend beizubringen, so legen wir doch auch großen Wert auf gute Codequalität. Denn <i>noch wichtiger als lauffähiger Code ist gut geschriebener Code</i> &#x2014; Code, der leicht zu verstehen, leicht zu ändern und leicht zu erweitern ist. Das sagt schon das berühmte <i>Software Craftsmanship Manifesto</i>, das Tausende von Softwareentwicklern weltweit unterzeichnet haben.</p>
        <p>Zusammengefasst lässt sich sagen: Unser Ziel ist es, Sie in möglichst kurzer Zeit an einen Punkt zu bringen, an dem Sie sauberen, aktuellen JavaScript-Code programmieren.</p>
        <figure width="50%" float="right">
            <img src="images/people/preface_christin_marco.jpg"/>
        </figure>
        <p>Sie haben evtl. schon Vorkenntnisse? Dann lassen Sie sich überraschen, und lernen Sie einen neuen Programmierstil kennen, der von den neusten Sprachfeatures profitiert und zu kürzerem, prägnanterem Code führt.</p>
        <p>Beim Durcharbeiten, könnte sich Ihnen der Gedanke aufdrängen, dass wir viel Spaß beim Schreiben hatten. Da könnte etwas dran sein :) Wir hoffen, Sie haben nun mindestens genauso viel Spaß beim Lesen und Programmieren&#8230;</p>
        <p>In diesem Sinne: Ran an den Code!</p>
        <p>Ihre Autoren &#x2014; Christin &amp; Marco</p>
        <p>PS: Wenn Sie Feedback und Anregungen haben, oder einfach verfolgen möchten, woran ich gerade arbeite, folgen oder schreiben Sie mir auf Twitter: <b>@marcoemrich</b> &#x2014; Marco</p>
    </preface>
    <lessons>
        <lesson>
            <lesson_name>Was Sie schon immer über JavaScript wissen wollten&#8230;</lesson_name>
            <topics>
                <li>was JavaScript ist.</li>
                <li>wo JavaScript eingesetzt wird.</li>
                <li>was Sie in dieser Class erwartet.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Selbst ein Weg von tausend Meilen beginnt mit einem Schritt.</p>
                </blockquote>
                <figcaption>aus Japan</figcaption>
            </figure>
            <h1>JavaScript?</h1>
            <p>Sie haben sich entschlossen, eine Class über JavaScript zu belegen. Vermutlich haben Sie schon die eine oder andere Vorstellung, was Sie mit JavaScript anfangen können. Vielleicht gelingt es uns dennoch, Sie ein wenig damit zu beeindrucken, wie vielseitig und universell die Einsatzmöglichkeiten von JavaScript tatsächlich sind.</p>
            <h3>JavaScript ist überall!</h3>
            <figure width="90%" id="google_spreadsheet">
                <img src="images/screenshots/google_spreadsheet.png"/>
                <figcaption>Ein Google-Spreadsheet</figcaption>
            </figure>
            <p>JavaScript ist vor allem in Browsern präsent. Mit JavaScript können Sie Programme schreiben, die im Browser ablaufen. Dem Browser kommt dabei die Rolle einer Plattform zu &#x2014; wie bei einem Betriebssystem, auf dem Sie Programme installieren können. Eine Installation ist aber für JavaScript-Anwendungen nicht nötig. </p>
            <p>Die Funktionalität ist dabei sehr weitreichend. Sie fängt an bei einfachen Validierungen von Formularfeldern (z.&#x202F;B. ob eine E-Mail-Adresse richtig geschrieben ist) und reicht bis zu komplexen Anwendungen wie z.&#x202F;B. <a href="https://www.google.com/sheets/about">Google Sheets</a> (eine Art Tabellenkalkulation à la Microsoft Excel im Browser, ).</p>
            <p>Auch moderne E-Shops (z.&#x202F;B. Amazon, eBay), Videoplattformen (z.&#x202F;B. YouTube) oder Social Sites (Facebook, Twitter) setzen massiv JavaScript ein. Ein modernes Internet ist ohne JavaScript nicht vorstellbar.</p>
            <p>Browser können neben JavaScript auch andere Sprachen ausführen, z.&#x202F;B. <i>Dart</i> (in Google Chrome) oder <i>VBScript</i> (im Microsoft Internet Explorer). JavaScript ist aber die einzige Programmiersprache, die alle modernen Browser zuverlässig unterstützen. Zudem lassen sich enorme Ladeverzögerungen, wie Sie sie vielleicht noch von Java-Applets oder Flash kennen, meistens vermeiden.</p>
            <figure width="40%" float="right" id="robot">
                <img src="images/photos/robot.jpg"/>
                <figcaption>Roboter mit Espruino-Board, Foto: Pur3 Ltd</figcaption>
            </figure>
            <p>Browser sind auch längst nicht die einzige Plattform, die JavaScript ausführen können. So finden Sie JavaScript beispielsweise auch innerhalb von PDFs, zum Scripten von Anwendungen wie Adobe Photoshop oder in der Steuerungssoftware von <a href="http://www.espruino.com/distance_sensing_robot">Robotern</a> ().</p>
            <p>Sie sehen: Was Sie in dieser Class lernen, können Sie praktisch überall einsetzen. Dennoch wollen wir uns natürlich vorerst auf den prominentesten Einsatzzweck von JavaScript konzentrieren &#x2014; den Einsatz im Web.</p>
            <h3>JavaScript vs. Java</h3>
            <p>Eine recht hohe Verwechslungsgefahr besteht mit dem Begriff <keyword>Java</keyword>. <i>Java</i> ist auch eine Programmiersprache, hat aber mit JavaScript so wenig gemein wie <i>car</i> mit <i>carpet</i>. Netscape hat den vorher verwendeten Namen <i>LiveScript</i> abgelöst durch den Namen <i>JavaScript</i>, den Netscape vom Vertragspartner Sun Microsystems lizenziert hat (siehe ). Das war vermutlich ein Marketing-Trick, um im Fahrwasser der damals sehr erfolgreichen Sprache Java mitzuschwimmen. 2009 wurde Sun dann für 7,4 Milliarden US-Dollar von Oracle gekauft &#x2014; dadurch ist nun Oracle Besitzer der Marke <i>JavaScript</i>
                .</p>
            <p>Deswegen ist der Name <i>JavaScript</i> bei vielen Entwicklern nicht sonderlich beliebt. Erfahrene Entwickler sagen oft nur <i>JS</i>. Das gilt als &#187;hip&#171; und vermeidet den Java-Bezug (<i>Java</i> ist nicht gerade ein Synonym für &#187;schlank und modern&#171;).</p>
            <h3>JS auf dem Server</h3>
            <p>Statt im Browser kann JavaScript auch auf dem Server ausgeführt werden &#x2014; zur dynamischen Generierung von Webseiten, als Alternative zu typischen Serversprachen wie PHP, Ruby oder Java. JavaScript auf dem Server auszuführen ist keine neue Idee. Eine ernstzunehmende Verbreitung hat die Sprache im Serverbereich aber erst seit ca. 2010/2011 erreicht, im Wesentlichen durch die Plattform <a href="https://nodejs.org">Node.js</a>.</p>
            <p>Damit eröffnen sich für uns neue Möglichkeiten. Früher waren JS-Webentwickler sogenannte <keyword>Frontender</keyword> (Frontend-Enwickler), die sich vor allem mit der Optik und dem UI-Verhalten im Browser beschäftigt haben. Heutzutage können JS-Entwickler als <keyword>FullStack</keyword>-Entwickler ihr Geld verdienen und beispielsweise komplexe Finanzregeln auf dem Server implementieren. Wo früher Webanwendungen zwei Programmiersprachen benötigten (JS auf dem Client und z.&#x202F;B. Java auf dem Server), sind heute komplette Anwendungen in JS geschrieben.</p>
            <h3>JS im Embedded-Bereich</h3>
            <p>Schließlich liegen mit <a href="http://www.espruino.com">Espruino</a> und <a href="https://tessel.io/">Tessel</a> zwei Boards vor, die JavaScript direkt auf der Hardware ausführen. Damit können Sie Ihre Blumen bewässern, <a href="https://www.hackster.io/projects/e/841/841-making-sounds-and-music">Musikinstrumente programmieren</a>, <a href="http://tessel.hackster.io/rossetti211/tesselcopter">Modellhubschrauber per Handgesten steuern</a> oder <a href="http://tessel.hackster.io/rickyrobinett/a-sleep-tracker-for-your-dog-using-tessel-and-twilio">Ihren Hund beim Schlafen überwachen</a>. Der Phantasie sind kaum Grenzen gesetzt.</p>
            <p>Wir halten es nicht für übertrieben, zu behaupten:</p>
            <hint>
                <p>JS ist heutzutage allgegenwärtig!</p>
            </hint>
            <h1>Was diese Class ist</h1>
            <p>Diese Class konzentriert sich auf JavaScript im Browser. Da es sich um Grundlagen handelt, können Sie das Erlernte (mit wenigen Ausnahmen) genauso auf dem Server verwenden &#x2014; oder in PDFs, zum Scripten von Photoshop, für mobile Anwendungen, um Roboter zu steuern, um Kaffee zu kochen oder das Universum zu retten (beim letzten Punkt sind wir uns nicht zu 100% sicher).</p>
            <p>Falls Sie immer noch unsicher sind, ob es für Sie Sinn macht, JavaScript zu lernen, hilft Ihnen vielleicht die Seite <a href="http://shouldILearnJavaScript.com">http://shouldILearnJavaScript.com</a> weiter.</p>
            <hint>
                <p>Diese Class behandelt die Sprachversionen <keyword>ES6</keyword>/<keyword>EcmaScript 2015</keyword> und <keyword>EcmaScript 2016</keyword> von JavaScript. Mehr zu den JavaScript-Sprachversionen finden Sie in .</p>
            </hint>
            <h1>Was diese Class nicht(!) ist</h1>
            <p>Wenn Sie später Software mit JS entwickeln, werden Sie oft Details nachschlagen müssen. Dafür ist diese Class aber nur sehr bedingt geeignet. Wir versuchen Ihnen eher einen Leitfaden an die Hand zu geben, der Ihnen einen schnellen Einstieg in die Sprache JavaScript ermöglicht. Dabei ist die Reihenfolge der Lektionen auf den Lernfortschritt ausgerichtet, und nicht auf schnelles Auffinden von Themen optimiert. Wir erheben auch keinen Anspruch auf Vollständigkeit, sondern beschränken uns bewusst auf die Dinge, die für Sie als Einsteiger zunächst am wichtigsten sind &#x2014; das &#187;Big Picture&#171; sozusagen.</p>
            <p>Wenn Sie später bei Ihrer täglichen Entwicklungsarbeit das volle JS mit all seinen Details benötigen, empfehlen wir Ihnen folgende Nachschlagewerke:</p>
            <ul>
                <li><a href="https://developer.mozilla.org">https://developer.mozilla.org</a> &#x2014; Mozilla Developer Network (MDN)<br/>Das MDN ist viel mehr als eine Referenz für den Firefox-Browser. Sie finden hier sowohl ausführliche Details zum JS-Sprachkern als auch zur Browser-Funktionalität. Selbst Tabellen, welcher Browser welches Feature ab welcher Version implementiert, sind vorhanden &#x2014; häufig mit Polyfills (Code, der das Feature nachrüstet) für den Fall der Fälle.</li>
                <li><a href="http://www.nodejs.org">www.nodejs.org</a><br/>Die offizielle Site zur Serverplattform Node.js. Ausführliche Dokumentation zum JS-Sprachkern und allen Node.js-spezifischen Erweiterungen.</li>
                <li><a href="http://caniuse.com">caniuse.com</a><br/><i>Kann ich ein bestimmtes Feature benutzen?</i> Diese Site kennt die Antwort. Ausführliche Übersichten zu neuen Features in HTML, CSS und JS mit Angaben zu den Browserversionen und Hinweisen zu Polyfills.</li>
                <li><b>Speaking JavaScript</b> (Rauschmayer 2014, siehe Quellenverzeichnis)<br/> Dieses Buch gilt als <i>die</i> Referenz. Es ist modern, ausführlich und präzise. </li>
                <li><b>JavaScript: The Definitive Guide</b> (Flanagen 2011, siehe Quellenverzeichnis)<br/>Das ist das JS-Standardwerk. Es ist zwar nicht mehr ganz aktuell, aber sehr gut strukturiert und ausführlich.</li>
                <li><b>Understanding ECMAScript 6</b> (Zakas, siehe Quellenverzeichnis) <br/>Zakas Werk über alle Neuerungen von ES6/ES2015 ist bei Leanpub erhältlich, und außerdem als <a href="http://www.nczonline.net/blog/2014/03/26/announcing-understanding-ecmascript-6">Open Source</a>.</li>
            </ul>
            <hint src="images/hint/owl.png">
                <p>Falls Sie nach JS-Inhalten googeln möchten, ist es ratsam, ein &#187;mdn&#171; zu ergänzen, damit Sie gleich auf der passenden Seite des Mozilla Developer Networks landen &#x2014; ansonsten besteht die Gefahr, dass Sie Seiten in der Trefferliste vorfinden, deren Erklärungen veraltet oder schlichtweg falsch sind.</p>
            </hint>
            <h1>Wo sind die Animationen und die GUI?</h1>
            <p>Wenn Sie schon einmal das Inhaltverzeichnis überflogen haben, ist Ihnen vielleicht aufgefallen, dass alle Themen recht technisch klingen und scheinbar kaum Bezug zur grafischen Oberfläche (GUI) haben. Die Screenshots sehen auch nicht aus, als könnte sich ein Künstler daran erfreuen. Ist das denn ernst gemeint?</p>
            <p>Absolut &#x2014; wir haben die Erfahrung gemacht, dass es einfacher ist, sich auf den Kern der Sprache zu konzentrieren, statt sich gleichzeitig mit hochglanzpolierten Animationen herumzuschlagen. Konzentrieren Sie sich aufs Wesentliche: auf die Sprache!</p>
            <p>Wenn Sie die Sprache erst verstanden haben, ist der Rest einfach. Wie Sie HTML und CSS mit JS manipulieren, erfahren Sie deswegen erst im zweiten Band der Reihe. Wir hoffen, Ihnen den Einstieg dadurch etwas zu erleichtern. Der Code und die Konzepte, die Sie erlernen, sind deswegen nicht weniger praxisrelevant. Alle Beispiele und Übungen sind an Probleme und Situationen angelehnt, die wir tatsächlich so in unserem Programmieralltag erlebt haben.</p>
            <h1>Projekt &#187;NerdWorld&#171;</h1>
            <p>Willkommen zu Ihrem ersten Projekt. Natürlich ist es Ihr erklärtes Ziel, mit der Entwicklung von Software genug Geld zu verdienen, damit Sie sich baldmöglichst in die Karibik absetzen können. Dazu brauchen Sie aber Kunden &#x2014; und diese sollten Sie optimal zufriedenstellen. Dann kommen weitere, die auch wieder Geld mitbringen.</p>
            <h3>Ein Kundengespräch</h3>
            <p>Stellen Sie sich vor, Ihr erster Kunde ist <i>Björn</i> &#x2014; ein Ladenbesitzer, der seine Produkte nun auch im Internet anbieten möchte. Der Laden heißt &#187;<i>NerdWorld</i>&#171; (das Beispiel ist fiktiv &#x2014; Sie können sich das Googeln sparen). </p>
            <p>NerdWorld ist ein Online-Shop, bei dem Nerds und andere Technik-Verrückte Produkte des &#187;täglichen Bedarfs&#171; kaufen: Nerfguns, Ufos mit USB-Anschluss, Klingonenwaffen fürs Büro, koffeinhaltige Getränke, stark koffeinhaltige Getränke, noch stärker koffeinhaltige Getränke usw. Eben alles, was der moderne Entwickler zum Überleben im Büro-Dschungel so braucht.</p>
            <p>Es gibt zwar schon eine statische HTML-Site, nur können Sie dort bisher keine Produkte kaufen. Die neue Site soll primär aus einem Shop bestehen. Um das Ganze etwas interessanter zu gestalten, sind außerdem weitere Features geplant oder sollen weiterentwickelt werden, wie z.&#x202F;B.</p>
            <ul>
                <li>ein Chat-Client, über den sich die Kunden mit den Verkäufern/Kundenberatern austauschen</li>
                <li>eine Newsletter-Funktion, mit der der Shop die Kunden über neue Produkte informiert</li>
            </ul>
            <p>Damit dieser Traum auch Realität wird, hat sich der Geschäftsführer an einen Spezialisten gewandt: an Sie! Sie treffen sich also mit ihm und er schildert Ihnen die Situation:</p>
            <hint src="images/hint/bjoern.png">
                <p>Seit Jahren verkaufen wir cooles Zeug für Nerds &#x2014; oder solche, die es werden wollen. Unsere Produktpalette reicht von Star Trek-Fanartikeln über Programmierer-Utensilien bis hin zu Smartphone-gesteuerten Mini-Drohnen und Scherzartikeln wie dem Elektroschock-Kugelschreiber.</p>
            </hint>
            <p>Im Laufe dieses Kurses werden wir immer wieder auf Anforderungen von <i>Projekt NerdWorld</i> zu sprechen kommen und Ihnen zeigen, wie Ihnen JS dabei weiterhilft. Am Anfang werden das nur kleine Versatzstücke sein, die Sie leider noch nicht komplett in einem echten Projekt nutzen können. Zumindest sollte Ihnen der Bezug verdeutlichen, dass alles, was wir behandeln, relevant für die Praxis ist.</p>
            <questions>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Aussagen sind richtig?</p>
                    </question_text>
                    <answer>JavaScript läuft nur im Browser.</answer>
                    <answer correct="correct">JavaScript kann auf Client und Server eingesetzt werden.</answer>
                    <answer correct="correct">Mit JavaScript lassen sich Roboter steuern.</answer>
                    <answer correct="correct">Die Bildbearbeitungssoftware Adobe Photoshop kann mit JavaScript gescripted werden.</answer>
                    <answer>JavaScript wird häufig als Textauszeichnungssprache eingesetzt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was trifft auf JavaScript zu?</p>
                    </question_text>
                    <answer correct="correct">Java und JavaScript sind komplett verschiedene Programmiersprachen.</answer>
                    <answer>JavaScript ist der Script-Dialekt von Java.</answer>
                    <answer>JavaScript ist Java für den Browser.</answer>
                    <answer correct="correct">JavaScript ist der Nachfolger der älteren Programmiersprache LiveScript.</answer>
                </question>
            </questions>
        </lesson>
        <lesson>
            <lesson_name>Los geht's: die &#187;Firefox Webkonsole&#171;</lesson_name>
            <topics>
                <li>die Firefox Webkonsole kennen.</li>
                <li>Ihre ersten Zeilen Code zu schreiben.</li>
                <li>grundlegende Programmierrichtlinien kennen.</li>
            </topics>
            <h1>Wo ist denn die IDE?</h1>
            <p>Viele Entwickler schreiben ihren JS-Code in einer speziellen Entwicklungsumgebung,
                einer sogenannten <keyword>IDE</keyword> (Integrated Development Environment).
                Installation und Konfiguration ist allerdings mit viel Aufwand verbunden &#x2014; den
                möchten wir Ihnen ersparen. Für Ihre ersten Schritte in JS benötigen Sie nicht viel.
                Es genügt, die aktuelle Version von <keyword>Mozilla Firefox</keyword> zu
                installieren. Firefox bringt ausreichend Werkzeuge mit, um kleine JS-Anwendungen
                komplett zu entwickeln. Dazu zählt beispielsweise die <keyword>Firefox
                    Webkonsole</keyword>, die bereits viele Features mitbringt, die sonst eher IDEs
                vorbehalten sind.</p>
            <p>Firefox erhalten Sie unter <a href="http://www.mozilla.org/en-US/firefox/new">www.mozilla.org/en-US/firefox/new</a> für Ihr jeweiliges Betriebssystem. Die Sprache können Sie auf der Seite umstellen &#x2014; in diesem Kurs verwenden wir die englische Version.</p>
            <walkthrough>
                <name/>
                <content>
                    <step>Installieren und starten Sie Firefox auf Ihrem Betriebssystem.</step>
                    <step>Öffnen Sie die Firefox <b>Webkonsole</b> aus dem Developer-Menü () oder per Tastaturkürzel: <kbd>ctrl-shift-k</kbd> bzw. <kbd>cmd-alt-k</kbd>. <figure id="firefox_menu" width="67%">
                            <img src="images/screenshots/firefox_webconsole_one-line-mode.png"/>
                            <figcaption>Firefox: Webkonsole im Einzeilenmodus</figcaption>
                        </figure>
                    </step>
                    <step>
                        <p>Schalten Sie in den <keyword>multi-line mode</keyword> (Mehrzeilenmodus) per Tastaturkürzel: <kbd>ctrl-b</kbd>. </p>
                    </step>
                    <step>Sie haben nun das Eingabefenster und das Ausgabefenster: Ordnen Sie die beiden Fenster so an, dass Sie beide vollständig im Blick haben &#x2014; nutzen Sie das &#8230;-Menü zur Positionierung der Webkonsole ().<figure width="67%" id="webkonsole1">
                            <img src="images/screenshots/firefox_webconsole_multi-line-mode.png"/>
                            <figcaption>Firefox: Webkonsole im Mehrzeilenmodus</figcaption>
                        </figure><p>Fertig! Mehr Setup ist nicht nötig &#x2014; legen wir los! </p></step>
                </content>
            </walkthrough>
            <h1>Hilfreiche Shortcuts für die Webkonsole</h1>
            <p>Die folgende Tabelle zeigt einige hilfreiche Tastaturkürzel für die Webkonsole.</p>
            <table>
                <caption>Webkonsole Tastaturkürzel</caption>
                <thead>
                    <tr>
                        <th>Windows/Linux</th>
                        <th>macOS</th>
                        <th>Funktion</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <kbd>ctrl-shift-k</kbd>
                        </td>
                        <td>
                            <kbd>cmd-alt-k</kbd>
                        </td>
                        <td>Konsole öffnen</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-b</kbd>
                        </td>
                        <td>
                            <kbd>cmd-b</kbd>
                        </td>
                        <td>Mehrzeilenmodus an/aus</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-enter</kbd>
                        </td>
                        <td>
                            <kbd>cmd-enter</kbd>
                        </td>
                        <td>Run &#x2014; den Code in der Konsole ausführen</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-S</kbd>
                        </td>
                        <td>
                            <kbd>cmd-S</kbd>
                        </td>
                        <td>Save &#x2014; Code als JavaScript-Datei speichern</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-O</kbd>
                        </td>
                        <td>
                            <kbd>cmd-O</kbd>
                        </td>
                        <td>Open &#x2014; JavaScript-Datei öffnen</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-F</kbd>
                        </td>
                        <td>
                            <kbd>cmd-F</kbd>
                        </td>
                        <td>Find &#x2014; suchen</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-shift-L</kbd>
                        </td>
                        <td>
                            <kbd>cmd-L</kbd>
                        </td>
                        <td>Ausgabefenster leeren</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>ctrl-J</kbd>
                        </td>
                        <td>
                            <kbd>cmd-J</kbd>
                        </td>
                        <td>Jump &#x2014; in Zeile springen</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>alt-Pfeil nach oben</kbd>
                        </td>
                        <td>
                            <kbd>alt-Pfeil nach oben</kbd>
                        </td>
                        <td>Line Up &#x2014; Zeile nach oben schieben</td>
                    </tr>
                    <tr>
                        <td>
                            <kbd>alt-Pfeil nach unten</kbd>
                        </td>
                        <td>
                            <kbd>alt-Pfeil nach unten</kbd>
                        </td>
                        <td>Line Down &#x2014; Zeile nach unten schieben</td>
                    </tr>
                </tbody>
            </table>
            <h1>Hello World mit console.log</h1>
            <p>Traditionell beginnt das Erlernen einer neuen Programmiersprache mit der Ausgabe von <code>Hello World</code>. Sie müssen dazu lediglich die folgende Anweisung in der Webkonsole eingeben.</p>
            <blockcode numbered="numbered" src="accompanying_files/02/examples/hello.js"/>
            <p>Sobald Sie auf den <b>Run</b>-Button klicken (oder die Tastenkombination <kbd>ctrl-Enter</kbd> eingeben) erscheint die Ausgabe im Ausgabefenster.</p>
            <figure width="100%">
                <img src="images/screenshots/webconsole_hello_world.png"/>
            </figure>
            <exercise>
                <name>In die Konsole geloggt</name>
                <content>
                    <p>Geben Sie Ihren Namen aus.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/02/solutions/logged.js"/>
                </answer>
            </exercise>
            <h1>Alarm! Alarm! &#x2014; Die Konsole brennt</h1>
            <p>Betrachten Sie den JS-Code etwas genauer: <code>log</code> ist eine sogenannte <keyword>Funktion</keyword>. Ihre Aufgabe ist es, in die Konsole (<code>console</code>) zu loggen, d.&#x202F;h. dort eine nachvollziehbare Ausgabe von Log-Meldungen einzutragen &#x2014; wie in einem Logbuch.</p>
            <p>Im Log lässt sich die Ausgabe des Programmes Schritt für Schritt nachvollziehen. Tatsächlich ist dieses Log nicht für Anwender bestimmt, sondern soll uns Programmierern helfen, den Ablauf eines Programmes nachzuvollziehen.</p>
            <p>Ersetzen Sie <code>console.log</code> durch <code>alert</code>:</p>
            <figure width="80%">
                <img src="images/screenshots/alert_hello_world.png"/>
            </figure>
            <!--blockcode numbered="numbered" src="accompanying_files/02/examples/alert.js"/-->
            <p>Die Funktion <code>alert</code> öffnet eine sogenannte <keyword>Alert-Box</keyword> im Browserfenster. Sie ist dafür gedacht, Anwendern wichtige Warnmeldungen anzuzeigen. Die Alert-Box ist ein <keyword>modales</keyword> Popup-Fenster, d.&#x202F;h. der Anwender muss sie wegklicken, um die Website weiter benutzen zu können. Aus Usability-Gründen ist von solchen modalen Popup-Fenstern abzuraten. Setzen Sie sie nur in wenigen begründeten Fällen ein. Außerdem handelt es sich dabei um eine Funktion, die nur in Browserumgebungen zur Verfügung steht. Wenn Sie z.&#x202F;B. auf dem Server unter <i>Node.js</i> programmieren, können Sie sie nicht verwenden.</p>
            <p>Sowohl <code>alert</code> als auch <code>log</code> sind Funktionen. Den Aufruf einer Funktion erkennen Sie an den runden Klammern <code>()</code>. Innerhalb der Klammern hinterlegen Sie ein <keyword>Argument</keyword> &#x2014; wie hier <code>"Hello World"</code>. Was mit dem Argument passiert, ist von der Funktion abhängig. Während <code>alert</code> einen Warnhinweis für den Anwender ausgibt, erzeugt <code>console.log</code> einen Logeintrag für uns Entwickler.</p>
            <figure width="50%">
                <img src="images/language_dependent/de/function_call.jpg"/>
                <figcaption>Begriffserläuterung zum Funktionsaufruf</figcaption>
            </figure>
            <p><code>alert</code> ist eine Funktion, die bereits im Browser implementiert ist. Der Browser bringt außerdem <code>console</code> mit, ein sogenanntes <i>Objekt</i>. Auf <code>console</code> steht Ihnen dann wiederum die Funktion <code>log</code> zu Verfügung. Vorerst werden Sie nur solche implementierten Funktionen verwenden. In  lernen Sie schließlich, Ihre eigenen Funktionen zu definieren.</p>
            <exercise>
                <name>Alarm!</name>
                <content>
                    <p>Geben Sie den folgenden Text in einer Alert-Box aus: &#187;<i>Alert! Your console is on fire! Hurry! Write an email to the firefighters or tweet with the hashtag #helpMyComputerIsOnFire</i>&#171;</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/02/solutions/alert.js"/>
                </answer>
            </exercise>
            <p>In dieser Class werden Sie der Einfachheit halber mit <code>console.log</code> arbeiten. In der Praxis gibt es weitere Möglichkeiten zur Ausgabe. Wir werden sie allerdings hier nicht behandeln, da sie nicht Teil des JS-Sprachkerns sind.</p>
            <hint>
                <h3>S-Words Shootout: Syntax oder Semantik?</h3>
                <p>Zwei wichtige Begriffe, denen Sie immer mal wieder in der Softwareentwicklung
                    begegnen, sind <keyword>Syntax</keyword> und <keyword>Semantik</keyword>. Es ist
                    wichtig, den Unterschied zu verstehen. Beide Begriffe gibt es nicht erst bei
                    Programmiersprachen. Sprachwissenschaftler prägten die Begriffe zunächst für
                    natürliche Sprachen. Sie lassen sich aber durchaus mit der gleichen Bedeutung
                    auf Programmiersprachen übertragen. </p>
                <p>Bei der Syntax geht es um die Regeln, die den Aufbau von Sätzen einer Sprache beschreiben, oder im Fall von JavaScript den Aufbau von Anweisungen. Ist eine Anweisung syntaktisch falsch, meldet die JavaScript-Engine einen Syntax-Fehler.</p>
                <h3>Beispiel</h3>
                <blockcode>alert('Hello';</blockcode>
                <p>Hier fehlt die schließende runde Klammer vor dem Semikolon. JavaScript quittiert das mit:</p>
                <blockcode>Uncaught SyntaxError: missing ) after argument list</blockcode>
                <p>Bei der Semantik dagegen geht es um die Bedeutung von Wörtern oder Sätzen. Im Fall von JavaScript also die Bedeutung des Codes. Was soll der Code bewirken? </p>
                <h3>Beispiel</h3>
                <p>Beispielsweise könnte der Auftraggeber sich eine Alert-Box mit einer Verabschiedung wünschen. Die Anweisung bewirkt aber eine Begrüßung:</p>
                <blockcode numbered="numbered" src="code/02/alert_corrected.js" />
                <p>Dann ist der Code zwar syntaktisch korrekt, aber semantisch falsch. Ein anderes Beispiel wäre ein Additionsprogramm, das falsch rechnet. Auch wenn es zwar grundsätzlich (im Sinne der JavaScript-Engine) funktioniert, so tut es dennoch das Falsche.</p>
            </hint>
            <h1>Mehrere Anweisungen</h1>
            <p>Selbstverständlich können Sie auch mehrere Anweisungen nacheinander loggen:</p>
            <blockcode numbered="numbered" src="accompanying_files/02/examples/logmessage.js"/>
            <figure width="100%">
                <img src="images/screenshots/webconsole_multiple_log.png"/>
                <figcaption>Zwei Ausgaben mit console.log</figcaption>
            </figure>
            <p>Schreiben Sie jede Anweisung in eine eigene Zeile und schließen Sie sie mit einem Semikolon (;) ab. Sie können das Semikolon auch weglassen. In diesem Fall greift ein Mechanismus, der sich <keyword>Automatic Semicolon Insertion</keyword> (<keyword>ASI</keyword>) (dt.: automatische Semikolon-Ergänzung) nennt und das Semikolon für Sie automatisch setzt. Das ist einerseits recht praktisch, andererseits folgt die automatische Semikolon-Ergänzung relativ komplexen Regeln, die Sie erst einmal lernen sollten.</p>
            <p>In der Praxis gibt es deswegen zwei Möglichkeiten, damit umzugehen: </p>
            <ol>
                <li>Den semikolonlosen Stil</li>
                <li>Den Semikolon-Stil</li>
            </ol>
            <p>Beide Stile haben ihre Vor- und Nachteile und es gibt fanatische Verfechter auf beiden Seiten. Wir haben uns in dieser Class für den zweiten Stil entschieden &#x2014; aber nicht etwa, weil wir der Meinung wären, dass es sich dabei um den eindeutig besseren Stil handelt. Letztendlich ist das eher Geschmackssache. Was für den zweiten Stil spricht, ist vor allem die größere Verbreitung.</p>
            <hint src="images/hint/owl.png">
                <h3>Oder doch mal ohne?</h3>
                <p>Argumente und Hinweise der Schule des semikolonlosen Stils finden Sie bei:</p>
                <ul>
                    <li>
                        <a href="http://mislav.uniqpath.com/2010/05/semicolons">Marohnić 2010</a>
                    </li>
                    <li>
                        <a href="https://github.com/madrobby/zepto/blob/master/CONTRIBUTING.md">Fuch 2013</a>
                    </li>
                    <li>
                        <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">Schlueter 2010</a>
                    </li>
                </ul>
                <p>Falls Sie mit weniger Semikolons arbeiten möchten, können Sie Ihre Fähigkeiten gerne auf den <a href="http://asi.qfox.nl">ASI Scanning Test Grounds</a> unter Beweis stellen. Sollten Sie dort alles richtig machen, dürfen Sie die Semikolons getrost setzen, wie Sie es für richtig halten :-)</p>
            </hint>
            <h1>Programmierrichtlinien</h1>
            <p>Wie Sie sich vielleicht schon vorstellen können, gibt es bei der Programmierung viele Freiheiten, z.&#x202F;B. wie Sie den Code formatieren, wo Sie Semikolons setzen usw. Damit nicht völliges Chaos ausbricht und Ihr Code konsistent bleibt, sollten Sie spezifische Regeln zur Schreibweise verwenden. Eine Sammlung solcher Regeln heißt <keyword>Programmierrichtlinien</keyword>.</p>
            <p>Softwarehäuser haben meist ihre eigenen Programmierrichtlinien, die sich von Firma zu Firma oder sogar von Projekt zu Projekt unterscheiden. Dabei ist vor allem entscheidend, dass Dinge einheitlich geregelt sind und jedes Team-Mitglied diese Regeln befolgt. Nur so lassen sich Wildwuchs und Chaos verhindern. Der exakte Wortlaut jeder Regel ist dagegen eher sekundär.</p>
            <p>Gute Beispiele für ausführliche Programmierrichtlinien-Dokumente sind z.&#x202F;B. der <a href="http://contribute.jquery.org/style-guide/js">jQuery-Style-Guide</a>, den die Entwickler der jQuery-Bibliothek befolgen oder der <a href="https://github.com/airbnb/javascript">JavaScript Styleguide von Airbnb</a>.</p>
            <p>Programmierrichtlinien sind auch wichtig, weil Sie nie wissen können, wo oder von wem Ihr Code einmal weiterentwickelt wird. Nachdem ein Projekt abgeschlossen ist, ist die entstandene Software oftmals noch jahrelang im Einsatz. Die Entwicklung steht nie still. Fehler sind zu verbessern, Änderungswünsche umzusetzen, Anpassungen durchzuführen &#x2014; die sogenannte <keyword>Wartung</keyword> der Software. Der Programmierer, der den Code nach Ihnen pflegen, verbessern und abändern muss, ist Ihr <keyword>Wartungsprogrammierer</keyword>. Seien Sie nett zu ihm! Helfen Sie ihm, Ihren Code zu verstehen, indem Sie sich an gängige Programmierrichtlinien halten. (Und wenn Ihnen nur nett sein nicht ausreicht, stellen Sie sich den Wartungsprogrammierer einfach als Serienkiller vor, der genau weiß, wo Sie wohnen&#8230;)<br/>Vielleicht sind Sie selbst derjenige, der den Code Jahre später noch mal erweitern muss &#x2014; seien Sie nett zu sich selbst!</p>
            <!--blockquote>
                <p>Any fool can write code that a computer can understand. Good programers write
                    code that humans can understand.</p>
            </blockquote-->
            <hint>
                <figure>
                    <blockquote>
                        <p>Jeder Narr kann Code schreiben, den ein Computer versteht. Gute Programmierer schreiben Code, den Menschen verstehen.</p>
                    </blockquote>
                    <figcaption>Fowler (1999)</figcaption>
                </figure>
            </hint>
            <p>Wir werden ab sofort unsere eigenen Programmierrichtlinen entwickeln, dabei orientieren wir uns am <a href="https://github.com/airbnb/javascript">JavaScript Styleguide von Airbnb</a>. Zu der jeweils aktuellen Thematik bestimmen wir passende Regeln, die uns das Programmiererleben erleichtern. Airbnb bietet seine <a href="https://github.com/airbnb/javascript">Programmierrichtlinien</a> für Javascript auf GitHub an. In dieser Sammlung finden Sie zu jedem Gebiet in JavaScript Anweisungen, wie Sie Ihren Code sauber schreiben. Folgende Regeln wollen wir ab sofort einhalten:</p>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <ul>
                    <li>Schreiben Sie immer genau eine Anweisung in genau eine Zeile. </li>
                    <li>Beenden Sie jede Anweisung mit einem Semikolon.</li>
                </ul>
            </hint>
            <p>Weitere Programmierrichtlinien folgen in Kürze.</p>
            <h1 id="strict_intro">Seien Sie &#187;strict&#171;</h1>
            <p>Neben den Programmierrichtlinien gibt es noch eine weitere Möglichkeit, wie Sie sich selbst und Ihrem Wartungsprogrammierer das Leben etwas erleichtern können:</p>
            <p>Seien Sie strikt!</p>
            <p>Keine Sorge, dazu müssen Sie nicht gleich einen Besen verschlucken oder Ihre Kollegen mit strenger Stimme schimpfen, wenn Ihnen ihr Code nicht gefällt.</p>
            <p>Es gibt vielmehr die Möglichkeit, JS in den sogenannten <keyword>strict mode</keyword> zu versetzen. In diesem Modus verhält sich JS tatsächlich strikter. Das bedeutet:</p>
            <ul>
                <li>Einige Richtlinien, die der <i>standard mode</i> als reine Konvention betrachtet, führen im <i>strict mode</i> zu einer Fehlermeldung.</li>
                <li>Viele veraltete Sprachkonstrukte werden nicht mehr akzeptiert (z.&#x202F;B. die <code>with</code>-Anweisung)</li>
                <li>Fehlerhafter oder problematischer Code, den JS im standard mode ohne Murren akzeptiert, führt nun zu einer (meist) aussagekräftigen Fehlermeldung. Damit bemerken Sie Probleme frühzeitig und sparen sich die oft aufwendige Fehlersuche.</li>
                <li>Einige der neueren Sprachkonstrukte (z.&#x202F;B. <code>let</code>) lassen sich in den meisten Umgebungen überhaupt nur im strict mode verwenden.</li>
            </ul>
            <p>Um JS in den strict mode zu versetzen, müssen Sie nicht viel tun: Es genügt, wenn Sie die Anweisung</p>
             <blockcode src="code/02/use_strict.js" numbered="numbered" />
            <p>an den Anfang Ihrer JS-Datei schreiben.</p>
            <p>Ab sofort werden wir das immer tun, da es für uns praktisch keine Nachteile hat. Wir müssen schließlich keinen Legacy-Code (genauer: Code in alter JS-Syntax) unterstützen. In  erfahren Sie dann noch mal genauer, was es mit <code>'use strict';</code> auf sich hat. Wenn Sie es noch genauer wissen möchten, finden Sie auf MDN (Mozilla Development Network) einen <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict">Eintrag über Strict Mode</a>, der alle Unterschiede zwischen den Modi erläutert.</p>
            <h1>Kommentare oder: Geben Sie doch Ihren Senf dazu</h1>
            <p>Mit <i>Kommentaren</i> ist es möglich, hilfreiche Erläuterungen zum Code zu schreiben oder auch Codezeilen zu deaktivieren. Kommentare können helfen, Code schneller zu verstehen, den Ihr früheres Ich oder ein anderer Programmierer geschrieben hat.</p>
            <hint>
                <p>Richtig platzierte Kommentare verbessern die Lesbarkeit Ihres Codes.</p>
            </hint>
            <p>Der JavaScript-Interpreter ignoriert alles, was sich in Kommentaren befindet. Das gilt sogar für vollständige JavaScript-Anweisungen. In JavaScript gibt es zwei Möglichkeiten, Kommentare einzubinden. Dazu wird zwischen</p>
            <ul>
                <li><i>einzeiligen</i> und</li>
                <li><i>mehrzeiligen</i> Kommentaren</li>
            </ul>
            <p>unterschieden.</p>
            <p>Einzeilige Kommentare binden Sie mit zwei Slashes <code>//</code> ein.</p>
            <blockcode numbered="numbered" src="code/02/meaningfull_string.js" />
            <p>Sie sollten die Kommentare in der Praxis nur für komplexere Zusammenhänge verwenden und keine Trivialitäten kommentieren, wie im obigen Beispiel. Wenn Sie aufgrund zu vieler Kommentare Ihren Code kaum noch erkennen können, haben Sie nichts gewonnen.</p>
            <p>Mehrzeilige Kommentare erlauben Ihnen, längere &#x2014; eben mehrzeilige &#x2014; Texte in den Code einzubetten. Ein solcher Kommentar beginnt mit den Zeichen <code>/*</code> und endet mit <code>*/</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/02/examples/comment.js"/>
            <p>Kommentare, die mit <code>//</code> beginnen, müssen am Ende einer Zeile stehen oder komplett alleine in der Zeile. Kommentare der Form <code>/* ein Kommentar */</code> dürfen Sie dagegen fast überall platzieren.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="code/02/block_comment.js"/>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Zeilen sind syntaktisch korrekt?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>console.log(77); // kg</p>
                    </answer>
                    <answer correct="correct">
                        <p>console.log(42); /* kg */ //</p>
                    </answer>
                    <answer>
                        <p>console.log(72); */ kg /*</p>
                    </answer>
                    <answer correct="correct">
                        <p>console.log(); /* // undefined; */</p>
                    </answer>
                    <answer>
                        <p>console.log(); */ = 77; /*</p>
                    </answer>
                </question>
             <!--   <question type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Zeilen sind syntaktisch korrekt?</p>
                    </question_text>
                    <answer correct="correct">alert(30); // kg</answer>
                    <answer correct="correct">alert(30); /* kg */</answer>
                    <answer>alert(30); */ kg /*</answer>
                    <answer correct="correct">alert(/* Gewicht */ 30);</answer>
                    <answer>alert( */ Gewicht /* 30);</answer>
                </question>-->
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Was bedeutet ASI im JavaScript-Kontext?</p>
                    </question_text>
                    <answer correct="correct">automatic semicolon insertion</answer>
                    <answer>activate semantic initializer</answer>
                    <answer>automate syntax initialization</answer>
                    <answer>asynchronous serial interface</answer>
                    <answer>artificial&#x00A0;superintelligence</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Zeilen sind syntaktisch korrekt?</p>
                    </question_text>
                    <answer>console.log 'Hello'</answer>
                    <answer correct="correct">console.log('Hello')</answer>
                    <answer>console.log 'Hello';</answer>
                    <answer correct="correct">console.log('Hello');</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Wie versetzen Sie JS in den strikten Modus?</p>
                    </question_text>
                    <answer correct="correct">durch <code>'use strict'</code> am Anfang des Codes.</answer>
                    <answer>durch den Aufruf der Funktion <code>useStrict();</code> am Anfang des Codes.</answer>
                    <answer>Starten Sie Firefox mit der Kommandozeilen-Option <code>--strict</code></answer>
                    <answer>durch <code>'strict';</code> am Anfang des Codes.</answer>
                    <answer>Wählen Sie <i>strict mode</i> aus dem <i>Developer</i>-Menü des Browsers.</answer>
                </question>
            </questions>
        </lesson>
        <lesson>
            <lesson_name>Von Operatoren, Datentypen und anderen Prioritäten</lesson_name>
            <topics>
                <li>grundlegende Operatoren,</li>
                <li>die wichtigsten Datentypen</li>
                <li>und Ihre Prioritäten kennen.</li>
            </topics>
            <h1>Rechnen mit JavaScript</h1>
            <p>Mit jeder Programmiersprache lassen sich Berechnungen durchführen. Sie können JS sozusagen als Taschenrechner-Ersatz verwenden. Hier ein Beispiel. Geben Sie einfach Folgendes ein:</p>
            <blockcode numbered="numbered" src="accompanying_files/03/examples/calc.js"/>
            <p>Sie erhalten, wie erwartet, <code>7</code> als Ergebnis.</p>
            <p>Selbst an diesem einfachen kleinen Beispiel lassen sich bereits einige interessante JS-Konzepte erkennen: <code>3 + 4</code> ist ein <keyword>Ausdruck</keyword>. Ausdrücke gehören zu den wichtigsten Konzepten in JS. Charakteristisch für Ausdrücke ist, dass sie einen <keyword>Rückgabewert</keyword> besitzen &#x2014; in diesem Fall die Zahl <code>7</code>.</p>
            <p>Einen Rückgabewert wiederum können Sie an den verschiedensten Stellen im Code einsetzen, z.&#x202F;B. als Argument bei einem Funktionsaufruf &#x2014; oder anders ausgedrückt: JavaScript ersetzt Ausdrücke durch ihren (Rückgabe-)Wert.</p>
            <figure width="50%">
                <img src="images/language_dependent/de/expression.png"/>
                <figcaption>Ausdrücke</figcaption>
            </figure>
            <h2>Ausdrücke in der Firefox Webkonsole</h2>
            <p>In der Firefox Webkonsole können Sie Ausdrücke übrigens direkt eingeben. Geben Sie
                dazu <code>3 + 4</code> in der Eingabezeile unten (neben dem Doppel-Pfeil &#187; im
                Einzeilenmodus) ein ().</p>
            <figure id="web_console_3_4_before_return" width="100%">
                <img src="images/screenshots/web_console_before_return.png"/>
                <figcaption>Ausdrücke direkt in der Konsole &#x2014; Eingabe</figcaption>
            </figure>
            <p>Wenn Sie mit <kbd>Return</kbd> bestätigen zeigt die Konsole sofort den Rückgabewert ().</p>
            <figure id="web_console_3_4_after_return" width="100%">
                <img src="images/screenshots/web_console_after_return.png"/>
                <figcaption>Ausdrücke direkt in der Konsole im Einzeilenmodus &#x2014;
                    Ausgabe</figcaption>
            </figure>
            <p>Mit <kbd>shift-Return</kbd> können Sie übrigens auch mehrzeilige Anweisungen eingeben. D.&#x202F;h. eine einzige Anweisung kann aus mehreren Zeilen bestehen &#x2014; erst wenn Sie abschließend <kbd>return</kbd> drücken, wird die gesamte Anweisung ausgeführt. </p>
            <p>Alternativ können Sie auch einzelne Teilausdrücke in der Webkonsole selektieren und
                diese dann mit <i>Run</i> (<kbd>ctrl-Enter</kbd> / <kbd>cmd-Enter</kbd>)
                untersuchen. Wie Sie in <a href="#scratchpad_inspect"/> sehen, zeigt die Webkonsole
                das Ergebnis von <code>4 * 2</code> als <code>8</code> rechts im Ausgabefenster
                an.</p>
            <figure id="scratchpad_inspect">
                <img src="images/screenshots/webconsole_teilausdruck.png"/>
                <figcaption>Ermitteln eines selektierten (Teil-)Ausdrucks in der
                    Webkonsole</figcaption>
            </figure>
            <h2>Notation</h2>
            <p>In Zukunft werden wir oft Werte im Code notieren, die ein Ausdruck an dieser Stelle zurückgibt oder die in der Konsole erscheinen. Dazu verwenden wir einen Kommentar und geben den Wert hinter einem Pfeil <code>=&gt;</code>, dem sogenannten <keyword>fat arrow</keyword> an.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="code/03/commented_result.js" />
            <h1>JavaScript als Taschenrechner: Arithmetische Operatoren</h1>
            <p>Neben dem Multiplikations- und Additionsoperator gibt es auch für die Rechenarten <i>Subtraktion</i>, <i>Division</i> und <i>Modulo</i> entsprechende Operatoren. All diese Operatoren gehören zur Gruppe der <keyword>arithmetischen Operatoren</keyword>:</p>
            <table>
                <caption>Arithmetische Operatoren</caption>
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Operation</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>+</td>
                        <td>Addition</td>
                    </tr>
                    <tr>
                        <td>-</td>
                        <td>Subtraktion</td>
                    </tr>
                    <tr>
                        <td>*</td>
                        <td>Multiplikation</td>
                    </tr>
                    <tr>
                        <td>/</td>
                        <td>Division</td>
                    </tr>
                    <tr>
                        <td>%</td>
                        <td>Modulo &#x2014; Rest einer ganzzahligen Division</td>
                    </tr>
                    <tr>
                        <td>**</td>
                        <td>Potenz (erst ab ECMAScript 2016)</td>
                    </tr>
                </tbody>
            </table>
            <h3>Beispiel</h3>
            <ul>
                <li><code>5 + 4</code> gibt <code>9</code> zurück</li>
                <li><code>5 - 4</code> gibt <code>1</code> zurück</li>
                <li><code>5 * 4</code> gibt <code>20</code> zurück</li>
                <li><code>5 / 4</code> gibt <code>1.25</code> zurück</li>
                <li><code>10 % 3</code> gibt <code>1</code> zurück, da 10 - 3 * 3 = 1.</li>
                <li><code>5 ** 4</code> gibt <code>625</code> zurück, da 5 * 5 * 5 * 5 = 625 .</li>
            </ul>
            <exercise id="2000sekunden">
                <name>2000 Sekunden</name>
                <content>
                    <p>Wie viele Minuten und Restsekunden haben 2000 Sekunden? Verwenden Sie <code>console.log</code> für die Ausgabe.</p>
                    <p><b>Hinweise:</b> Am einfachsten ist die Aufgabe mithilfe des Modulo-Operators zu lösen. Nachkommastellen können Sie im Moment noch nicht entfernen. Darauf kommen wir später zurück.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/03/solutions/2000_secs.js"/>
                </answer>
            </exercise>
            <h1>Zeichen? Strings!</h1>
            <p>Ist Ihnen an der Schreibweise von Zahlen und Texten etwas aufgefallen? Das
                <code>'Hallo Welt'</code> am Anfang der letzten Lektion steht in Anführungszeichen,
                die Zahlen nicht. Texte werden in Anführungszeichen geschrieben und bestehen
                eigentlich aus einer Aneinanderreihung bzw. Verkettung einzelner Zeichen. Deswegen
                lautet der Fachbegriff <keyword>Zeichenkette</keyword> (engl.:
                    <keyword>String</keyword>).</p>
            <hint>
                <h3>Zwei Arten von Anführungszeichen</h3>
                <p>JavaScript akzeptiert sowohl einfache, als auch doppelte Anführungszeichen. Jedoch ist die konstante Verwendung von einfachen Anführungszeichen zur Konvention geworden und wird von großen Unternehmen, wie z.B. Airbnb verwendet. Die gleichzeitige Verwendung von einfachen und doppelten Anführungszeichen ist in jedem Fall falsch.</p>
                <p><b>Beispiel</b><br/>
                    <code>"ein Text"</code> ist erlaubt aber schlecht<br/>
                    <code>'ein Text'</code> ist erlaubt und bevorzugt<br/>
                    <code>"ein Text'</code> ist falsch</p>
                <p>Die meisten JS-Entwickler verwenden konsistent einfache Anführungszeichen und nur in Ausnahmefällen doppelte &#x2014; z.&#x202F;B. innerhalb eines Strings für wörtliche Rede. In Anlehnung an den Airbnb Javascript Style werden wir ab sofort dieser Richtlinie folgen.</p>
                <p><b>Beispiel</b><br/>
                    <code>'"Firefox ist ein toller Browser" sagt ein Entwickler.'</code>
                </p>
            </hint>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinie</h3>
                <p>Verwenden Sie im Normalfall einfache Anführungszeichen zur Begrenzung von Strings.</p>
            </hint>
            <h1>Die Frage nach der Länge</h1>
            <p>Manchmal ist es wichtig zu wissen, wie lang ein String ist &#x2014; d.&#x202F;h. aus wie vielen Zeichen er besteht. Sie lernen im Lauf der Zeit noch viele Situationen kennen, in denen es auf die Länge ankommt.</p>
            <p>Beispielsweise gibt es manchmal in Blogs, Produktlisten usw. eine Textvorschau, wo nur ein Teil des Textes ausgegeben wird. Dazu ist es erforderlich, zunächst die Länge des Textes zu messen. So lässt sich entscheiden, ob eine Kürzung erfolgen soll.</p>
            <p>An dieser Stelle wollen wir Ihnen daher die String-Eigenschaft <keyword>length</keyword> näherbringen. Sie können einen String nach dieser Eigenschaft fragen, indem Sie <i>.length</i> dahinter schreiben.</p>
            <blockcode numbered="numbered" src="code/03/string_length.js" />
            <p>Damit die Konsole die gewünschte Antwort liefert, packen Sie die Anweisung hier noch in ein <code>console.log</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/03/examples/length.js"/>
            <exercise>
                <name>Glück &amp; Codes</name>
                <content>
                    <p>Kennen Sie Glückszahlen und Namenscodes? Hier ist ein Namenscode mit einem interessanten Schema:</p>
                    <p>Multiplizieren Sie die Länge Ihres Vornamens (bzw. Ihrer Vornamen, falls Sie mehrere haben sollten) mit der Länge Ihres Nachnamens und lassen Sie sich das Ergebnis in der Konsole ausgeben. (Bei uns kommen übrigens folgende Zahlen dabei heraus: 40 und 30.)</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/03/solutions/lucky_number.js"/>
                </answer>
            </exercise>
            <h1>Literale: Sagen was sie meinen</h1>
            <p>Nachdem Sie nun Strings und Zahlen kennen, wollen wir Ihnen einen weiteren wichtigen Begriff nicht vorenthalten: Grundsätzlich gilt, dass jeder Wert &#x2014; egal ob String oder Zahl &#x2014; der direkt wörtlich (engl.: <i>literally</i>) im Code steht, als <b>Literal</b> bezeichnet wird. Literale haben immer einen festen Wert.</p>
            <h3>Beispiele</h3>
            <ul>
                <li>42</li>
                <li>'Haus'</li>
                <li>'grün'</li>
                <li>5.47</li>
                <li>1998</li>
                <li>'Bitte geben Sie Ihren Namen ein'</li>
            </ul>
            <hint src="images/hint/owl.png">
                <h3>JS rechnet wie Amerikaner und Chinesen</h3>
                <p>Vielleicht haben Sie sich schon gewundert, dass das Literal <code>5.47</code> einen Punkt enthält statt des gewohnten Kommas (<code>5,47</code>). Das liegt daran, dass JS sich an der Punkt-Schreibweise von Dezimalzahlen orientiert, die vor allem im angelsächsischen Sprachraum verbreitet ist &#x2014; aber nicht ausschließlich, so kann es z.&#x202F;B. in der Schweiz passieren, dass die gleiche Schule in der Unterstufe das Komma und ab der Mittelstufe den Punkt unterrichtet. Auf Wikipedia gibt es sogar eine <a href="http://de.wikipedia.org/wiki/Dezimaltrennzeichen#Punkt-L.C3.A4nder">Karte</a>, auf der Punkt- und Komma-Länder verzeichnet sind.</p>
            </hint>
            <h1>Die Datentypen number &amp; string</h1>
            <p>Literale haben in JavaScript einen sogenannten <keyword>Datentyp</keyword>. Der Datentyp gibt an, welcher Art diese Daten sind, und bestimmt damit insbesondere ihren Wertebereich.</p>
            <p>Bisher verwenden wir folgende Datentypen:</p>
            <table>
                <caption>Die Datentypen String &amp; Number</caption>
                <tbody>
                    <tr>
                        <th>Datentyp</th>
                        <th>Wertebereich / Bedeutung</th>
                        <th>Beispiel-Literal</th>
                    </tr>
                    <tr>
                        <td>string</td>
                        <td>Beliebige Texte</td>
                        <td>'Hallo'</td>
                    </tr>
                    <tr>
                        <td>number</td>
                        <td>Beliebige positive und negative Zahlen</td>
                        <td>246.5</td>
                    </tr>
                </tbody>
            </table>
            <hint src="images/hint/owl.png">
                <p>JavaScript codiert Strings im sogenannten <keyword>UTF-16</keyword> [ECMA-262]. Eine Kodierung ist dafür verantwortlich, wie Zeichen digital repräsentiert werden. Bei UTF-16 haben Sie die Möglichkeit, viele Sonderzeichen und spezielle Buchstaben aus verschiedenen Sprachen zu verwenden (z.&#x202F;B. deutsche Umlaute oder französische Akzentzeichen).</p>
                <p>Der Wertebereich für Zahlen ist auch beschränkt. Aber so lange Sie keine astronomischen Berechnungen durchführen, sollten Sie auf der sicheren Seite sein.</p>
            </hint>
            <p>Sie können leicht herausfinden, welchen Datentyp ein Literal hat. Zu diesem Zweck gibt es in JavaScript den Operator <code>typeof</code>. Der Rückgabewert von <code>typeof</code> ist ein String, der den Datentyp angibt.</p>
            <h3>Beispiele</h3>
            <blockcode numbered="numbered" src="accompanying_files/03/examples/type.js"/>
            <exercise>
                <name>Na? Was bist denn du?</name>
                <content>
                    <p>Welchen Datentyp hat das folgende Literal?<br/><code>'42'</code></p>
                </content>
                <answer>
                    <code>String</code>
                </answer>
            </exercise>
            <h1>Prioritäten &amp; Klammerung</h1>
            <h2>Reihenfolge von Operatoren</h2>
            <p>Betrachten Sie den Ausdruck <code>5 + 3 * 2</code>. Welches Ergebnis würden Sie vermuten? Die Lösung könnte <code>16</code> oder <code>11</code> sein.</p>
            <p>Die richtige Lösung ist <code>11</code>. JavaScript berücksichtigt dabei die arithmetische Regel, dass eine Multiplikation vor einer Addition Vorrang hat. Vielleicht ist Ihnen diese Regel auch als <i>Punkt-vor-Strich</i>-Regel bekannt.</p>
            <p>Dieses Prinzip lässt sich in JavaScript verallgemeinern. Alle Operatoren sind in JavaScript in einer Auswertungsreihenfolge angeordnet. Da der Additionsoperator (+) erst nach dem Multiplikationsoperator (*) verzeichnet ist, funktioniert die Punkt-vor-Strich-Rechnung. Folgende Tabelle zeigt die bisher behandelten Operatoren in Auswertungsreihenfolge (auch <keyword>Priorität </keyword>oder <keyword>Präzedenz</keyword>):</p>
            <table id="priority_table">
                <caption>Operatoren in Auswertungsreihenfolge</caption>
                <thead>
                    <tr>
                        <th>Priorität /<br/>Präzedenz</th>
                        <th>Name</th>
                        <th>Operator</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>typeof-Operator</td>
                        <td>typeof</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Multiplikation, Division, Modulo</td>
                        <td>*<br/>/<br/>%</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Addition, Subtraktion</td>
                        <td>+<br/>-</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Zuweisungsoperator</td>
                        <td>=</td>
                    </tr>
                </tbody>
            </table>
            <p>Operatoren, die den gleichen Rang haben, werden meist von links nach rechts ausgewertet. <i>Meist</i> heißt, dass es einige Ausnahmen gibt. Ein Beispiel ist der Zuweisungsoperator <code>=</code>, den JS von rechts nach links auswertet. Sie sollten Ausdrücke nun grundsätzlich so lesen:</p>
            <ol>
                <li>Werten Sie den Teilausdruck aus, dessen Operator die höchste Priorität hat.</li>
                <li>Ersetzen Sie den Teilausdruck durch das Ergebnis.</li>
                <li>Wiederholen Sie die Schritte 1 und 2, bis Sie nur noch Operatoren gleicher Priorität haben.</li>
                <li>Werten Sie nun von links nach rechts aus.</li>
            </ol>
            <h3>Beispiel</h3>
            <p>
                <b>3 * 4 + 7 / 2 - 3</b> ergibt <b>12 + 3.5 - 3</b> ergibt <b>15.5 - 3</b> ergibt <b>12.5</b>
            </p>
            <figure width="40%">
                <img src="images/prioritaet_01.jpg"/>
                <figcaption>Priorität</figcaption>
            </figure>
            <h2>Klammerung</h2>
            <p>Betrachten Sie nochmals den Ausdruck <code>5 + 3 * 2</code>. Möglicherweise ist es gewünscht, dass <code>5 + 3</code> zuerst ausgewertet wird, um das Ergebnis <code>16</code> zu erhalten. In diesem Fall gibt es die Möglichkeit, runde Klammern zu verwenden, um eine bestimmte Auswertungsreihenfolge zu erzwingen. Der Ausdruck <code>(5 + 3) * 2</code> wird wie gewünscht zu <code>16</code> ausgewertet.</p>
            <p>Runde Klammern gelten selbst als Operatoren (der sogenannte <keyword>Gruppierungsoperator</keyword>) und haben die höchste Priorität. Falls Sie Klammern verschachteln, wird von innen nach außen ausgewertet.</p>
            <h3>Beispiel</h3>
            <p><b>(5 + 3)</b> * <b>2</b> ergibt <b>8</b> * 2 ergibt <b>16</b></p>
            <p><b>(12 / (2 +2) + 3)</b> * 2 ergibt <b>(12 / 4 + 3)</b> * 2 ergibt <b>(3 + 3)</b> * 2 ergibt <b>6 * 2</b> ergibt <b>12</b></p>
            <p>In der Prioritäten-Tabelle (<a href="#priority_table"/>) lassen sich die runden Klammern ergänzen:</p>
            <table id="priority_table_with_brackets">
                <caption>Operatoren in Auswertungsreihenfolge<br/></caption>
                <thead>
                    <tr>
                        <th>Priorität /<br/>Präzedenz</th>
                        <th>Name</th>
                        <th>Operator</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>
                            <b>Gruppierungsoperator</b>
                        </td>
                        <td>
                            <b>Klammern ()</b>
                        </td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>typeof-Operator</td>
                        <td>typeof</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Multiplikation, Division, Modulo</td>
                        <td>*<br/>/<br/>%</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Addition, Subtraktion</td>
                        <td>+<br/>-</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>Zuweisungsoperator</td>
                        <td>=</td>
                    </tr>
                </tbody>
            </table>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinie</h3>
                <p>Versuchen Sie nicht, allzu sehr mit Klammern zu sparen. Falls Sie bezüglich der Priorität unsicher sind, setzen Sie lieber ein Klammernpaar mehr. Dies ist im Zweifelsfall besser als Fehler durch falsche Prioritäten. Einige, wenn auch syntaktisch überflüssige, Klammerpaare mehr helfen bei der Orientierung.</p>
                <p><b>Beispiel</b><br/><b>(3 / a)</b> + <b>(7 + b)</b> + <b>(5 * c)</b> ist lesbarer als <b>3 / a + 7 + b + 5 * c</b> oder gar <b>3/a+7+b+5*c</b>. Deswegen empfehlen wir folgende Programmierrichtlinie:</p>
                <ul>
                    <li>Verwenden Sie Klammern, um Zweifel über die Auswertungsreihenfolge von Ausdrücken auszuräumen oder wenn Sie denken, dass der Code dadurch besser lesbar wird.</li>
                </ul>
            </hint>
            <h1>Testen Sie Ihr Wissen</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_1.js"/>
                        <p>Rückgabe: <blank>5</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_2.js"/>
                        <p>Rückgabewert: <blank>3</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_3.js" />
                        <p>Datentyp: <blank>string</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_4.js" />
                        <p>Rückgabewert: <blank>string</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode>'3 * 4'</blockcode>
                        <p>Datentyp: <blank>string</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_5.js"/>
                        <p>Datentyp: <blank>number</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Markieren Sie gültige Stringliterale.</p>
                    </question_text>
                    <answer>4 * 5</answer>
                    <answer correct="correct">'4 * 5'</answer>
                    <answer correct="correct">"4 * 5"</answer>
                    <answer>4 * "5"</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Markieren Sie gültige Literale.</p>
                    </question_text>
                    <answer correct="correct">'Hello'</answer>
                    <answer correct="correct">"'"</answer>
                    <answer>3 * 5</answer>
                    <answer>"Hello".length</answer>
                    <answer correct="correct">'3 * 5'</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Ausgabe wird in der Konsole erzeugt:</p>
                        <blockcode>console.log('Hello'.length)</blockcode>
                    </question_text>
                    <answer>'Hello'.length</answer>
                    <answer>Hello.length</answer>
                    <answer>Hello</answer>
                    <answer>7</answer>
                    <answer correct="correct">5</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_8.js" />
                    </question_text>
                    <answer>number</answer>
                    <answer correct="correct">string</answer>
                    <answer>literal</answer>
                    <answer>operator</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_9.js" />
                    </question_text>
                    <answer>'number'</answer>
                    <answer>'undefined'</answer>
                    <answer correct="correct">'string'</answer>
                    <answer>'literal'</answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Wert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_10.js"/>
                    </question_text>
                    <answer>1</answer>
                    <answer>6</answer>
                    <answer correct="correct">6.5</answer>
                    <answer>der Ausdruck ist syntaktisch falsch</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Wert des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/03/question_11.js" />
                    </question_text>
                    <answer>1</answer>
                    <answer>6</answer>
                    <answer>6.5</answer>
                    <answer correct="correct">der Ausdruck ist syntaktisch falsch</answer>
                </question>
            </questions>
            <h1>Übung</h1>
            <exercise>
                <name>Nur ein bisschen rechnen&#8230;</name>
                <content>
                    <table>
                        <thead>
                            <tr>
                                <th>Ausdruck</th>
                                <th>Rückgabewert</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>3 + 4</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>3 * 12</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>25 + 12</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>(12 - 3) / 3</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>12 % 3</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>12 * (44 / 11) / 3 + 67</td>
                                <td>&#x00A0;</td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <td>Ausdruck</td>
                                <td>Rückgabewert</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>3 + 4</td>
                                <td>7</td>
                            </tr>
                            <tr>
                                <td>3 * 12</td>
                                <td>36</td>
                            </tr>
                            <tr>
                                <td>25 + 12</td>
                                <td>37</td>
                            </tr>
                            <tr>
                                <td>(12 - 3) / 3</td>
                                <td>3</td>
                            </tr>
                            <tr>
                                <td>12 % 3</td>
                                <td>0</td>
                            </tr>
                            <tr>
                                <td>12 * (44 / 11) / 3 + 67</td>
                                <td>83</td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Variablen oder die Realität in Schubladen</lesson_name>
            <topics>
                <li>was der Unterschied zwischen Variablen und Konstanten ist.</li>
                <li>weitere Operatoren und Zuweisungen kennen.</li>
                <li>wie Sie eine erste Benutzerabfrage programmieren.</li>
            </topics>
            <blockquote/>
            <h1>Ganz schön variabel</h1>
            <p>Wie in vielen anderen Programmiersprachen gibt es auch in JS Variablen. Variablen erlauben das Speichern von Werten und ermöglichen es, jederzeit auf diese Werte zuzugreifen und sie zu verändern.</p>
            <h1>Variablen anlegen</h1>
            <figure width="25%" float="left">
                <img src="images/drawings/variable_drawer.png"/>
                <figcaption>Prinzip einer Variablen<br/><code>let price = 4;</code></figcaption>
            </figure>
            <p>Stellen Sie sich Variablen wie Schubladen eines Schrankes vor. In jeder Schublade liegt eine Information. Eine Information kann beispielsweise der Name des Benutzers sein, die Hintergrundfarbe einer Webseite oder der Preis eines Artikels. Wie aber lässt sich die gerade benötigte Information finden? Wie würden Sie bei einem herkömmlichen Schrank die richtige Schublade finden, ohne vorher jede öffnen zu müssen?<br/>Ganz einfach, Sie beschriften sie. Auf jede Schublade kleben Sie ein Etikett, das den Inhalt oder die Art des Inhalts beschreibt.</p>
            <p>In JS und anderen Programmiersprachen nennt man solche Etiketten <keyword>Bezeichner</keyword> (engl.: <keyword>identifier</keyword>), bzw. speziell bei Variablen auch Variablenbezeichner. Wenn Sie eine Variable anlegen möchten, so müssen Sie JS nur mitteilen, dass es sich um eine Variable handelt und wie der Bezeichner lautet. Dass es sich um eine Variable handelt, erfährt JS durch das Schlüsselwort <keyword>let</keyword>. Den Bezeichner dagegen dürfen Sie frei wählen. Allerdings müssen Sie dabei einige Regeln beachten &#x2014; dazu später mehr. Wollen Sie beispielsweise eine Variable anlegen, die einen Benutzernamen speichert, so schreiben Sie:</p>
            <blockcode numbered="numbered" src="code/04/let.js" />
            <hint>
                <h3>Neu in ECMAScript 2015</h3>
                <p>Wenn Sie bereits Programmierkenntisse besitzen und Variablen bislang mit <i>var</i> gekennzeichnet haben, werden Sie sich nun vermutlich über das <i>let</i> wundern. Tatsächlich hat ES5 und abwärts <i>var</i> verwendet. Auch wenn <i>var</i> nach wie vor funktioniert, bringt <i>let</i> doch einen entscheidenden Vorteil mit: sogenanntes <keyword>local Scoping</keyword> &#x2014; dazu später mehr.</p>
            </hint>
            <p>Die deutsche Übersetzung von <i>let</i> ist im weitesten Sinne <i>lass</i> oder <i>sei</i>. Die Idee hinter <i>let</i> lässt sich am besten an einem Satz zeigen.</p>
            <h3>Beispiel</h3>
            <p><code>let username = 'Oswine';</code><br/><i>Lass</i> den Benutzernamen Oswine
                sein.</p>
            <hint>
                <h3>Schlüsselwörter</h3>
                <p>Wie Sie nun schon wissen, handelt es sich bei <b>username</b> um einen <i>Variablenbezeichner</i> und bei der Anweisung <code>let username;</code> um eine <i>Variablendeklaration</i>. Das Wort <i>let</i> dagegen ist ein sogenanntes <keyword>Schlüsselwort</keyword> (engl.: <keyword>keyword</keyword>). Schlüsselwörter sind ein fester Bestandteil der Programmiersprache. Sie haben eine fest definierte Bedeutung und können nicht für andere Zwecke eingesetzt werden. Sie werden in JS übrigens immer komplett kleingeschrieben.</p>
            </hint>
            <figure width="50%">
                <img src="images/language_dependent/de/declare_var.png"/>
                <figcaption>Deklaration</figcaption>
            </figure>
            <p>Der Bezeichner <b>username</b> ist frei gewählt. Sie könnten stattdessen auch <keyword>userName</keyword> oder einfach <keyword>user</keyword> verwenden. Die Anweisung wird als <keyword>Variablendeklaration</keyword> bezeichnet, da sie die Variable bekannt macht.</p>
            <hint>
                <h3>Geeignete Bezeichner</h3>
                <p>Geeignete Bezeichner zu finden ist beim Programmieren von hoher Bedeutung, denn damit erleichtern Sie nicht nur sich selbst, sondern ggf. auch Dritten das Verstehen Ihres Codes. Gehen Sie besser nicht davon aus, dass Sie sich in ein paar Wochen oder Monaten noch an die genaue Bedeutung Ihrer Variablen erinnern. Die Erfahrung zeigt, dass dem so nicht ist.</p>
                <p>Tatsächlich wird Code sehr viel häufiger gelesen als geschrieben. Optimieren Sie nicht das Schreiben, indem Sie Namen verkürzen. Sorgen Sie dafür, dass Ihre Variablennamen langfristig verständlich bleiben.</p>
                <p>In der nächsten Lektion haben wir noch mehr Tipps, wie Sie geeignete Bezeichner finden!</p>
            </hint>
            <h1>Variablen Werte zuweisen</h1>
            <p>Sie haben gewissermaßen eine Schublade gekauft und ein Etikett aufgeklebt, das die Aufschrift <i>username</i> trägt. Nun fehlt noch der Inhalt der Schublade.</p>
            <p>Um einen Inhalt in die Variable &#187;hineinzupacken&#171;, gibt es in JavaScript das Konzept der Zuweisung &#8211; Sie weisen einer Variable ihren Inhalt zu. Ausgedrückt wird die Zuweisung in JS durch den sogenannten <keyword>Zuweisungsoperator</keyword> &#x2014; dargestellt durch das Gleichheitszeichen <code>=</code>. Wichtig ist, dass auf der linken Seite der Zuweisung der Variablenbezeichner steht und auf der rechten Seite der Wert (z.&#x202F;B . der Name <i>Ladislaus</i>):</p>
            <blockcode numbered="numbered" src="code/04/assignment.js" />
            <p>Die Richtung ist wichtig. Die Umkehrung</p>
            <blockcode numbered="numbered" src="code/04/wrong_assignment.js" />
            <p>führt zu einem Fehler. Sie können einen Inhalt, z.&#x202F;B. einen Kugelschreiber, in eine Schublade packen, aber keine Schublade in einen Inhalt. </p>
            <hint>
                <p>In eine Variable lässt sich ein Wert einspeichern, aber in einen Wert keine Variable.</p>
            </hint>
            <p>Ebenfalls essenziell sind die Anführungszeichen. Daran erkennt JS, dass es sich um den <b>Wert</b> <i>Ladislaus</i> handelt und nicht etwa um eine <b>Variable</b>, die <i>Ladislaus</i> heißt.</p>
            <p>Da nun in der Variable ein Wert eingespeichert ist, können Sie diesen Wert bei Bedarf verwenden, indem Sie über den Bezeichner <b>username</b> darauf zugreifen. Folgende Zeile gibt den Inhalt der Variable <b>username</b> in der Konsole aus:</p>
            <blockcode numbered="numbered" src="code/04/log_variable.js" />
            <p>Hier sehen Sie das vollständige Programm:</p>
            <blockcode numbered="numbered" src="accompanying_files/04/examples/variable.js"/>
            <p>Die Konsole gibt wie erwartet das Wort <i>Ladislaus</i> aus. Vielleicht haben Sie
                schon darüber nachgedacht, warum Sie bisher bei der Ausgabe die Anführungszeichen
                benötigt haben. Wenn Sie Zeile 6 durch <code>console.log('username');</code>
                ersetzen, erhalten Sie in der Ausgabe den Text <i>username</i> statt
                    <i>Ladislaus</i>. Die Anführungszeichen ermöglichen es, Strings von Variablen zu
                unterscheiden.</p>
            <p>Ist Ihnen der Inhalt der Variable schon beim Erstellen der Variable bekannt, können Sie die Schreibweise abkürzen &#x2014; mittels einer sogenannten <keyword>Variableninitialisierung</keyword>. Führen Sie dazu die Deklaration der Variable und das Zuweisen des Wertes in einem Schritt durch:</p>
            <blockcode numbered="numbered" src="code/04/initialisation_and_assignment.js"/>
            <p>Vollständig sieht das Programm dann so aus:</p>
            <blockcode numbered="numbered" src="code/04/create_and_log.js" />
            <hint>
                <h3>Achtung: let in der Webkonsole</h3>
                <p>In der Webkonsole gibt es bei Variablen eine Besonderheit zu beachten. Wenn Sie
                    zweimal hintereinander den Code mit <b>Run</b> ausführen, erhalten Sie folgenden
                    (oder einen sehr ähnlichen) Fehler:</p>
                <p>
                    <code>SyntaxError: redeclaration of let username</code>
                </p>
                <p>Das liegt daran, dass Firefox die Variable schon beim ersten Mal angelegt (deklariert) hat und sich das &#187;merkt&#171;. Beim zweiten Mal gibt es die Variable bereits unter dem gleichen Namen und Sie erhalten die berüchtigte Fehlermeldung &#187;Redeklaration&#171;.</p>
                <p>Abhilfe schafft ein Reload: Man kann einen manuellen Browserreload durchführen, die Browseradresse <code>about:blank</code> eingeben, oder den Javascriptcode der Webkonsole als Datei speichern (<kbd>ctrl + s</kbd>, <kbd>cmd + s</kbd>) und in der neu geöffneten Webkonsole wieder einlesen (<kbd>ctrl + o</kbd>, <kbd>cmd + o</kbd>).</p>
            </hint>
            <h1>Jetzt aber prompt bitte!</h1>
            <p>In der Praxis möchten Sie natürlich auch Daten verwenden, die Sie nicht vorher selbst bestimmen, sondern solche, die ein Anwender eingibt. Erst so wird Ihre Software (z.&#x202F;B. eine Website) interaktiv.</p>
            <p>Daher erweitern wir das Beispiel mit dem Benutzernamen. Sie bestimmen nicht mehr selbst den Namen, sondern lassen diesen von unserem fiktiven Anwender wählen. Dafür benötigen Sie die Funktion <code>prompt</code>:</p>
            <blockcode numbered="numbered" src="code/04/prompt.js" />
            <p>Wie schon bei der Alert-Box, öffnet sich ein Fenster im Browser. Dieses beinhaltet &#x2014; anders als das der Alert-Box &#x2014; nicht nur den Text <i>Please let me know your name!</i>, sondern auch ein Eingabefeld.</p>
            <figure width="50%">
                <img src="images/screenshots/prompt_username.png"/>
                <figcaption>Fenster mit Eingabeaufforderung (die Funktion <code>prompt</code>)</figcaption>
            </figure>
            <p>Der Benutzer kann einen Namen eingeben und mit <i>OK</i> bestätigen. Bisher passiert aber sonst nichts. Den eingegebene Namen können Sie noch nicht verwerten, da Sie die Eingabe bisher nicht abspeichern.</p>
            <p>Mit der Zuweisung haben Sie im letzten Abschnitt den Namen <code>'Ladislaus'</code>
                in die Variable <code>username</code> gespeichert:</p>
            <blockcode numbered="numbered" src="code/04/username_ladislaus.js" />
            <p>Ersetzen Sie nun den String <code>'Ladislaus'</code> durch den Aufruf der
                <code>prompt</code>-Funktion:</p>
            <blockcode numbered="numbered" src="code/04/prompt_to_username.js"/>
            <p>Nachdem der Benutzer <i>Oswine</i> eingegeben hat, führt das Programm diesen Schritt aus:</p>
            <blockcode numbered="numbered" src="code/04/username_oswine.js"/>
            <p>Diesen Code gibt es nicht wirklich &#x2014; er dient zur Verdeutlichung. Der Wert, durch den JS <code>prompt</code> ersetzt (im Beispiel der String <i>Oswine</i>), ist der Rückgabewert von <code>prompt</code>.</p>
            <p>So wird der eingegebene String <i>Oswine</i> in der Variable <code>username</code> gespeichert. Hier sehen Sie das vollständige Programm:</p>
            <blockcode numbered="numbered" src="code/04/username_prompt.js" />
            <p>Sie können den Code wieder kürzen:</p>
            <blockcode numbered="numbered" src="accompanying_files/04/examples/prompt.js"/>
            <figure width="90%">
                <img src="images/language_dependent/de/init.png"/>
                <figcaption>Initialisierung</figcaption>
            </figure>
            <exercise>
                <name>Also sowas fragt man doch nicht!</name>
                <content>
                    <p>Fragen Sie nun nach dem Alter des Anwenders, speichern Sie es in einer Variable und geben Sie es über die Konsole aus. <br/>Denken Sie daran, für die Variable einen sinnvollen Bezeichner zu wählen.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/04/solutions/age.js"/>
                </answer>
            </exercise>
            <h1>Grundsolide: Konstanten</h1>
            <p>Wie wäre es mit einem etwas praxisnäheren Beispiel, z.&#x202F;B. einem kleinen Mehrwertsteuer-Rechner? Der Benutzer gibt einen Netto-Preis ein und erhält den Brutto-Betrag zurück. Gehen Sie der Einfachheit halber von 20% Mehrwertsteuer aus.</p>
            <blockcode numbered="numbered" src="code/04/brutto_price.js" />
            <p>Das funktioniert hervorragend &#x2014; nur ist der Code nicht sonderlich elegant. Wenn Sie eine Zahl wie <code>1.20</code> im Code sehen, ist oft nicht sofort klar, was sie bedeutet. Bei diesem einfachen Beispiel können Sie sich das vielleicht noch schnell erschließen, in der Praxis ist es jedoch oft nicht einfach. Erfahrene Entwickler nennen eine solche Zahl <keyword>Magic Number</keyword>, da sie quasi vom Himmel fällt.</p>
            <p>Normalerweise ändert sich die Mehrwertsteuerrate nicht, solange das Programm läuft &#x2014; und danach hoffentlich nicht sofort (naja, die nächste Erhöhung kommt bestimmt). Deswegen können Sie dafür eine sogenannte <keyword>Konstante</keyword> verwenden. Ein Konstante ist einer Variable recht ähnlich. Der Unterschied besteht nur darin, dass sie nicht variabel, sondern konstant ist (wer hätte das gedacht?).</p>
            <blockcode numbered="numbered" src="accompanying_files/04/examples/const.js"/>
            <p>Damit ist der Wert im Code benannt und Zeile 6 gibt keine Rätsel mehr auf. Ein weiterer Vorteil ist, dass Sie leichter Änderungen vornehmen können. Sobald die unvermeidliche Steuererhöhung kommt, müssen Sie den Wert nicht lange in den Tiefen Ihres Codes suchen, sondern Sie können ihn direkt anpassen &#x2014; zugegeben, bei so wenigen Codezeilen ist das noch kein großes Problem, aber Ihre Programme werden nicht so klein bleiben.</p>
            <p>Damit dienen diese Konstanten gewissermaßen der <b>Konfiguration Ihres Programms</b>. Wenn Sie das konsequent umsetzen, finden Sie am Anfang ihres Programms eine Ansammlung dieser Konstanten und sehen somit auf einen Blick alle relevanten &#187;Stellschrauben&#171;.</p>
            <p>Zur Verbesserung der Übersicht definieren wir deswegen weitere Programmierrichtlinien:</p>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <ul>
                    <li>Vermeiden Sie Magic Numbers.</li>
                    <li>Schreiben Sie Konstanten, die der Konfiguration dienen, komplett in Großbuchstaben und verwenden Sie den Underscore <code>_</code> zur Worttrennung. </li>
                    <li>Deklarieren Sie Konstanten, die der Konfiguration dienen, am Anfang Ihres Codes.</li>
                </ul>
            </hint>
            <h1>Kampf der Giganten: Variable vs. Konstante</h1>
            <p>In der einen Ecke des Rings&#8230;</p>
            <p>Nein, ernsthaft &#x2014; wie unterscheiden sich denn nun Konstanten von Variablen? Abgesehen von den Schreibweise gemäß den Programmierrichtlinien und dem unterschiedlichem Einsatzzweck gibt es auch einen harten technischen Unterschied.</p>
            <p>Ein Variable kann ihren Wert jederzeit ändern. Bei einer Konstanten ist das nicht möglich. Sobald sie eine Konstante einmal auf einen Wert festgenagelt haben, bleibt der Wert bis zum Ende des Programms fest. Hier ein Gegenbeispiel:</p>
            <blockcode numbered="numbered" src="code/04/tax_rate.js" />
            <p>Der JS-Interpreter quittiert diesen Code mit einer Fehlermeldung wie &#187;<i>TAX_RATE is read-only</i>&#171; und bricht das Programm ab. Tatsächlich ist das ein erwünschtes Verhalten. Sie können dadurch sicherstellen, dass die Konstante nicht an einer anderen Stelle versehentlich überschrieben wird.</p>
            <p>Die genaue Fehlermeldung ist übrigens von der jeweiligen JS-Umgebung (Browser, Node.js, JS Bin, etc.) abhängig.</p>
            <exercise>
                <name>Immer diese Steuern&#8230;</name>
                <content>
                    <p>Preise könnten so viel angenehmer sein, wenn die verflixte Mehrwertsteuer nicht wäre. Aber wenn Sie die Steuer schon selbst zahlen müssen, kann Ihnen wenigstens das Ausrechnen des Brutto-Preises jemand abnehmen: JS! Schreiben Sie also ein Programm, das Ihnen den Bruttopreis zu $150 (netto) berechnet und ausgibt &#x2014; Hinweis: Es sollten $183 sein.</p>
                    <p>Folgende Definitionen stehen Ihnen zur Verfügung:</p>
                    <blockcode numbered="numbered" src="accompanying_files/04/exercises/tax.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/04/solutions/tax.js"/>
                </answer>
            </exercise>
            <h1>Zusammengesetzte Zuweisungsoperatoren</h1>
            <p>Zuweisungen mit dem Zuweisungsoperator <code>=</code> begegnen Ihnen sehr häufig in JS-Programmen. Nehmen wir an, Björn möchte einen Button, mit dem er den Preis eines Artikels um 10% erhöhen kann. Dann würde sich irgendwo im Shop folgender Code-Schnippsel finden lassen:</p>
            <blockcode numbered="numbered" src="code/04/multiply_price.js" />
            <p>In Zeile 2 liest das Programm den alten Wert von Preis (hier: <code>199</code>) aus, multipliziert ihn mit <code>1.10</code> und speichert ihn anschließend in die Variable <code>price</code> zurück.</p>
            <p>Nachteilig ist, dass die Variable <code>price</code> zweimal in der Zeile steht. Es ist in jedem Fall die gleiche Variable gemeint. Sollten Sie den Namen der Variable ändern wollen (z.&#x202F;B. in <code>productPrice</code>), müssen Sie ihn zweimal ändern. Vergessen Sie eine der beiden Stellen, haben Sie einen Fehler im Code. Das ist eine <keyword>Redundanz</keyword>. Solcher oder ähnlicher Code wird Ihnen noch oft in Ihrer Programmierer-Laufbahn begegnen.</p>
            <p>Deswegen gibt es hierfür eine Kurzschreibweise. Sie können das <code>*</code> und das <code>=</code> zu einem neuen Operator <code>*=</code> zusammenfassen:</p>
            <blockcode numbered="numbered" src="code/04/multiply_price_short.js" />
            <p>Der Effekt ist genau der gleiche, <code>price</code> steht aber nun nur noch einmal in der Zeile &#x2014; Problem gelöst. Zudem ist die Zeile für das geübte Entwickler-Auge schneller zu lesen und zu erfassen (es sind auch ein paar Zeichen weniger zu tippen &#x2014; aber das ist kein nennenswerter Vorteil).</p>
            <p>Der Operator <code>*=</code> gehört zur Gruppe der <keyword>zusammengesetzten Zuweisungsoperatoren</keyword>. Der Trick des Zusammensetzens funktioniert auch mit allen übrigen arithmetischen Operatoren wie <code>+</code>, <code>-</code>, <code>/</code> und <code>%</code> (modulo).</p>
            <p>Genau wie die Zuweisung selbst haben diese Operatoren eine sehr geringe Priorität und finden sich deswegen ganz unten in der Auswertungsreihenfolge.</p>
            <table id="priority_table_combined_operators">
                <caption>Operatoren in Auswertungsreihenfolge<br/>ªBei den Funktionsaufrufen handelt es sich nicht um Operatoren, aber Sie können durchaus Teil eines Ausdrucks sein.<br/></caption>
                <thead>
                    <tr>
                        <th>Priorität /<br/>Präzedenz</th>
                        <th>Name</th>
                        <th>Operator</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Funktionsaufrufª,<br/>Gruppierungsoperator</td>
                        <td>Funktionsaufruf, z.&#x202F;B. <code>prompt()</code><br/>Klammern ()</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>typeof-Operator</td>
                        <td>typeof</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Multiplikation, Division, Modulo</td>
                        <td>*<br/>/<br/>%</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>Addition, Subtraktion</td>
                        <td>+<br/>-</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>
                            <b>Zuweisungsoperatoren</b>
                        </td>
                        <td>=<br/><b>+=<br/>-=<br/>*=<br/>/=<br/>%=</b></td>
                    </tr>
                </tbody>
            </table>
            <p>Eine Kleinigkeit gilt es bei den zusammengesetzten Zuweisungen noch zu beachten: Diese Operatoren speichern einen Wert zurück und funktionieren deswegen nur mit Variablen.</p>
            <blockcode numbered="numbered" src="code/04/wrong_multiply_short.js" />
            <p>Den obigen Code quittiert die Konsole mit der Fehlermeldung &#187;<code>ReferenceError:
                    invalid assignment left-hand side</code>&#171;</p>
            <figure width="60%">
                <img src="images/screenshots/invalid_assignment.png"/>
                <figcaption>Fehlermeldung für <code>199 *= 1.10</code></figcaption>
            </figure>
            <p>D.&#x202F;h. auf der linken Seite der Zuweisung (assignment) steht keine Variable &#x2014; einer Zahl lässt sich nichts zuweisen, <code>199 = 218.9</code> macht einfach keinen Sinn. Deswegen ist die Zuweisung falsch (invalid).</p>
            <hint>
                <p>Auf der linken Seite einer Zuweisung (auch einer zusammengesetzten) muss immer eine Variable stehen!</p>
            </hint>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinie zu Operatoren</h3>
                <p>Wie Sie in dieser Lektion sehen konnten, bietet es sich an, vor und nach dem Operatoren (auch dem Zuweisungoperator) ein Leerzeichen einzufügen. Prinzipiell spielt es keine Rolle, ob Sie ein, zwei, fünf oder keine Leerzeichen verwenden. JS ignoriert sogenannten White&#x00AD;space (Leerzeichen, Zeilenumbrüche oder Tabulatoren). Lediglich innerhalb der Anführungszeichen sind Leerzeichen von Bedeutung, da sie in der Ausgabe zu sehen sind. Grundsätzlich ist es aber sinnvoll, Whitespace zu verwenden, um den Code übersichtlicher zu gestalten. Deswegen gilt ab sofort folgende Programmierrichtlinie: </p>
                <ul>
                    <li>Vor und nach einem Operator mit zwei Operanden (z.&#x202F;B. Additions- oder Zuweisungsoperator) steht ein Leerzeichen.</li>
                </ul>
                <h3>Beispiele</h3>
                <ul>
                    <li><code>3 + 4</code> ist lesbarer als <code>3+4</code></li>
                    <li><code>let preis = 3.88;</code> ist lesbarer als
                        <code>let preis=3.88;</code></li>
                </ul>
            </hint>
            <h1>Ausdrücklich mehr Ausdruck?</h1>
            <p>Sie haben Ausdrücke in verschiedenen Formen kennen gelernt. Es ist an der Zeit, den Begriff <i>Ausdruck</i> etwas näher zu präzisieren. Die folgende Definition ist längst nicht so genau, wie die aus der Sprachspezifikation (ECMA International 2015), sollte aber zum grundsätzlichen Verständnis ausreichen. </p>
            <hint>
                <p>Ein Ausdruck ist </p>
                <ul>
                    <li>ein Literal</li>
                    <li>eine Variable/Konstante</li>
                    <li>eine beliebige syntaktisch-korrekte Kombination aus Literalen, Variablen, Operatoren und Funktionsaufrufen.</li>
                </ul>
            </hint>
            <p>Hier ein paar Beispiele</p>
            <ul>
                <li><code>7</code></li>
                <li><code>a</code> (mit vorher z.&#x202F;B. let a = 3;)</li>
                <li><code>'Hallo ' + prompt('Name')</code></li>
                <li><code>7  *  2</code></li>
                <li><code>7 * 2 * (3 - a)</code></li>
            </ul>
            <p>Ausdrücke erkennen Sie vor allem daran, dass sie einen Rückgabewert haben. So ist der Rückgabewert von <code>7 * 2</code> das Ergebnis 14. Ein Literal wie <code>7</code> hat einfach den Rückgabewert 7. Sie erkennen Ausdrücke auch daran, dass sie sich in größere Ausdrücke einbinden lassen. </p>
            <p><b>Beispiel:</b> Der Ausdruck <code>7 * 2</code> lässt sich in <code>5 + 7 * 2</code> einbinden.</p>
            <p>Im Umkehrschluss lassen sich Anweisungen im Gegensatz zu Ausdrücken nicht wiederum in Ausdrücke einbinden. </p>
            <p><b>Beispiel:</b>
                <code>let a = 3;</code> ist eine Anweisung und kein Ausdruck. <code>5 + let a = 3</code> führt zu einem Syntaxfehler.</p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Als was bezeichnet man &#187;let&#171; in folgender Codezeile:</p>
                        <blockcode numbered="numbered" src="code/04/question1.js" />
                    </question_text>
                    <answer>Ausdruck</answer>
                    <answer>Bezeichner</answer>
                    <answer correct="correct">Schlüsselwort</answer>
                    <answer>Variablendeklaration</answer>
                    <answer>Zuweisung</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Als was bezeichnet man den Teil &#187;3 + b&#171; in folgender Codezeile:</p>
                        <blockcode numbered="numbered" src="code/04/question2.js" />
                    </question_text>
                    <answer correct="correct">Ausdruck</answer>
                    <answer>Bezeichner</answer>
                    <answer>Schlüsselwort</answer>
                    <answer>Variablendefinition</answer>
                    <answer>Zuweisung</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Als was bezeichnet man den Teil &#187;a = 3 + b&#171; in folgender Codezeile:</p>
                        <blockcode numbered="numbered" src="code/04/question3.js" />
                    </question_text>
                    <answer>Ausdruck</answer>
                    <answer>Bezeichner</answer>
                    <answer>Schlüsselwort</answer>
                    <answer>Variablendefinition</answer>
                    <answer correct="correct">Zuweisung</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Als was bezeichnet man &#187;a&#171; in folgender Codezeile:</p>
                        <blockcode numbered="numbered" src="code/04/question4.js" />
                    </question_text>
                    <answer>Ausdruck</answer>
                    <answer correct="correct">Bezeichner</answer>
                    <answer>Schlüsselwort</answer>
                    <answer>Variablendefinition</answer>
                    <answer>Zuweisung</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Für eine Projektmanagementsoftware muss eine gegebene Stundenanzahl in Tage und Rest-Stunden umgerechnet werden. Welchen Ausdruck können Sie hierfür einsetzen?</p>
                    </question_text>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question5_1.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question5_2.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question5_3.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question5_4.js" />
                    </answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Eine geplante einstündige Beratung dauert insgesamt 85 Minuten. Wie ermitteln Sie, wieviele Minuten die Beratung überzogen wurde?</p>
                    </question_text>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question6_1.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question6_2.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question6_3.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question6_4.js" />
                    </answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Der Wert der Variablen <code>laenge</code> soll auf das Doppelte erhöht werden. Welche Anweisung ermöglicht das?</p>
                    </question_text>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question7_1.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question7_2.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question7_3.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question7_4.js" />
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Halbieren Sie den Wert der Variablen <code>dauer</code>.</p>
                    </question_text>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question8_1.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question8_2.js" />
                    </answer>
                    <answer>
                        <blockcode numbered="numbered" src="code/04/question8_3.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/04/question8_4.js" />
                    </answer>
                </question>
            </questions>
        </lesson>
        <lesson>
            <lesson_name>Sehr bezeichnend, diese Bezeichner!</lesson_name>
            <topics>
                <li>was Bezeichner sind.</li>
                <li>was Sie bei Bezeichnern beachten müssen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Much of the skill in writing unmaintainable code is the art of naming variables and methods. They don't matter at all to the compiler. That gives you huge latitude to use them to befuddle the maintenance programmer.</p>
                </blockquote>
                <figcaption>Roedy Green, How To Write Unmaintainable Code</figcaption>
            </figure>
            <p>Wir haben Ihnen versprochen, dass wir noch etwas genauer darauf eingehen, wie Sie Variablen (und andere Sprachelemente) benennen können &#x2014; oder sollten. Die Regeln für Bezeichner in JS (siehe <a href="http://www.ecma-international.org/ecma-262/6.0/">Ecma International 2015</a>) sind recht lax. Auch wenn ein Bezeichner wie beispielsweise <code>$27__Äööö</code> prinzipiell erlaubt ist, macht er in der Praxis doch wenig Sinn. Deswegen definieren wir striktere Programmierrichtlinien, die Ihnen helfen, sinnvolle Bezeichner zu wählen.</p>
            <p>Kein Sorge &#x2014; diese Regeln stammen nicht etwa aus unseren eigenen Köpfen, wir sind an dieser Stelle so frei uns an den Programmierrichtlinien von Airbnb zu orientieren. Sie finden sie außerhalb dieses Kurses in vielen realen Projekten, Büchern und Webseiten.</p>
            <h1>Aussagekräftige Bezeichner</h1>
            <p>Oft finden Sie im Quellcode älterer Anwendungen einzelne Buchstaben als Variablenbezeichner. So kann es vorkommen, dass die Variable <code>x</code> das Alter einer Person, die Variable <code>y</code> den Nachnamen und <code>z</code> den Vornamen einer Person speichert. Code zu lesen, der solche Bezeichner verwendet, ist natürlich schwierig. Deswegen ist es erforderlich, möglichst aussagekräftige, für sich sprechende Bezeichner zu wählen.&#x00A0;Sie sollten auch nach einem halben Jahr noch verstehen, was mit dem Bezeichner gemeint ist. Andere Programmierer sollten die Bedeutung im Idealfall intuitiv anhand des Bezeichners verstehen. Was mit <code>alter</code> gemeint ist, ist ersichtlich. Dass <code>a</code> oder <code>x</code> das Alter meint, lässt sich dagegen nur aufwendig aus dem Zusammenhang schließen &#x2014; wenn überhaupt.</p>
            <h3>Beispiel</h3>
            <p>Schreiben Sie</p>
            <ul>
                <li><code>alter</code> statt <code>x</code></li>
                <li><code>vorname</code> statt <code>z</code></li>
                <li><code>preis</code> statt <code>p</code></li>
            </ul>
            <hint>
                <h3>Verwenden Sie sprechende Bezeichner!</h3>
            </hint>
            <p>Sie sollten selbstverständlich auch keinen Bezeichner wählen, der etwas anderes meint als das, was er beinhaltet. So ist <code>alter</code> nur dann ein sinnvoller Bezeichner, wenn er wirklich einen Wert enthält, der ein Alter darstellt. Sie sollten also nicht etwa den Namen einer Person in der Variable <code>alter</code> einspeichern.</p>
            <p>Ein Indiz für die Aussagekraft eines Bezeichners ist auch seine Länge. Variablen, die aus nur einem Zeichen bestehen, sind meistens problematisch (Kellerwessel 2002). Auch kurze Variablennamen, die ihre Bedeutung nicht vollständig darstellen, sind problematisch. Anfänger schrecken oft vor einem längeren Variablennamen zurück, weil sie die Tipparbeit scheuen. Tatsächlich können wir aus Erfahrung sagen, dass das normalerweise kein Problem darstellt. In Wirklichkeit wird Code sehr viel häufiger gelesen, als er geschrieben wird. </p>
            <hint>
                <p>Sie sollten immer die Zeit zum Lesen und Verstehen Ihres Codes optimieren &#x2014; nicht die Zeit zum Erstellen.</p>
            </hint>
            <p>Ein Bezeichner sollte aber auch nicht so lang sein, dass er sich schlecht lesen lässt. So lässt sich z.&#x202F;B. der Bezeichner:<br/><code>textDesFettGedrucktAuszugebendenLinksImMenueRechtsOben</code><br/>durchaus ein wenig verkürzen. Eine Regel für die Maximallänge lässt sich aber schlecht formulieren. Sie müssen von Fall zu Fall unterscheiden, was für die Les- und Wartbarkeit des Codes am sinnvollsten ist.</p>
            <h1>Keine Sonderzeichen</h1>
            <p>Ein Problem ist auch die Verwendung von Sonderzeichen. Zwar ist die Verwendung bestimmter Zeichen aus dem Unicode erlaubt (z.&#x202F;B. deutsche Umlaute), dennoch sollten Sie sich nicht darauf verlassen. Es kann immer mal wieder im (hoffentlich) langen Leben einer Datei zu Veränderungen in der Codierung kommen (und sei es nur durch einen FTP-Upload zum Server).</p>
            <p>Deswegen ist es sinnvoll, sich bei der Vergabe von Bezeichnern auf die Buchstaben des englischen Alphabets (A-Z, a-z), die Ziffern (0-9) und den Unterstrich zu beschränken (Kellerwessel 2002). Stefan Münz (2003) formuliert diese Empfehlung sogar als zwingend. Das bedeutet insbesondere, dass Sie deutsche Umlaute ersetzen sollten, z. B. <code>ö</code> durch <code>oe</code>. Das <code>ß</code> sollten Sie durch <code>ss</code> ausdrücken. Anfangen sollte der Bezeichner außerdem immer mit einem Buchstaben (a-z).</p>
            <h3>Beispiel</h3>
            <p>Schreiben Sie</p>
            <ul>
                <li><code>flaechenInhalt</code> statt <code>flächenInhalt</code></li>
                <li><code>strasse</code> statt <code>straße</code></li>
            </ul>
            <h1>Keine eigenen Abkürzungen</h1>
            <p>Variablennamen abzukürzen ist nicht unproblematisch. Den meisten Programmierern erscheinen ihre selbstgewählten Abkürzungen absolut einleuchtend und selbsterklärend. Ob Sie aber nach einem halben Jahr immer noch wissen, dass <code>artp</code> für <i>Artikelpreis</i> stand, ist eher fraglich. Insbesondere wird sich der Wartungsprogrammierer &#x2014; der den Code zweifelsohne irgendwann warten muss &#x2014; verzweifelt fragen, was denn der Unterschied zwischen <code>artp</code> und <code>artpfremw</code> sein könnte. Tatsächlich sollte <i>artpfremw</i> für <i>Artikelpreis in Fremdwährung</i> stehen &#x2014; das Beispiel stammt aus einem realen Projekt! Verzichten Sie also besser gleich auf den Abküfi (Abkürzungsfimmel).</p>
            <h3>Beispiel</h3>
            <ul>
                <li><code>artikelPreis</code> statt <code>artp</code></li>
                <li><code>messwert</code> statt <code>mswer</code></li>
            </ul>
            <p>Ausgenommen von dieser Regelung sind allgemein gebräuchliche Abkürzungen, von denen Sie erwarten können, dass auch der Wartungsprogrammierer etwas damit anfangen kann. Diese lassen sich auch jederzeit in Abkürzungs- und Akronymwörterbüchern (z.&#x202F;B. <a href="http://www.abkuerzungen.de">http://www.abkuerzungen.de</a>, <a href="http://www.acronymfinder.com">http://www.acronymfinder.com</a>)&#x00A0;nachschlagen. Auf wenig bekannte Abkürzungen sollten Sie aber auch dann verzichten, wenn sie sich nachschlagen lassen.</p>
            <p>Außerdem sollten Sie darauf achten Abkürzungen einheitlich groß (UPPERCASED) oder einheitlich klein (lowercased) zu schreiben.</p>
            <h3>Beispiel</h3>
            <ul>
                <li><code>HTMLCode</code> (für ein Codefragment in der <b>H</b>yper<b>t</b>ext <b>M</b>arkup <b>L</b>anguage)</li>
                <li><code>ust</code> (für Umsatzsteuer)</li>
            </ul>
            <h1>Variablen in camelCase</h1>
            <figure width="50%">
                <img src="images/drawings/camelcase.png"/>
            </figure>
            <p>Ein weiteres Problem ist das Trennen von Wörtern, falls ein Bezeichner aus mehreren Wörtern besteht. Leerzeichen dürfen grundsätzlich nicht verwendet werden. Wörter einfach zusammenzuschreiben ist aber auch keine befriedigende Lösung. Es erschwert die Lesbarkeit und kann in seltenen Fällen sogar zu Mehrdeutigkeiten führen. So ist z. B. <code>Endederdatei</code> nicht sonderlich gut lesbar.</p>
            <p>Deswegen gibt es verschiedene Standards zur Worttrennung. Der in JS verbreitete Standard ist der <keyword>camelCase</keyword>. Dabei wird einfach jedes neue Wort (oder jeder eigenständige Wortteil) mit einem Großbuchstaben begonnen. Ausgenommen davon ist das erste Wort. Es beginnt mit einem Kleinbuchstaben.</p>
            <h3>Beispiel</h3>
            <p>
                <code>Schreiben Sie</code>
            </p>
            <ul>
                <li><code>endeDerDatei</code> statt <code>Endederdatei</code></li>
                <li><code>anzahlDerBuchstaben</code> (oder <code>buchstabenAnzahl</code>) statt <code>Anzahl_der_Buchstaben</code> oder <code>anzahlderbuchstaben</code></li>
            </ul>
            <p>Der camelCase kann außerdem helfen, zusammengesetzte Wörter lesbarer zu gestalten. Führen Sie das folgende kleine Experiment durch: Lesen Sie die folgenden drei Wörter laut vor (Quelle: <a href="http://www.bessersprechen.de/sprachspiel.htm">www.bessersprechen.de/sprachspiel.htm</a>).</p>
            <ul>
                <li>Abendstern</li>
                <li>Morgenstern</li>
                <li>Zwergelstern</li>
            </ul>
            <p>Versuchen Sie es nun noch einmal mit der camelCase-Schreibweise.</p>
            <ul>
                <li>abendStern</li>
                <li>morgenStern</li>
                <li>zwergElstern</li>
            </ul>
            <p>Haben Sie den Unterschied bemerkt? Ähnliche Beispiele sind <i>Nachteilzug</i>, <i>Talentwässerung</i>, <i>Staubecken</i> oder <i>Urinstinkt</i>.</p>
            <h1>Konstanten in SCREAMING_SNAKE_CASE</h1>
            <figure width="90%">
                <img src="images/drawings/screaming_snake.png"/>
            </figure>
            <p>Ausgenommen von der camelCase-Regel sind Konstanten, die der Konfiguration dienen,. JS-Entwickler schreiben diese Konstanten komplett in Großbuchstaben und verwenden Underscores (<code>_</code>) zur Trennung der Wörter bzw. Wortteile. Die Schreibweise mit den Underscores zur Trennung heißt <keyword>snake_case</keyword>, bzw <keyword>SCREAMING_SNAKE_CASE</keyword>, wenn Sie alles in Großbuchstaben schreiben.</p>
            <h3>Beispiel </h3>
            <p>
                <code>const TAX_RATE</code>
            </p>
            <h1>JS-Bezeichner sind case sensitive</h1>
            <p>JS Bezeichner sind <keyword>case sensitive</keyword>. Das bedeutet, dass JS Groß- und Kleinschreibung unterscheidet. So sind <code>bruttoPreis</code> und <code>bruttopreis</code> für JS tatsächlich zwei verschiedene Variablen. Schreiben Sie versehentlich die gleiche Variable auf zwei Arten, kann JS den Zusammenhang nicht mehr herstellen, und Ihr Programm reagiert fehlerhaft.</p>
            <p>Zwei verschiedene Variablen zu verwenden, deren Bezeichner sich tatsächlich nur durch Groß- und Kleinschreibung unterscheiden, ist ebenfalls eine blöde Idee &#x2014; dass müssen wir hoffentlich nicht begründen.</p>
            <h1>Nomen für Variablenbezeichner</h1>
            <p>Drücken Sie Variablen durch Nomen aus (Vermeulen 2000).</p>
            <h3>Beispiel</h3>
            <p>Schreiben Sie <code>farbe</code> statt <code>färben</code>.</p>
            <h1>Variablenbezeichner im Singular</h1>
            <p>Die Variablen, die Sie bisher kennengelernt haben, können nur einen Wert fassen. Beispielsweise können Sie im Moment in <code>produktName</code> nicht die Namen mehrerer Produkte speichern. Verwenden Sie deswegen für diese Variablen stets den Singular (Vermeulen 2000).</p>
            <h3>Beispiel</h3>
            <p>Verwenden Sie <code>produktName</code> statt <code>produktNamen</code></p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Anweisungen deklarieren syntaktisch korrekt eine Konstante?</p>
                    </question_text>
                    <answer>
                        <blockcode numbered="numbered" src="code/05/question1_1.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/05/question1_2.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/05/question1_3.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/05/question1_4.js" />
                    </answer>
                    <answer correct="correct">
                        <blockcode numbered="numbered" src="code/05/question1_5.js" />
                    </answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Welches ist die typischerweise zu verwendende Schreibweise für Variablenbezeichner in JavaScript?</p>
                    </question_text>
                    <answer>WEGLAENGE</answer>
                    <answer>WEG_LAENGE</answer>
                    <answer>weg_Laenge</answer>
                    <answer>WegLaenge</answer>
                    <answer correct="correct">wegLaenge</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Aussagen sind richtig?</p>
                    </question_text>
                    <answer>Sie sollten immer Abkürzungen verwenden, um den Code kompakter zu gestalten.</answer>
                    <answer correct="correct">Gebräuchliche Abkürzungen zu verwenden kann sinnvoll sein.</answer>
                    <answer>Abkürzungen sind verboten.</answer>
                    <answer correct="correct">Bezeichner sind in JavaScript case-sensitiv.</answer>
                    <answer>Bezeichner sind in JavaScript case-insensitiv.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Aussagen sind richtig?</p>
                    </question_text>
                    <answer>Sie sollten möglichst kurze Variablennamen verwenden, um den Code kompakter zu gestalten.</answer>
                    <answer correct="correct">Sie sollten möglichst aussagekräftige Variablennamen verwenden, um den Code lesbarer zu gestalten.</answer>
                    <answer>Umlaute sind in Variablennamen in JavaScript nicht erlaubt.</answer>
                    <answer correct="correct">Umlaute sind in Variablennamen in JavaScript erlaubt, sollten aber in den meisten Fällen eher vermieden werden.</answer>
                    <answer>Umlaute helfen den Code lesbarer zu gestalten und sollten immer verwendet werden.</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Finden Sie geeignete Variablenbezeichner!</name>
                <content>
                    <p>Denken Sie sich geeignete Bezeichner für die Variablen folgender Tabelle aus:</p>
                    <table>
                        <thead>
                            <tr>
                                <th>Bedeutung</th>
                                <th>Variablenbezeichner</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Preis eines Buches in einem Onlineshop</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Anzahl der angemeldeten Benutzer</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Titel einer Webseite</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Höhe eines Hauses auf einer Immobiliensite</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Typ eines Monitors auf der Site eines Herstellers</td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>Fahrgestellnummer eines reparierten Autos auf der Website einer Autowerkstatt</td>
                                <td> </td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <th>Bedeutung</th>
                                <th>Variablenbezeichner</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Preis eines Buches in einem Onlineshop</td>
                                <td>
                                    <i>buchPreis</i>
                                </td>
                            </tr>
                            <tr>
                                <td>Anzahl der angemeldeten Benutzer</td>
                                <td>
                                    <i>onlineNutzer</i>
                                </td>
                            </tr>
                            <tr>
                                <td>Titel einer Webseite</td>
                                <td>
                                    <i>websiteTitel</i>
                                </td>
                            </tr>
                            <tr>
                                <td>Höhe eines Hauses auf einer Immobiliensite</td>
                                <td>
                                    <i>hausHoehe</i>
                                </td>
                            </tr>
                            <tr>
                                <td>Typ eines Monitors auf der Site eines Herstellers</td>
                                <td>
                                    <i>monitorTyp</i>
                                </td>
                            </tr>
                            <tr>
                                <td>Fahrgestellnummer eines reparierten Autos auf der Website einer Autowerkstatt</td>
                                <td>
                                    <i>fahrgestellnummerRepariertesAuto</i>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
            <exercise>
                <name>Verbessern Sie ungeeignete Variablenbezeichner!</name>
                <content>
                    <p>Welche Variablenbezeichner aus der folgenden Liste machen Probleme oder sollten vermieden werden und warum? Vermerken Sie das jeweilige Problem bei den nicht sinnvollen Bezeichnern. Geben Sie (falls nötig) jeweils mindestens einen Verbesserungsvorschlag an.</p>
                    <table>
                        <thead>
                            <tr>
                                <th>Bezeichner</th>
                                <th>Bedeutung</th>
                                <th>Problem</th>
                                <th>Vorschläge</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>bildNr</td>
                                <td>Nummer eines Bildes auf der Seite</td>
                                <td> - </td>
                                <td> - </td>
                            </tr>
                            <tr>
                                <td>bildid</td>
                                <td>Die id eines Bildes auf der Seite</td>
                                <td>
                                    <i>id ist als Abkürzung zulässig, aber Bild und id sind getrennte Wortteile</i>
                                </td>
                                <td>
                                    <i>bildId</i>
                                </td>
                            </tr>
                            <tr>
                                <td>bildZähler</td>
                                <td> Anzahl der hochgeladenen Bilder </td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>zahlerFuerDie<br/>AktuelleZeileIn<br/>DerTabelleDie<br/>DieBenutzer<br/>Auflistet</td>
                                <td>Zähler für die aktuelle Zeile, in der Tabelle, die die Benutzer auflistet</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>urenKelvornAme</td>
                                <td>Vorname des Sohns eines Enkels</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>x</td>
                                <td>Geburtsdatum des Benutzers</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>y</td>
                                <td>Nummer der aktuellen Seite</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>d</td>
                                <td>Dateiname</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>faqUeberschrift</td>
                                <td>Überschrift der Liste häufig gestellter Fragen</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>menHoeh</td>
                                <td>Höhe eines Menüs</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>strName</td>
                                <td>Straßenname</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>wanf</td>
                                <td>Wandfarbe</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>PoStLeiTZaHl</td>
                                <td>Postleitzahl</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>PLZ</td>
                                <td>Postleitzahl</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>plz</td>
                                <td>Postleitzahl</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>2.frage</td>
                                <td>Die 2. Frage</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>anzahl?</td>
                                <td>Die vom Benutzer eingegebene Anzahl von Produktexemplaren, die er kaufen möchte</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>wichtige Meldung!</td>
                                <td>Die Variable enthält den Text einer wichtigen Systemmeldung</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                            <tr>
                                <td>pi</td>
                                <td>Die Zahl π (3.14&#8230;)</td>
                                <td> </td>
                                <td> </td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <th>Bezeichner</th>
                                <th>Bedeutung</th>
                                <th>Problem</th>
                                <th>Vorschläge</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>bildNr</td>
                                <td>Nummer eines Bildes auf der Seite</td>
                                <td> - </td>
                                <td> - </td>
                            </tr>
                            <tr>
                                <td>bildid</td>
                                <td>Die id eines Bildes auf der Seite</td>
                                <td>
                                    <i>id ist als Abkürzung zulässig, aber Bild und id sind getrennte Wortteile</i>
                                </td>
                                <td>
                                    <i>bildId</i>
                                </td>
                            </tr>
                            <tr>
                                <td>bildZähler</td>
                                <td> Anzahl der hochgeladenen Bilder </td>
                                <td>
                                    <i>Umlaute sollten möglichst vermieden werden</i>
                                </td>
                                <td>
                                    <i>bildZaehler</i>
                                </td>
                            </tr>
                            <tr>
                                <td>zahlerFuerDie<br/>AktuelleZeileIn<br/>DerTabelleDie<br/>DieBenutzer<br/>Auflistet</td>
                                <td>Zähler für die aktuelle Zeile, in der Tabelle, die die Benutzer auflistet</td>
                                <td>
                                    <i>Variablenbezeichner sollten sich auf das Wesentliche beschränken</i>
                                </td>
                                <td>
                                    <i>aktuelleZeileInBenutzerliste</i>
                                </td>
                            </tr>
                            <tr>
                                <td>urenKelvornAme</td>
                                <td>Vorname des Sohns eines Enkels</td>
                                <td>
                                    <i>nur der Beginn neuer Wörter wird groß geschrieben</i>
                                </td>
                                <td>
                                    <i>urenkelVorname</i>
                                </td>
                            </tr>
                            <tr>
                                <td>x</td>
                                <td>Geburtsdatum des Benutzers</td>
                                <td>
                                    <i>Variablenbezeichner sollten Aussagekräftig sein</i>
                                </td>
                                <td>
                                    <i>benutzerGeburtsdatum</i>
                                </td>
                            </tr>
                            <tr>
                                <td>y</td>
                                <td>Nummer der aktuellen Seite</td>
                                <td>
                                    <i>Variablenbezeichner sollten Aussagekräftig sein</i>
                                </td>
                                <td>
                                    <i>aktuelleSeite</i>
                                    <i>aktuelleSeitennummer</i>
                                </td>
                            </tr>
                            <tr>
                                <td>d</td>
                                <td>Dateiname</td>
                                <td>
                                    <i>Variablenbezeichner sollten Aussagekräftig sein</i>
                                </td>
                                <td>
                                    <i>dateiname</i>
                                </td>
                            </tr>
                            <tr>
                                <td>faqUeberschrift</td>
                                <td>Überschrift der Liste häufig gestellter Fragen</td>
                                <td>
                                    <i>die Überschrift ändert sich im Normalfall nicht, sie ist somit eine Konstante</i>
                                </td>
                                <td>
                                    <i>FAQ_UEBERSCHRIFT</i>
                                </td>
                            </tr>
                            <tr>
                                <td>menHoeh</td>
                                <td>Höhe eines Menüs</td>
                                <td>
                                    <i>es dürfen nur etablierte Abkürzungen benutzt werden</i>
                                </td>
                                <td>
                                    <i>menueHoehe</i>
                                </td>
                            </tr>
                            <tr>
                                <td>strName</td>
                                <td>Straßenname</td>
                                <td> - </td>
                                <td> - </td>
                            </tr>
                            <tr>
                                <td>wanf</td>
                                <td>Wandfarbe</td>
                                <td>
                                    <i>es dürfen nur etablierte Abkürzungen benutzt werden</i>
                                </td>
                                <td>
                                    <i>wandFarbe</i>
                                </td>
                            </tr>
                            <tr>
                                <td>PoStLeiTZaHl</td>
                                <td>Postleitzahl</td>
                                <td>
                                    <i>nur der Beginn neuer Wörter wird groß geschrieben</i>
                                </td>
                                <td>
                                    <i>postleitzahl</i>
                                    <i>plz</i>
                                </td>
                            </tr>
                            <tr>
                                <td>PLZ</td>
                                <td>Postleitzahl</td>
                                <td>
                                    <i>nur Konstanten werden vollständig groß geschrieben</i>
                                </td>
                                <td>
                                    <i>plz</i>
                                </td>
                            </tr>
                            <tr>
                                <td>plz</td>
                                <td>Postleitzahl</td>
                                <td> - </td>
                                <td> - </td>
                            </tr>
                            <tr>
                                <td>2.frage</td>
                                <td>Die 2. Frage</td>
                                <td>
                                    <i>Punkte in Variablenbezeichnern sind verboten</i>
                                </td>
                                <td>
                                    <i>frage2</i>
                                </td>
                            </tr>
                            <tr>
                                <td>anzahl?</td>
                                <td>Die vom Benutzer eingegebene Anzahl von Produktexemplaren, die er kaufen möchte</td>
                                <td>
                                    <i>Fragezeichen in Variablenbezeichnern sind verboten</i>
                                </td>
                                <td>
                                    <i>kaufAnzahl</i>
                                </td>
                            </tr>
                            <tr>
                                <td>wichtige Meldung!</td>
                                <td>Die Variable enthält den Text einer wichtigen Systemmeldung</td>
                                <td>
                                    <i>Leerzeichen und Ausrufezeichen in Variablenbezeichnern sind verboten</i>
                                </td>
                                <td>
                                    <i>wichtigeMeldung</i>
                                </td>
                            </tr>
                            <tr>
                                <td>pi</td>
                                <td>Die Zahl π (3.14&#8230;)</td>
                                <td>
                                    <i>PI ist eine Konstante</i>
                                </td>
                                <td>
                                    <i>PI</i>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Setzen Sie ein Zeichen &#x2014; mit Strings!</lesson_name>
            <topics>
                <li>wie Sie Strings miteinander verknüpfen.</li>
                <li>was Template Strings sind.</li>
                <li>wie Sie mit Sonderzeichen in Strings umgehen.</li>
            </topics>
            <h1>Die Verkettung glücklicher Strings</h1>
            <p>Wie Sie in der Konsole einen Namen ausgeben, wissen Sie. Im nächsten Schritt ist eine komplette Begrüßung gefragt. Beginnen Sie Ihre Überlegungen mit der Ausgabe des statischen Textes:</p>
            <blockcode numbered="numbered" src="code/06/console_log.js" />
            <p>Tatsächlich kennen Sie den Namen des Benutzers nicht &#x2014; deshalb können Sie den Namen nicht statisch ausgeben. Anstatt <i>Oswine</i> oder einen anderen Namen direkt zu schreiben, setzen Sie eine Variable ein.</p>
            <p>Derzeit ist der ganze Satz ein String, weshalb die Konsole bei einem direkten Austausch Folgendes ausgeben würde:</p>
            <blockcode numbered="numbered" src="hi_username.js" />
            <p>Das ist nicht das, was Sie wollen. Sorgen Sie dafür, dass die Variable <code>username</code> nicht innerhalb des Strings steht. Zerlegen Sie den Text in statische und variable Textfragmente. Dafür benötigen Sie den sogenannten <keyword>Konkatenations-</keyword> oder <keyword>Verkettungsoperator</keyword>. JavaScript drückt ihn durch das Plus-Zeichen (<code>+</code>) aus. Mit diesem Operator lassen sich &#x2014; wie der Name schon sagt &#x2014; Strings verketten. </p>
            <p>Damit ist das Zeichen <code>+</code> in JS doppelt belegt. Bei Zahlen (Datentyp: <code>number</code>) dient es als Additionsoperator und bei Strings als Verkettungsoperator.</p>
            <blockcode numbered="numbered" src="code/06/hi_oswine.js" />
            <p>Das sind drei Strings, von denen lediglich der mittlere eine variable Information ist. Sie können diesen nun einfach durch die Variable <i>username</i> ersetzen.</p>
            <blockcode numbered="numbered" src="code/06/hi_username_plus.js" />
            <p>Hier das komplette Programm:</p>
            <blockcode id="string_concat" src="accompanying_files/06/examples/string_concat.js" numbered="numbered"/>
            <h1>Template Strings &#x2014; mehr als nur ein Platzhalter</h1>
            <p>Als Alternative zum Verkettungsoperator können Sie Variablen direkt innerhalb von Strings anzugeben. Die sogenannte <keyword>Template String Substitution</keyword> erspart das Hantieren mit Anführungszeichen und dem Verkettungsoperator <code>+</code>. <keyword>Template Strings</keyword> sind spezielle Strings, die ähnlich wie bei einem Serienbrief als Vorlage (engl.: <keyword>Template</keyword>) dienen. Genauso wie Sie bei einem Serienbrief Platzhalter gegen konkrete Adressen und Anreden austauschen, ersetzt JS hier die Variablen durch ihre Werte.</p>
            <p>Um die Variable im Template-String zu kennzeichnen, benötigen Sie das Dollarzeichen <code>$</code> und geschweifte Klammern <code>{}</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/06/examples/template_strings.js"/>
            <p>Bitte beachten Sie, dass der String in Zeile 5 nicht in einfachen Anführungszeichen, sondern in sogenannten <i>Backticks</i> (siehe <a href="#backticks_de"/>/<a href="#backticks_en"/>) steht. Anhand der Backticks kann JS erkennen, dass es sich nicht um einen klassischen String, sondern um einen Template-String handelt.</p>
            <figure width="70%" id="backticks_de">
                <img src="images/backticks_keyboard.jpg"/>
                <figcaption>Backticks befinden sich auf der deutschen Tastatur normalerweise rechts neben dem ß / Fragezeichen. Zum Auswählen müssen Sie die Shift-Taste gedrückt halten.</figcaption>
            </figure>
            <figure width="70%" id="backticks_en">
                <img src="images/backticks_keyboard_en.png"/>
                <figcaption>Backticks befinden sich auf der englischen Tastatur normalerweise rechts
                    neben der linken Shift-Taste. Zum Auswählen muss keine weitere Taste gedrückt
                    werden.</figcaption>
            </figure>
            <p>Tatsächlich können Template Strings nicht nur Variablen ersetzen, sondern beliebige Ausdrücke.</p>
            <blockcode numbered="numbered" src="code/06/console_log_template_string.js" />
            <exercise>
                <name>Mmmmmmmmm - mit prompt das Lieblingsessen erfragen</name>
                <content>
                    <step>Fragen Sie den Benutzer nach seinem Lieblingsessen und seinem Lieblingsgetränk und speichern Sie beides in passend benannte Variablen.</step>
                    <step>Verwenden Sie beide Variablen in einem Satz, den Sie über die Konsole ausgeben. Verketten Sie dabei die Variablen mithilfe des Verkettungsoperators mit den restlichen Satzteilen .</step>
                    <step>Führen Sie die letzte Übung noch einmal durch, aber verwenden Sie dieses Mal Template String Substitutions.</step>
                    <step>Wenn Sie ganz fleißig sind, können Sie als dritte Variante noch austesten, wie sich beide Varianten in der gleichen Ausgabe verwenden lassen.</step>
                </content>
                <answer>
                    <h3>1.</h3>
                    <blockcode numbered="numbered" src="accompanying_files/06/solutions/mmm1.js"/>
                    <h3>2.</h3>
                    <blockcode numbered="numbered" src="accompanying_files/06/solutions/mmm2.js"/>
                    <h3>3.</h3>
                    <blockcode numbered="numbered" src="accompanying_files/06/solutions/mmm3.js"/>
                    <h3>4.</h3>
                    <blockcode numbered="numbered" src="accompanying_files/06/solutions/mmm4.js"/>
                </answer>
            </exercise>
            <h1>Zeit des Umbruchs</h1>
            <p>Bisher haben Sie nur einzeilige Strings ausgegeben. Innerhalb kleiner Beispiele ist das auch kein Problem. In der Praxis kommen Sie dagegen schnell an den Punkt, an dem Sie einen Zeilenumbruch benötigen.</p>
            <p>Wir starten mit einem &#x2014; zugegeben &#x2014; etwas sinnfreien Beispiel. Wie zuvor begrüßen Sie den Benutzer. Dieses Mal stellen Sie ihm danach noch eine Frage.</p>
            <blockcode numbered="numbered" src="code/06/hey_oswine.js" />
            <blockcode numbered="numbered" src="code/06/username_oswine.js" />
            <p>Zwischen Begrüßung und Frage möchten Sie nun einen Zeilenumbruch einfügen, um die Lesbarkeit zu verbessern.</p>
            <blockcode numbered="numbered" src="code/06/hey_oswine2.js" />
            <p>Eine Möglichkeit wäre tatsächlich, einen Zeilenumbruch an der richtigen Stelle im Code einzufügen. Das hat aber leider Nachteile:</p>
            <ul>
                <li>Es funktioniert nur bei Template Strings (das wäre im Beispiel in Ordnung, es ist ja einer)</li>
                <li>Es macht den Code oft schwer lesbar</li>
                <li>Wenn Sie versuchen, die zweite Zeile einzurücken (damit der Code eben nicht so unleserlich ist), betrachtet JS die Leerzeichen am Anfang der Zeile als Teil des Strings und gibt sie mit aus</li>
            </ul>
            <p>Daher ist es besser, ein Steuerzeichen zu verwenden. Neben den sichtbaren Zeichen wie Buchstaben, Zahlen, Satz- und Sonderzeichen gibt es auch Steuerzeichen. Steuerzeichen waren vor allem früher für Textdrucker im Gebrauch: So gab es beispielsweise Zeichen für Seitenvorschub, Tabulator oder Tonsignal (Bell). Diese Zeichen sind im <keyword>ASCII</keyword>-Standard beschrieben. ASCII ist ein Standard der American Standards Association (ASA) und dient der Textcodierung (auch als Teil von UTF-8). </p>
            <p>Die meisten dieser Steuerzeichen haben eher historische Bedeutung, nur wenige davon werden heute noch gebraucht. Für Sie ist im Moment nur das Zeichen für <keyword>Zeilenumbruch</keyword> relevant.</p>
            <p>Ein Steuerzeichen müssen Sie maskieren, damit es nicht mit einem &#187;normalen&#171; Buchstaben verwechselt wird. Maskieren bedeutet, dass Sie einen Backslash (<code>\</code>) vor das Zeichen setzen. Der Zeilenumbruch schreibt sich als <code>\n</code>. Somit erreichen Sie die gewünschte Ausgabe durch diese Anweisung:</p>
            <blockcode numbered="numbered" src="accompanying_files/06/examples/linebreak.js"/>
            <h1>Backslash oder &#187;Behind the Mask&#171;</h1>
            <p>Der Fall ist selten, aber es besteht durchaus die Möglichkeit, dass in Ihrem Text die Kombination Backslash und <code>n</code> tatsächlich als Teil des Textes enthalten ist.<br/> Zum Beispiel die Darstellung eines Verzeichnisses unter dem Windows-Betriebssystem:</p>
            <blockcode numbered="numbered" src="code/06/prompt.js" />
            <figure width="60%" id="backslash_n">
                <img src="images/screenshots/prompt_backslash.png"/>
                <figcaption>Mehrzeilige Ausgabe mit Backslash</figcaption>
            </figure>
            <p>Wie Sie in <a href="#backslash_n"/> sehen, haben wir an der Stelle <code>\n</code> einen ungewollten Umbruch, und es fehlt auch das erste &#187;n&#171; von <code>next_important_folder</code>. Zudem wird auch keiner der Backslashs angezeigt.</p>
            <p>Sie müssen den Backslash selbst maskieren, wenn Sie ihn als Teil des Textes verwenden möchten. Aber keine Angst, Sie müssen sich nicht noch mehr merken: Auch der Backslash selbst wird mit einem Backslash maskiert.</p>
            <blockcode numbered="numbered" src="code/06/prompt2.js" />
            <figure width="60%">
                <img src="images/screenshots/prompt_backslash2.png"/>
                <figcaption>Mehrzeilige Ausgabe mit maskiertem Backslash</figcaption>
            </figure>
            <table>
                <caption>Steuerzeichen</caption>
                <thead>
                    <tr>
                        <th>Steuerzeichen</th>
                        <th>Bedeutung</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>\n</td>
                        <td>Zeilenumbruch</td>
                    </tr>
                    <tr>
                        <td>\\</td>
                        <td>Backslash, als Ersatz für den einfachen Backslash</td>
                    </tr>
                    <tr>
                        <td>\'</td>
                        <td>Einfaches Anführungszeichen &#x2014; maskiert ist die Verwendung innerhalb beliebiger Strings möglich</td>
                    </tr>
                    <tr>
                        <td>\"</td>
                        <td>Doppeltes Anführungszeichen &#x2014; maskiert ist die Verwendung innerhalb beliebiger Strings möglich</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/06/question1.js" />
                        <p>Datentyp: <blank>string</blank></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/06/question2.js" />
                    </question_text>
                    <answer correct="correct">string</answer>
                    <answer>number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche Ausgabe erzeugt die folgende Anweisung?</p>
                        <blockcode numbered="numbered" src="code/06/question3.js" />
                    </question_text>
                    <answer>11</answer>
                    <answer>101</answer>
                    <answer correct="correct">${10 + 1}</answer>
                    <answer>keine! Es erscheint eine Fehlermeldung.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche Ausgabe erzeugt die folgende Anweisung?</p>
                        <blockcode numbered="numbered" src="code/06/question4.js" />
                    </question_text>
                    <answer correct="correct">11</answer>
                    <answer>101</answer>
                    <answer>${10 + 1}</answer>
                    <answer>keine! Es erscheint eine Fehlermeldung.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Wie lässt sich bei der Ausgabe eines Strings in der Browser-Konsole  ein Zeilenumbruch erzeugen?</p>
                    </question_text>
                    <answer>mittels <code>\\</code></answer>
                    <answer>mittels <code>//</code></answer>
                    <answer>mittels <code>/n</code></answer>
                    <answer correct="correct">mittels <code>\n</code></answer>
                    <answer>mittels <code>\\n</code></answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Geben Sie <code>C:\files</code> in der Browser-Konsole aus.</p>
                    </question_text>
                    <answer correct="correct">console.log("C:\\files");</answer>
                    <answer correct="correct">console.log('C:\\files');</answer>
                    <answer correct="correct">console.log(`C:\\files`);</answer>
                    <answer>console.log("C:\files");</answer>
                    <answer>console.log('C:\files');</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Rechnen mit Strings?</name>
                <content>
                    <table>
                        <thead>
                            <tr>
                                <th>Ausdruck</th>
                                <th>Rückgabewert</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>'Hallo' + 'Welt'</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'Hallo' + ' Welt'</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'1' + '1'</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>1 + 1</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'1 + 1'</td>
                                <td>&#x00A0;</td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <td>Ausdruck</td>
                                <td>Rückgabewert</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>'Hallo' + 'Welt'</td>
                                <td>'HalloWelt'</td>
                            </tr>
                            <tr>
                                <td>'Hallo' + ' Welt'</td>
                                <td>'Hallo Welt'</td>
                            </tr>
                            <tr>
                                <td>'1' + '1'</td>
                                <td>'11'</td>
                            </tr>
                            <tr>
                                <td>1 + 1</td>
                                <td>2</td>
                            </tr>
                            <tr>
                                <td>'1 + 1'</td>
                                <td>'1 + 1'</td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
            <exercise>
                <name>Fehler im Detail</name>
                <content>
                    <p>Im folgenden Code haben sich einige Fehler und auch Regelwidrigkeiten eingeschlichen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/06/exercises/bugs_everywhere.js"/>
                    <p>Reparieren Sie den Code, damit er Ihnen Folgendes ausgibt:</p>
                    <figure>
                        <img src="images/screenshots/bugs_everywhere.png"/>
                        <figcaption>Bekannter Witz, unbekannter Verfasser</figcaption>
                    </figure>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/06/solutions/bugs_everywhere.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Typkonvertierung und Nummern, die keine sind</lesson_name>
            <topics>
                <li>Typenkonvertierungen kennen.</li>
                <li>worin der Unterschied zwischen impliziter und expliziter Konvertierung besteht.</li>
                <li>warum <i>Not a Number</i> sehr wohl eine Nummer ist.</li>
            </topics>
            <h1 id="coercion">Implizite Typkonvertierung</h1>
            <p>Wie beim Taschenrechner scheint es offensichtlich, dass arithmetische Operatoren als Operanden Zahlen, d.&#x202F;h. Werte vom Typ <code>number</code> erwarten. Was aber passiert, wenn Sie statt Zahlen Strings verbinden? Diese Fragestellung können Sie anhand der Operatoren <code>*</code>, <code>/</code> und <code>-</code> erörtern. Das <code>+</code>-Zeichen verdient besondere Aufmerksamkeit. Deswegen kommen wir gleich noch einmal darauf zurück. Welchen Rückgabewert haben folgende Ausdrücke? Probieren Sie es aus!</p>
            <p>
                <b>Beispiele</b><br/> '5' * '4' ergibt ?<br/> '5' * 4 ergibt ?<br/> 5 * '4' ergibt ? </p>
            <p>Das Ergebnis ist in jedem Fall <code>20</code> mit dem Datentyp <code>number</code>. Das liegt daran, dass der Multiplikationsoperator als Operanden zwei Zahlen erwartet. Sollte ein String als Operand vorliegen oder sogar beide Operanden vom Typ <code>string</code> sein, so führt JS eine sogenannte <keyword>implizite Typkonvertierung</keyword> durch. Unabhängig davon, welchen Datentyp die beiden Operanden haben, versucht der Interpreter, den Datentyp zu <code>number</code> umzuwandeln. Da diese Art der Typkonvertierung automatisch, d.&#x202F;h. ohne das Zutun des Programmierers geschieht, wird sie als <keyword>implizit</keyword> bezeichnet. Der Fachausdruck für implizite Typkonvertierung ist <keyword>coercion</keyword>. </p>
            <p>Auch die Operatoren <code>/</code> und <code>-</code> verwenden coercion.</p>
            <h3>Beispiele</h3>
            <p>
                <b>'5' - '4'</b> ergibt <b>1</b> (Typ: <b>number</b>)<br/>
                <b>'5' - 4 </b>ergibt <b>1</b> (Typ: <b>number</b>)<br/>
                <b>5 - '4'</b> ergibt<b> 1</b> (Typ: <b>number</b>)<br/>
                <b>'5' / '4'</b> ergibt <b>1.25</b> (Typ: <b>number</b>)<br/>
                <b>'5' / 4</b> ergibt <b>1.25</b> (Typ: <b>number</b>)<br/><b> 5 / '4'</b> ergibt <b>1.25</b> (Typ: <b>number</b>) </p>
            <h1>Explizite Typkonvertierung</h1>
            <p>JS kann leider nicht wissen, welchen Datentyp die Anwendung tatsächlich gerade benötigt &#x2014; und liefert manchmal den falschen. In solchen Fällen liegt die Verantwortung bei Ihnen als Programmierer, die Typkonvertierung selbst durchzuführen. Das nachfolgende Beispiel verdeutlicht das Problem.</p>
            <p>Betrachten Sie den Code eines einfachen Kassenrechners. Ein Kassierer gibt die Preise dreier Artikel ein. Die Anwendung soll den Gesamtpreis berechnen und anzeigen.</p>
            <blockcode numbered="numbered" src="code/07/let_price.js" />
            <p>Starten Sie das Kassenprogramm und geben Sie dreimal einen Preis von 1 ein. Eigentlich sollte die Anwendung nun</p>
            <blockcode numbered="numbered" src="code/07/total.js" />
            <p>anzeigen. Stattdessen erhalten Sie:</p>
            <blockcode numbered="numbered" src="code/07/total2.js" />
            <p>Wenn Ihnen das im Supermarkt passiert und Sie sollen plötzlich 111 statt 3 Dollar zahlen, sind Sie vermutlich nicht gerade erfreut. Was ist hier schiefgelaufen? Um das zu verstehen, ist es erforderlich, sich die Typen im einzelnen anzuschauen. Beispielsweise können Sie zwischen Zeile 1 und Zeile 2 folgende Anweisung ergänzen:</p>
            <blockcode numbered="numbered" src="code/07/console_log.js" />
            <p>Führen Sie die Anwendung erneut aus. Die Konsole zeigt <code>string</code>. <br/>Das Problem besteht darin, dass die Funktion <code>prompt</code> immer einen String zurückgibt, unabhängig von der Eingabe. Das heißt, der Wert von <code>price1</code> ist die Zeichenkette <code>'1'</code> und nicht die Zahl <code>1</code>. Da die Operanden hier Strings sind, führt das <code>+</code> eine Zeichenverkettung durch. <code>'1' + '1' + '1'</code> ergibt folgerichtig den String <code>'111'</code>. Die Lösung liefert uns die explizite Typkonvertierung. Explizit bedeutet, dass sich der Interpreter nicht automatisch um die Umwandlung kümmert. Stattdessen ist es Ihre Aufgabe als Programmierer, diese anzugeben. Wenn Sie dafür sorgen, dass die einzelnen Variablen vom Typ <code>number</code> sind, rechnet die Kassenapplikation richtig. Zu diesem Zweck gibt es die Funktion mit dem Namen <code>Number</code> (überraschend &#x2014; wissen wir). Sie erwartet einen String als Argument und wandelt den Typ des Arguments in <code>number</code> um.</p>
            <h3>Beispiel</h3>
            <p><code>Number('1')</code> ergibt <code>1</code> (Typ: <code>number</code>)</p>
            <p>Der Rückgabewert von <b>prompt</b> ist ein String. Da Sie aber eine Zahl benötigen, müssen Sie <b>Number</b> auf den Rückgabewert von <b>prompt</b> anwenden. Das lässt sich folgendermaßen bewerkstelligen:</p>
            <blockcode numbered="numbered" src="code/07/number.js"/>
            <p>Gibt ein Anwender für den Preis des ersten Artikels die Zahl 1 ein, so gibt die Funktion <code>prompt</code> den String <code>'1'</code> zurück. <code>Number</code> wandelt ihn dann in eine Zahl um.</p>
            <p>Hier das vollständige Programm:</p>
            <blockcode numbered="numbered" src="accompanying_files/07/examples/number.js"/>
            <p>Führen Sie das Programm mit den gleichen Eingaben wie oben aus (dreimal die 1)! Diesmal erhalten Sie die richtige Ausgabe:</p>
            <blockcode numbered="numbered" src="code/07/total3.js"/>
            <p>Wie arbeitet <code>Number</code> genau? Die Funktion analysiert, ob es sich bei dem übergebenen String um eine Zahl handelt. Schließlich muss ein String nicht zwingend einen numerischen Wert enthalten. Die Zeichenkette <code>'Hallo'</code> z.&#x202F;B. enthält keine Zahl.</p>
            <p>
                <b>Number('25')</b> ergibt <b>25</b> (Typ: <b>number</b>)<br/>
                <b>Number('Hallo')</b> ergibt <b>NaN</b> (Typ: <b>number</b>)</p>
            <h1>Implizite Typkonvertierung beim +-Zeichen</h1>
            <p>Um es nochmal klar zu sagen: Das Zeichen <code>+</code> führt bei Operanden vom Typ <code>number</code> keine Typkonvertierung durch und wirkt als <keyword>Additionsoperator</keyword>. Sobald auch nur einer der Operanden ein String ist, konvertiert JS den anderen Operanden ebenfalls in einen String und wirkt als <keyword>Verkettungsoperator</keyword>.</p>
            <p><b>Beispiele</b></p>
            <blockcode numbered="numbered" src="code/07/addition.js"/>
            <h1>Das NaN-Paradoxon</h1>
            <p>Sicherlich haben Sie sich schon gefragt, was der Wert <b>NaN</b> bedeutet, den uns <code>Number</code> im vorangegangenen Beispiel zurückgibt. Sie erhalten <code>NaN</code> immer dann, wenn <code>Number</code> einen String wie 'Hallo' umwandeln soll.</p>
            <p><code>NaN</code> steht für <i>Not a Number</i>. Dieser Wert repräsentiert eine fehlgeschlagene numerische Operation. Das kann sowohl bei einer expliziten als auch bei einer impliziten Typkonvertierung passieren.</p>
            <h3>Beispiele</h3>
            <p><b>Number('NerdWorld')</b> ergibt <b>NaN</b><br/><b>Number('NerdWorld 2')</b> ergibt <b>NaN</b><br/><b>'Drei' * 3</b> ergibt <b>NaN</b></p>
            <p>Genau wie <i>1, 2, 3</i> usw. ist <i>NaN</i> ein Wert vom Typ <code>number</code>. Dass <code>NaN</code> auch literal notiert werden kann, lässt sich leicht durch</p>
            <blockcode numbered="numbered" src="code/07/typeof.js"/>
            <p>zeigen.</p>
            <p>Es klingt im ersten Moment vielleicht etwas paradox zu sagen: &#187;Nicht eine <code>Number</code> ist eine <code>Number</code>&#171;. Es macht aber tatsächlich Sinn. Überall dort, wo Werte vom Datentyp <b>number</b> zugelassen sind, ist auch <b>NaN</b> erlaubt. Damit kann auch im Fehlerfall ein Programm weiterhin lauffähig bleiben. Der Fehler wirkt sich im Ergebnis aus, das ist aber meist immer noch besser als ein vollständiger Programmabbruch. Ein <b>NaN</b>, das in einer numerischen Berechnung als Operand agiert, führt auch wieder zu einem Rückgabewert von <b>NaN</b>.</p>
            <p>
                <b>Number('NerdWorld') * 3</b> ergibt <b>NaN</b><br/>
                <b>NaN * 3</b> ergibt <b>NaN</b><br/>
                <b>12 / '3Produkte'</b> ergibt <b>NaN</b>, aber<br/><b>12 / '3'</b> ergibt <b>4</b> und<br/><b>12 / Number('3Produkte')</b> ergibt <b>NaN</b>
            </p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question1.js" />
                    </question_text>
                    <answer correct="correct"><blank>'45'</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question2.js" />
                    </question_text>
                    <answer correct="correct"><blank>'105'</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/07/question3.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question4.js" />
                    </question_text>
                    <answer><blank>12</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode type="NOT_DEFINED" numbered="numbered" src="code/07/question5.js" />
                    </question_text>
                    <answer>
                        <p><blank>string</blank></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode type="NOT_DEFINED" numbered="numbered" src="code/07/question6.js" />
                    </question_text>
                    <answer>
                        <p><blank>string</blank></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question7.js" />
                    </question_text>
                    <answer>
                        <p>number</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question8.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question9.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert:</p>
                        <blockcode numbered="numbered" src="code/07/question10.js" />
                    </question_text>
                    <answer><blank>4.5</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert:</p>
                        <blockcode numbered="numbered" src="code/07/question11.js" />
                    </question_text>
                    <answer><blank>NaN</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question12.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question13.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question14.js" />
                    </question_text>
                    <answer><blank>NaN</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question15.js" />
                    </question_text>
                    <answer><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question16.js" />
                    </question_text>
                    <answer correct="correct"><blank>number</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welches Ergebnis liefert folgender Ausdruck?</p>
                        <blockcode type="NOT_DEFINED" numbered="numbered" src="code/07/question17.js" />
                    </question_text>
                    <answer correct="correct"><blank>NaN</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welches Ergebnis liefert folgender Ausdruck?</p>
                        <blockcode type="NOT_DEFINED" numbered="numbered" src="code/07/question18.js" />
                    </question_text>
                    <answer correct="correct"><blank>'is21'</blank></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question19.js" />
                    </question_text>
                    <answer correct="correct">'45'</answer>
                    <answer>'9'</answer>
                    <answer>9</answer>
                    <answer>45</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts des folgenden Ausdrucks:</p>
                        <blockcode numbered="numbered" src="code/07/question20.js" />
                    </question_text>
                    <answer correct="correct">number</answer>
                    <answer>string</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert hat der folgende Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question21.js" />
                    </question_text>
                    <answer correct="correct">'7'</answer>
                    <answer>'${3 + 4}'</answer>
                    <answer>34</answer>
                    <answer>'34'</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question22.js" />
                    </question_text>
                    <answer correct="correct">string</answer>
                    <answer>number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question23.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct">number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question24.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct">number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert:</p>
                        <blockcode numbered="numbered" src="code/07/question25.js" />
                    </question_text>
                    <answer>4.5</answer>
                    <answer>'4.5 CPUs'</answer>
                    <answer correct="correct">NaN</answer>
                    <answer>undefined</answer>
                    <answer>keiner, es wird ein Fehler ausgegeben</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question26.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct" >number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question27.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct">number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question28.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct">number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Datentyp des Rückgabewerts:</p>
                        <blockcode numbered="numbered" src="code/07/question29.js" />
                    </question_text>
                    <answer>string</answer>
                    <answer correct="correct">number</answer>
                    <answer>object</answer>
                    <answer>undefined</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welches Ergebnis liefert folgender Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/07/question30.js" />
                    </question_text>
                    <answer>NaN</answer>
                    <answer>21</answer>
                    <answer correct="correct">'21kg'</answer>
                    <answer>keins, es wird ein Fehler ausgegeben</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Also was sind das denn nur für Ausdrücke?</name>
                <content>
                    <p>Bestimmen Sie Rückgabewert und Datentyp folgender Ausdrücke:</p>
                    <table>
                        <thead>
                            <tr>
                                <th>Ausdruck</th>
                                <th>Rückgabewert</th>
                                <th>Datentyp</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>'1.5' * 2</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'1,5' * 2</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'1.5' + 2</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>Number('1.5') * 2</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>Number('1,5') * 2</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>Number('3 Tage') * 7</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>Number('Seite 20') + 5</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>'9,2' + Number('11.7');</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>(NaN - 2) * (4 / 2)</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>alert(Number(17 / 2 + 1.3))</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>typeof 12.25</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                            <tr>
                                <td>typeof typeof 12.25</td>
                                <td>&#x00A0;</td>
                                <td>&#x00A0;</td>
                            </tr>
                        </tbody>
                    </table>
                </content>
                <answer>
                    <table>
                        <thead>
                            <tr>
                                <th>Ausdruck</th>
                                <th>Rückgabewert</th>
                                <th>Datentyp</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>'1.5' * 2</td>
                                <td>3</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>'1,5' * 2</td>
                                <td>NaN</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>'1.5' + 2</td>
                                <td>'1.52'</td>
                                <td>string</td>
                            </tr>
                            <tr>
                                <td>Number('1.5') * 2</td>
                                <td>3</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>Number('1,5') * 2</td>
                                <td>NaN</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>Number('3 Tage') * 7</td>
                                <td>NaN</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>Number('Seite 20') + 5</td>
                                <td>NaN</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>'9,2' + Number('11.7');</td>
                                <td>'9,211.7'</td>
                                <td>string</td>
                            </tr>
                            <tr>
                                <td>(NaN - 2) * (4 / 2)</td>
                                <td>NaN</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>alert(Number(17 / 2 + 1.3))</td>
                                <td>undefined</td>
                                <td>undefined</td>
                            </tr>
                            <tr>
                                <td>typeof 12.25</td>
                                <td>'number'</td>
                                <td>string</td>
                            </tr>
                            <tr>
                                <td>typeof typeof 12.25</td>
                                <td>'string'</td>
                                <td>string</td>
                            </tr>
                        </tbody>
                    </table>
                </answer>
            </exercise>
            <exercise id="reichweite_verbrauch">
                <name>Reichweite &amp; Verbrauch</name>
                <content>
                    <step>Schreiben Sie ein Programm zur Kraftstoffverbrauchsberechnung für Pkws. Der Benutzer soll die gefahrenen Kilometer (Strecke) und die verbrauchte Benzinmenge angeben. Das Programm ermittelt daraufhin den Kraftstoffverbrauch auf 100 km und gibt ihn aus. <p><b>Hinweis:</b> Verwenden Sie folgende Formel: <br/><i>Verbrauch [l/100km] = Benzinmenge [l] / Strecke [km] × 100</i></p></step>
                    <step>Erweitern Sie das Programm derart, dass das Programm den Benutzer außerdem nach seiner Tankgröße fragt und ergänzend die maximale Reichweite in Kilometern berechnet. <p><b>Hinweis:</b> Verwenden Sie folgende Formel: <br/><i>Reichweite [km] = Tankgröße [l] × Strecke [km] / Benzinmenge [l]</i></p></step>
                </content>
                <answer>
                    <p>1.</p>
                    <blockcode numbered="numbered" src="accompanying_files/07/solutions/gasoline1.js"/>
                    <p>2.</p>
                    <blockcode numbered="numbered" src="accompanying_files/07/solutions/gasoline2.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Math, denn das Ganze ist mehr als die Summe seiner Teile</lesson_name>
            <topics>
                <li>was es mit dem Math-Objekt auf sich hat,</li>
                <li>wie Sie es zum Runden benutzen</li>
                <li>und eine Zufallszahl erzeugen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Die Mathematik ist unberechenbar.</p>
                </blockquote>
                <figcaption>Bruno Ziegler</figcaption>
            </figure>
            <h1>Das Math-Objekt</h1>
            <p>JS verfügt über eine Reihe mathematischer Funktionen. Sie können damit Werte runden, Zufallszahlen bestimmen oder Winkelberechnungen durchführen. Damit all diese Funktionen nicht sinnlos in JS verstreut sind, gibt es das <code>Math</code>-Objekt. Was Objekte genau sind, ist an dieser Stelle aber noch nicht wichtig. Der einzige Zweck dieses Objektes ist es, alle dazu passenden Funktionen und Konstanten zu gruppieren, damit sie leichter zu finden sind. Deswegen wird es auch oft als <keyword>utility object</keyword> bezeichnet. <a href="#math_methods"/> zeigt eine kleine Auswahl:</p>
            <table id="math_methods">
                <caption>Funktionen und Konstanten des Math-Objekts</caption>
                <thead>
                    <tr>
                        <th>Funktion<br/>oder Konstante</th>
                        <th>Zweck</th>
                        <th>Beispiel</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <code>sqrt</code>
                        </td>
                        <td>Quadratwurzel</td>
                        <td>
                            <code>Math.sqrt(9)</code> ergibt <code>3</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>pow</code>
                        </td>
                        <td>Potenzieren</td>
                        <td>
                            <code>Math.pow(2, 5)</code> ergibt <code>32</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>PI</code>
                        </td>
                        <td>π</td>
                        <td><code>Math.PI</code> ergibt <code>3.141592653589793</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>cos</code>
                        </td>
                        <td>Kosinus</td>
                        <td>
                            <code>Math.cos(Math.PI)</code> ergibt <code>-1</code>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>JS-Entwickler sprechen auch oft von der Math-API. Eine <keyword>API</keyword> (<keyword>Application Programmers Interface</keyword>) ist gewissermaßen die Schnittstelle zwischen Mensch und Maschine, mit der der Programmierer seine Software zusammensetzen kann. Je nach Situation kann es sich dabei um Definitionen, Protokolle usw. handeln. Bei JS ist meist eine Menge von Funktionen zu einem bestimmten Thema gemeint. So können Sie mithilfe der Math-API eben auf mathematische Funktionalität zugreifen.</p>
            <h1>Eine runde Sache: floor, round &amp; ceil</h1>
            <p>Auch die häufig genutzten Rundungsfunktionen verbergen sich hinter dem Math-Objekt. Es gibt drei Rundungsfunktionen: <code>round</code>, <code>ceil</code> und <code>floor</code>. Die Funktion <code>round</code> ist ein Klassiker. Sie verhält sich so, wie Sie es aus dem Geschäftsleben kennen: Ab einem Wert von 0.5 nach dem Dezimalpunkt wird aufgerundet. Die Funktion <code>floor</code> rundet dagegen immer ab (<code>floor</code> bedeutet auf deutsch: <i>Boden</i>, also <i>unten</i>) und <code>ceil</code> immer auf (<code>ceil</code> bedeutet auf deutsch: <i>Decke</i>, also <i>oben</i>).</p>
            <h3>Beispiel</h3>
            <ul>
                <li><code>Math.round(3.1)</code> ergibt <code>3</code></li>
                <li><code>Math.round(3.5)</code> ergibt <code>4</code></li>
                <li><code>Math.floor(3.7)</code> ergibt <code>3</code></li>
                <li><code>Math.ceil(3.1)</code> ergibt <code>4</code></li>
            </ul>
            <h1>Frisch gefixt mit toFixed</h1>
            <p>Manchmal möchten Sie Zahlen auf eine bestimmte Anzahl von Nachkommastellen runden. Beispielsweise ist es üblich, Geldbeträge auf zwei Stellen zu runden, damit neben dem Dollar-Betrag ein ganzer Centbetrag zur Verfügung steht.</p>
            <p>Diese Möglichkeit finden Sie allerdings nicht &#x2014; wie Sie vielleicht vermuten würden &#x2014; bei <code>Math</code>. Stattdessen rufen Sie die Funktion <code>toFixed</code> direkt auf einem Zahlenwert auf.</p>
            <h3>Beispiele</h3>
            <blockcode numbered="numbered" src="code/08/tofixed.js" />
            <p>Das Argument von <code>toFixed</code> bestimmt dabei die Anzahl der auszugebenden
                Nachkommastellen. Achtung der Rückgabewert von <code>toFixed</code> ist dabei immer
                <code>string</code>, nicht <code>number</code>.</p>
            <h1>Wie es der Zufall will mit random</h1>
            <p>Zufallszahlen finden in vielen Programmen Verwendung, z.&#x202F;B. in Online-Spielen. Für die Erzeugung beliebiger Zufallszahlen ist ebenfalls das Math-Objekt zuständig.</p>
            <p>Als Beispiel soll ein Würfel konstruiert werden &#x2014; d.&#x202F;h. zufällige Zahlen zwischen <code>1</code> und <code>6</code>.</p>
            <p>Verwenden Sie dazu die Funktion <code>Math.random()</code>. Sie liefert Zahlen zwischen <code>0</code> und <code>1</code> zurück, wobei die 1 nie erreicht wird.</p>
            <p><code>Math.random()</code> ergibt z. B.<br/><code>0.7881953510278985</code> oder <code>0.399900033690243175</code>.</p>
            <p>Durch Multiplikation mit <code>6</code> erhalten Sie den für unser Beispiel gewünschten Zahlenbereich.</p>
            <p><code>Math.random() * 6</code> ergibt z. B.<br/><code>4.6533273673689099115</code> oder <code>2.364744869982669</code>.</p>
            <p>Verwenden Sie <code>Math.floor</code>, um die störenden Nachkommastellen zu entfernen. Ein <code>round</code> würde die Wahrscheinlichkeit verfälschen.</p>
            <p><code>Math.floor(Math.random() * 6)</code> ergibt z. B. <code>3</code> oder <code>5</code> oder <code>0</code>.</p>
            <p>Das Problem ist, dass Sie im Moment die Zahlen von <code>0</code> bis <code>5</code>, aber nie die <code>6</code> erhalten. Addieren Sie einfach noch 1 auf. Jetzt haben Sie einen &#187;echten&#171; Würfel:</p>
            <p><code>Math.floor(Math.random() * 6) + 1</code> ergibt z. B. <code>3</code> oder <code>1</code> oder <code>6</code>.</p>
            <h1>Referenz</h1>
            <table id="math_methods_summery">
                <caption>Funktionen/Konstanten des Math-Objekts und toFixed</caption>
                <thead>
                    <tr>
                        <th>Funktion<br/>oder Konstante</th>
                        <th>Zweck</th>
                        <th>Beispiel</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <code>sqrt</code>
                        </td>
                        <td>Quadratwurzel</td>
                        <td>
                            <code>Math.sqrt(9)</code> ergibt <code>3</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>pow</code>
                        </td>
                        <td>Potenzieren</td>
                        <td><code>Math.pow(2, 5)</code> ergibt <code>32</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>cos</code>
                        </td>
                        <td>Kosinus</td>
                        <td><code>Math.cos(0)</code> ergibt <code>1</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>PI</code>
                        </td>
                        <td>π</td>
                        <td><code>Math.PI</code> ergibt <code>3.141592653589793</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>round</code>
                        </td>
                        <td>kaufmännisches Runden</td>
                        <td><code>Math.round(3.678)</code> ergibt <code>4</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>floor</code>
                        </td>
                        <td>Abrunden</td>
                        <td><code>Math.floor(3.678)</code> ergibt <code>3</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>ceil</code>
                        </td>
                        <td>Aufrunden</td>
                        <td><code>Math.ceil(3.678)</code> ergibt <code>4</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>max</code>
                        </td>
                        <td>Maximalwert aus beliebig vielen Argumenten</td>
                        <td><code>Math.max(3, 7, 2)</code> ergibt <code>7</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>min</code>
                        </td>
                        <td>Minimalwert aus beliebig vielen Argumenten</td>
                        <td><code>Math.min(3, 7, 2)</code> ergibt <code>2</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>abs</code>
                        </td>
                        <td>Betrag einer Zahl (ohne Vorzeichen)</td>
                        <td><code>Math.abs(-3.678)</code> ergibt <code>3.678</code></td>
                    </tr>
                    <tr>
                        <td>
                            <code>random</code>
                        </td>
                        <td>Eine zufällige Zahl</td>
                        <td><code>Math.random()</code> gibt eine zufällige Zahl zwischen 0 und 1 zurück, wobei die 1 nie erreicht wird</td>
                    </tr>
                    <tr>
                        <td>
                            <code>toFixed</code>
                        </td>
                        <td>Runden auf beliebig viele Nachkommastellen</td>
                        <td><code>3.0.toFixed(2)</code> ergibt <code>'3.00'</code>, dabei ist der Datentyp des Rückgabewerts <code>string</code></td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Mit welchem JavaScript-Code berechnen Sie die 2. Wurzel (Quadratwurzel) von 7 und runden das Ergebnis auf 5 Stellen nach dem Komma?</p>
                    </question_text>
                    <answer correct="correct"><blank>Math.sqrt</blank>(7)<blank>.toFixed</blank>(5)</answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Mit welchem JavaScript-Code berechnen Sie <code>1.7</code> hoch <code>4</code> und runden das Ergebnis auf 3 Stellen nach dem Komma?</p>
                    </question_text>
                    <answer correct="correct"><blank>Math.pow</blank>(1.7, 4)<blank>.toFixed</blank>(3)</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Mit welchem JavaScript-Code berechnen Sie die 2. Wurzel (Quadratwurzel)
                            von 10 und runden das Ergebnis auf 2 Stellen nach dem Komma? Es sollen
                            nur bereits in JavaScript enthaltene Funktionen benutzt werden, der
                            Datentyp des Rückgabewerts ist egal.</p>
                    </question_text>
                    <answer correct="correct">Math.sqrt(10).toFixed(2)</answer>
                    <answer>Math.sqrt(10).round(2)</answer>
                    <answer>Math.round(Math.sqrt(10), 2)</answer>
                    <answer>round(Math.sqrt(10), 2)</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Mit welchem JavaScript-Code berechnen Sie <code>1.7</code> hoch <code>4</code> und runden das Ergebnis auf 3 Stellen nach dem Komma?</p>
                    </question_text>
                    <answer correct="correct">Math.pow(1.7, 4).toFixed(3)</answer>
                    <answer correct="correct">(1.7 ** 4).toFixed(3)</answer>
                    <answer>Math.pow(1.7, 4).round(3)</answer>
                    <answer>Math.round(Math.pow(1.7, 4), 3)</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p><code>Math</code> bezeichnet man in JavaScript als</p>
                    </question_text>
                    <answer>Function</answer>
                    <answer>String</answer>
                    <answer>Konstante</answer>
                    <answer correct="correct">Object</answer>
                    <answer>Variable</answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bei Lotto werden Zahlen von 1 bis 49 verwendet. Entwickeln Sie einen passenden Zufallsgenerator.</p>
                        <p>Math.floor(Math.<blank>random</blank>() * <blank>49</blank>) + <blank>1</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Beim modernen europäischen Roulette gibt es die Zahlen von 1 bis 36 und die 0. Entwickeln Sie einen Zufallsgenerator, der das Roulette simuliert.</p>
                        <p>Math.floor(Math.<blank>random</blank>() * <blank>37</blank>) + <blank>0</blank></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bei Lotto werden Zahlen von 1 bis 49 verwendet. Entwickeln Sie einen passenden Zufallsgenerator.</p>
                    </question_text>
                    <answer correct="correct">Math.floor(Math.random() * 49) + 1</answer>
                    <answer>Math.ceil(Math.random() * 49)</answer>
                    <answer>Math.floor(Math.random()) * 49 + 1</answer>
                    <answer>Math.ceil(Math.random()) * 49 + 1</answer>
                    <answer correct="correct">Math.round(Math.random() * 48) + 1</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Beim modernen europäischen Roulette gibt es die Zahlen von 1 bis 36 und
                            die 0. Entwickeln Sie einen Zufallsgenerator, der die möglichen Zahlen
                            als Numberliterale erzeugt.</p>
                    </question_text>
                    <answer correct="correct">Math.floor(Math.random() * 37)</answer>
                    <answer correct="correct">Math.ceil(Math.random() * 36)</answer>
                    <answer correct="correct">Math.round(Math.random() * 36)</answer>
                    <answer>(Math.random() * 36).toFixed(0)</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>2000 Sekunden, Teil 2</name>
                <content>
                    <p>Geben Sie die Ergebnisse des Zeitrechners (<a href="#2000sekunden"/>) abgerundet (ohne Nachkommastellen) in folgender Form aus:<br/><i>mm:ss</i></p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/08/solutions/2000_secs2.js"/>
                </answer>
            </exercise>
            <exercise id="lotto">
                <name>Lotto oder der &#187;49-Seiten Würfel&#171;</name>
                <content>
                    <p>Für Zufallszahlen von eins bis sechs ist ein Würfel wirklich praktisch &#x2014; und sinnvoll. Für alle anderen Fälle ist ein Zufallsgenerator natürlich unumgänglich und Pflichtprogramm. Zum Beispiel, wenn Sie Hilfe für Ihre nächsten Lottozahlen benötigen&#8230;. </p>
                    <p>Schreiben Sie ein Programm, dass genau eine Zufallszahl zwischen 1 und 49 ausgibt. Die Grenzwerte 1 und 49 sollen dabei inklusive sein und Nachkommastellen sind nicht erwünscht.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/08/solutions/lotto.js"/>
                </answer>
            </exercise>
            <exercise id="reichweite_verbrauch2">
                <name>Reichweite &amp; Verbrauch, Teil 2</name>
                <content>
                    <step>Runden Sie die Ausgaben von <a href="#reichweite_verbrauch"/> (Teil 1 der Übung) kaufmännisch (d.&#x202F;h. ab 0.5 aufrunden).</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/08/solutions/gasoline.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="relationale_operatoren">
            <lesson_name>Von der Wahrheit: Relationale Operatoren &amp; der Datentyp Boolean</lesson_name>
            <topics>
                <li>mit Vergleichen umzugehen.</li>
                <li>was der Datentype <i>Boolean</i> ist.</li>
                <li>wie Sie herausfinden, was eine Zahl ist.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>The Truth is Out There</p>
                </blockquote>
                <figcaption>The X-Files</figcaption>
            </figure>
            <p>Unser Kunde Björn, der NerdWorld-Geschäftsführer, hatte neulich beim Essen eine längere Diskussion mit Tanja, der Leiterin der Marketing-Abteilung. Die beiden haben zusammen eine neue Anforderung ausgeheckt:</p>
            <hint src="images/hint/bjoern.png">
                <p>Unsere Marketing-Abteilung hatte gerade eine tolle Idee für einen Rabatt. In Zukunft wollen wir Kunden, die gleich drei oder mehr Exemplare eines Artikels einkaufen, einen Mengenrabatt von 5% auf den Artikel gewähren. Wir wollen damit erreichen, dass Kunden, die etwas zweimal bestellen, darüber nachdenken, vielleicht auch noch einen dritten Artikel zu nehmen. Wenn einem ein Artikel gefällt, dann schenkt man ihn vielleicht auch gerne weiter &#x2014; das ist doch die Gelegenheit, gleich noch einen auf Vorrat mitzubestellen.</p>
            </hint>
            <h1>Immer diese Entscheidungen</h1>
            <p>In der Praxis finden sich viele solche Anwendungsfälle, in denen ein Programm auf Ja/Nein-Entscheidungen reagieren muss, z.&#x202F;B.</p>
            <ul>
                <li>&#187;<i>Wird der Rabatt gewährt?</i>&#171;</li>
                <li>&#187;<i>Hat der Benutzer das richtige Passwort eingegeben?</i>&#171;</li>
            </ul>
            <p>Dafür muss das Programm wissen, was richtig oder falsch ist, und entsprechend reagieren. Im Falle eines falschen Passworts also z.&#x202F;B. mit einer Fehlermeldung. Bei einem gewährten Rabatt muss dieser natürlich vom Gesamtpreis abgezogen werden.</p>
            <p>Ein Ausdruck innerhalb des Programms muss also</p>
            <ul>
                <li>entscheiden, ob etwas <i>wahr</i> oder <i>falsch</i> ist.</li>
                <li>das Ergebnis der Prüfung zurückgeben.</li>
            </ul>
            <p>Um eine Entscheidung zu treffen, muss ein Ausdruck zwei Werte miteinander vergleichen. Damit Sie prüfen können, ob z.&#x202F;B. die <i>Stückzahl eines bestellten Produktes größer als 2 ist</i>, oder eine <i>Eingabe gleich dem Passwort</i> ist, benötigen Sie sogenannte <i>Vergleichsoperatoren</i> (auch <keyword>relationale Operatoren</keyword>), die wir Ihnen im nächsten Abschnitt genauer vorstellen möchten.</p>
            <h1>Relationale Operatoren und die Bedeutung der Wahrheit</h1>
            <p><keyword>Relationale Operatoren</keyword> ermöglichen Ihnen das Vergleichen zweier Werte. Sie können die Vergleiche wie Fragen lesen:</p>
            <blockcode numbered="numbered" src="code/09/greater_than.js" />
            <p>
                <i>Ist 325 größer als 12?</i>
            </p>
            <blockcode numbered="numbered" src="code/09/less_or_equal.js" />
            <p>
                <i>Ist 23,5 kleiner oder gleich 23,9?</i>
            </p>
            <blockcode numbered="numbered" src="code/09/equal.js" />
            <p>
                <i>Ist 365 gleich 365?</i>
            </p>
            <blockcode numbered="numbered" src="code/09/not_equal.js" />
            <p>
                <i>Ist 2 ungleich 5?</i>
            </p>
            <p>Die nachfolgende Tabelle gibt eine Übersicht über die relationalen Operatoren:</p>
            <table width="50%">
                <caption>Relationale Operatoren</caption>
                <thead>
                    <tr>
                        <th>Operator</th>
                        <th>Operation</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>&lt;</td>
                        <td>kleiner</td>
                    </tr>
                    <tr>
                        <td>&gt;</td>
                        <td>größer</td>
                    </tr>
                    <tr>
                        <td>&lt;=</td>
                        <td>kleiner oder gleich</td>
                    </tr>
                    <tr>
                        <td>&gt;=</td>
                        <td>größer oder gleich</td>
                    </tr>
                    <tr>
                        <td>===</td>
                        <td>identisch</td>
                    </tr>
                    <tr>
                        <td>!==</td>
                        <td>nicht identisch</td>
                    </tr>
                </tbody>
            </table>
            <p>Wenn Sie nun feststellen möchten, ob ein Kunde mindestens drei Exemplare des gleichen Produkts bestellt hat, könnten Sie das folgendermaßen beschreiben:</p>
            <blockcode numbered="numbered" src="code/09/var_greater.js" />
            <p>Dabei ist <code>quantityOfItem</code> eine Variable, die die Anzahl der Exemplare
                eines Produkts im Warenkorb enthält.</p>
            <h1>Der Datentyp Boolean</h1>
            <p>Zu den Fragen erwarten wir Antworten &#x2014; also einen passenden Rückgabewert. Der Rückgabewert ist eine weitere Gemeinsamkeit der relationalen Operatoren. Dieser ist immer <keyword>true</keyword> oder <keyword>false</keyword>.</p>
            <p>Der Ausdruck <code>quantityOfItem &gt;= 3</code> hat z.&#x202F;B. für einen Wert von
                10 der Variable <code>quantityOfItem</code> den Rückgabewert <code>true</code>, für
                einen Wert von 1 in der Variable den Rückgabewert <code>false</code>. In der Praxis
                würde die Warenkorbimplementierung diesen Wert ermitteln. Um es ausprobieren zu
                können, simulieren Sie es einfach mit einem <code>prompt</code>:</p>
            <blockcode numbered="numbered" src="accompanying_files/09/examples/boolean.js"/>
            <p><b>Ausgabe</b></p>
            <p>z.&#x202F;B. für die Eingabe von <code>27</code>:</p>
            <blockcode numbered="numbered" src="code/09/discount_true.js" />
            <p>z.&#x202F;B. für die Eingabe von <code>2</code>:</p>
            <blockcode numbered="numbered" src="code/09/discount_false.js" />
            <p>Ein <code>true</code> in der Ausgabe bedeutet, dass ein Rabatt gewährt wird. Danach müssten Sie den Rabatt noch vom Preis abziehen &#x2014; das schauen wir uns aber erst später an.</p>
            <p>Tatsächlich handelt es sich bei <code>true</code> und <code>false</code> nicht um Strings, sondern um eigenständige Werte, die den Zustand <i>wahr</i> oder <i>falsch</i> repräsentieren. Deswegen gibt es dafür einen eigenen Datentyp &#x2014; den Datentyp <keyword>boolean</keyword>. Auch das können Sie in der Konsole überprüfen:</p>
            <blockcode numbered="numbered" src="code/09/typeof_less.js" />
            <p>oder</p>
            <blockcode numbered="numbered" src="code/09/typeof_true.js" />
            <p>Ein Ausdruck, der einen solchen booleschen Rückgabewert hat (ein <keyword>boolescher Ausdruck</keyword>), heißt auch <keyword>Bedingung</keyword>.</p>
            <figure width="30%">
                <img src="images/language_dependent/de/operands.jpg"/>
                <figcaption>Boolescher Ausdruck</figcaption>
            </figure>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>Achtung Geschichte!</h3>
                <p>Der Datentyp <b>boolean</b> ist nach dem Mathematiker <i>George Boole</i> (1815 - 1864) benannt, dessen Konzepte die Grundlage moderner Computerberechnungen bilden. Er gilt als einer der Begründer der Informatik, und das, obwohl es zu seiner Zeit noch keine Computer gab.</p>
            </hint>
            <h3>Beispiele</h3>
            <table>
                <thead>
                    <tr>
                        <th>Bedingung</th>
                        <th>Rückgabewert</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>3 &gt; 5</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>4567 === 4567</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>4567 !== 4567</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>'Ladislaus' === 'Ladislaus'</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>'Oswine' === 'Ladislaus'</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>321 &lt;= 253 </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>321 &gt;= 253 </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>12 &gt;= 15</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>12 &lt;= 15</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>7 &lt;= 7</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>5 === 9</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>5 !== 9</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>'5' === 5</td>
                        <td>false</td>
                    </tr>
                </tbody>
            </table>
            <hint src="images/hint/owl.png">
                <h3>Warum ein einfaches Gleichheitszeichen nicht reicht</h3>
                <p>Das einfache Gleichheitszeichen <code>=</code> ist schon durch den Zuweisungsoperator belegt und kann daher nicht als Vergleichsoperator dienen. Sowohl das doppelte als auch das dreifache Gleichheitszeichen sind Vergleichsoperatoren in JS. Es gibt jedoch einen subtilen Unterschied, der fiese Probleme nach sich ziehen kann. Douglas Crockford (2008) bezeichnet das <code>==</code> sogar als &#187;bösen Zwilling&#171;. </p>
                <p>Der Unterschied besteht darin, wie die beiden Operatoren mit verschiedenen Datentypen umgehen. Das <code>===</code> ist recht einfach zu verstehen: unterschiedliche Datentypen bedeuten, dass die Werte nicht gleich sind!</p>
                <h3>Beispiele</h3>
                <blockcode numbered="numbered" src="code/09/equal_hint.js" />
                <p>Anders verhält sich das <code>==</code>. Es versucht, Datentypen zu konvertieren, um einen Vergleich zu ermöglichen.</p>
                <h3>Beispiele</h3>
                <blockcode numbered="numbered" src="code/09/equal_hint2.js" />
                <p>Während beispielsweise der Ausdruck <code>5 == '5'</code> noch gut
                    nachzuvollziehen ist, sind Situationen wie <code>'0' == false</code> oft die
                    Ursache schwer aufzufindender Bugs. Die <a
                        href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3">Regeln des
                        Vergleichs im ECMA-Standard</a> sind recht kompliziert, und es ist
                    schwierig, sie immer komplett im Kopf zu haben.</p>
                <p>Zum Glück kommt der Operator nur in sehr wenigen, speziellen Situationen zur Anwendung. </p>
                <p><b>Meine Empfehlung:</b> Verwenden Sie einfach immer das dreifache Gleichheitszeichen <code>===</code>. Dann sind Sie auf der sicheren Seite (Crockford 2008).</p>
            </hint>
            <p>Die Prioritätentabelle, die die Auswertungsreihenfolge aller Operatoren zeigt, ordnet auch die relationalen mit ein:</p>
            <table>
                <caption>Operatoren in der Auswertungsreihenfolge</caption>
                <thead>
                    <tr>
                        <th>Priorität / Präzedenz</th>
                        <th>Operator</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Funktionsaufruf, z.&#x202F;B. <code>prompt()</code><br/>Klammern ()</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>typeof</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>*<br/>/<br/>%</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>+<br/>-<br/></td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>
                            <b>&lt;<br/>&gt;<br/>&lt;=<br/>&gt;=</b>
                        </td>
                    </tr>
                    <tr>
                        <td>6</td>
                        <td>
                            <b>===<br/>!==</b>
                        </td>
                    </tr>
                    <tr>
                        <td>7</td>
                        <td>=<br/>+=<br/>-=<br/>*=<br/>/=<br/>%=</td>
                    </tr>
                </tbody>
            </table>
            <h1>Number oder nicht Number&#8230; das ist hier die Frage</h1>
            <p>Neben den Operatoren gibt es aber auch Funktionen mit booleschen Rückgabewerten.</p>
            <p>Die Funktion <keyword>isNaN</keyword> stellt an das übergebene Argument die Frage, ob es sich nicht um eine Zahl handelt: &#187;<i>is Not a Number?</i>&#171;. Das Besondere ist aber der zurückgegebene Wert. Es kann sich bei dem Argument um eine Zahl handeln oder eben nicht. Die Funktion gibt dementsprechend nur <code>true</code> oder <code>false</code> zurück. Das heißt, der Rückgabewert der Funktion ist vom Typ <code>boolean</code>.</p>
            <h3>Beispiele</h3>
            <p>
                <code>isNaN(3)</code> ergibt <code>false</code><br/>
                <code>isNaN('Hallo')</code> ergibt <code>true</code>
            </p>
            <p>Betrachten Sie die Funktion genauer. Was denken Sie, gibt der Ausdruck
                <code>isNaN('34')</code> zurück?</p>
            <p>Interessanterweise ist die Antwort <code>false</code>. Das Literal <code>'34'</code>
                ist ein String. Dennoch erkennt isNaN es als Zahl. Woran liegt das?</p>
            <p>Die Funktion <code>isNaN</code> erwartet einen Wert vom Typ <code>number</code>. Sie gibt nur dann true zurück, falls es sich um den speziellen Wert <code>NaN</code> handelt. Noch mal übersichtlich:</p>
            <ul>
                <li><code>isNaN(NaN)</code> ergibt <code>true</code>, denn <i>NaN</i> bedeutet <i>Not a Number</i></li>
                <li><code>isNaN(-42)</code>, <code>isNaN(27)</code>, <code>isNaN(25.342)</code> ergibt <code>false</code>, denn die Argumente sind Zahlen.</li>
            </ul>
            <p>Wenn die Funktion <code>isNaN</code> keinen Wert vom Typ <code>number</code> bekommt,
                so muss JS den Datentyp wandeln. Es handelt sich dabei um eine implizite
                Typkonvertierung wie in <a href="#coercion"/> beschrieben. Damit wird
                <code>'34'</code> (string) zu <code>34</code> (number) und eben auch
                <code>'Hallo'</code> zu <code>NaN</code>.</p>
            <p>Die Funktion leistet tatsächlich genau das, was von ihr erwartet wird. Wenn sich aus dem übergebenen Argument eine Zahl gewinnen lässt, antwortet <code>isNaN</code> mit <code>false</code>. Das heißt, die Antwort auf die Frage &#187;<i>ist das übergebene Argument keine Zahl?</i>&#171; lautet <i>Nein</i> &#x2014; es ist eine Zahl! Übergeben Sie stattdessen ein Argument, das sich in der Berechnung nicht numerisch weiterverwenden lässt, so weist der Rückgabewert <i>true</i> darauf hin. </p>
            <h3>Beispiele</h3>
            <p>
                <code>isNaN('17.7')</code> ergibt <code>false</code><br/>
                <code>isNaN('dreiundzwanzig')</code> ergibt <code>true</code><br/>
                <code>isNaN('3Autos')</code> ergibt <code>true</code><br/>
            </p>
            <h1>String größer string? Strings, Number und wie sie miteinander können</h1>
            <p>Auch Strings lassen sich auf mehr als nur Gleichheit prüfen. Sie können relationale
                Operatoren wie <i>kleiner</i> oder <i>größer</i> auf Strings anwenden. Was, denken
                Sie, ergibt <code>'Ladislaus' &gt; 'Oswine'</code>?</p>
            <p>Der Rückgabewert ist <code>false</code>. Das bedeutet nicht, dass der Interpreter die
                beiden kennt und deren Körpergröße oder sonstige Eigenschaften vergleicht (obwohl
                das sicherlich sehr interessant wäre). JS führt stattdessen einen simplen
                    <keyword>lexikographischen</keyword> (engl.: <keyword>lexicographic</keyword>)
                Vergleich durch. Das bedeutet, dass Sie Wörter zunächst aufgrund ihrer
                Anfangsbuchstaben ordnen, dann nach dem zweiten Buchstaben usw. &#x2014; so, wie die
                Begriffe innerhalb eines Lexikons eingeordnet sind. Da L vor O im Alphabet steht und
                somit als kleiner gilt, hat der Ausdruck <code>'Ladislaus' &gt; 'Oswine'</code> den
                Rückgabewert <code>false</code>. Der Ausdruck <code>'Anton' &gt; 'Alan'</code> gibt
                <code>true</code> zurück, da das erste Zeichen gleich ist, aber <code>n</code> nach
                <code>l</code> im Alphabet steht.</p>
            <hint src="images/hint/owl.png">
                <h3>Wenn Sie vom Vergleichen nicht genug bekommen können&#8230;</h3>
                <p>Wenn es sich bei den Strings, die Sie vergleichen, um Zahlen &#x2014; oder genauer Ziffern &#x2014; handelt, so werden diese ebenfalls in die lexikalische Reihenfolge einsortiert. Grundsätzlich sortieren relationale Operatoren Ziffern vor den Buchstaben ein.</p>
                <h3>Beispiel</h3>
                <ul>
                    <li><code>'5' &lt; 'a'</code> ergibt <code>true</code></li>
                    <li><code>'3' &lt; '4'</code> ergibt <code>true</code></li>
                </ul>
                <p>JS vergleicht auch Ziffern Zeichen für Zeichen, ohne dabei den Wert (vom Datentyp: <code>number</code>) zu berücksichtigen, den die Ziffernfolge darstellt.</p>
                <h3>Beispiel</h3>
                <ul>
                    <li><code>300 &lt; 4</code> ergibt <code>false</code> aber</li>
                    <li><code>'300' &lt; '4'</code> ergibt <code>true</code></li>
                </ul>
                <p>JS vergleicht zunächst das erste Zeichen. <code>'3'</code> ist kleiner als
                    <code>'4'</code>. Damit ist das Ergebnis bereits <code>true</code>, und
                    <code>'00'</code> ist nicht mehr zu berücksichtigen.</p>
                <p>Der Interpreter führt einen lexikographischen Vergleich durch, wenn beide Operanden vom Typ <code>string</code> sind. Ist ein Operand eine Zahl, konvertiert der Interpreter zunächst den Datentyp nach <code>number</code> (siehe <a href="#coercion"/>). Falls mindestens einer der Operanden sich dadurch in <code>NaN</code> wandelt, ist das Ergebnis <code>false</code>.</p>
                <h3>Beispiele</h3>
                <ul>
                    <li><code>'23' &lt; 37</code> ergibt <code>true</code></li>
                    <li><code>'300' &lt; 4</code> ergibt <code>false</code></li>
                    <li><code>'4' &lt; 300</code> ergibt <code>true</code></li>
                    <li><code>2 &lt; '3Autos'</code> ergibt <code>false</code>, da
                        <code>'3Autos'</code> zu <code>NaN</code> konvertiert. </li>
                </ul>
            </hint>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welches Ergebnis liefert folgender Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/09/question1.js" />
                        <p>Ergebnis: <blank>'istrue'</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert folgender Ausdrücke. Überlegen Sie sich
                            die Ergebnisse vorerst nur theoretisch und tragen Sie sie in die Tabelle
                            ein. Überprüfen Sie anschließend mithilfe der Konsole, ob Ihre
                            Ergebnisse richtig sind.</p>
                        <table>
                            <thead>
                                <tr>
                                    <th>Ausdruck</th>
                                    <th>Rückgabewert</th>
                                    <!-- TODO Datentyp macht keinen Sinn, wenn dieser immer boolean ist -->
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>'Computer' === 'Probleme'</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>19 &gt;= 19</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>19 &gt;= 19.2</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>5 * 7 === 36 - 1</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>3 + 3 !== 2 * 3</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'42' === 42</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'42' + 1 === 43</td>
                                    <!-- TODO Verkettung muss wie schon gesagt im Text noch irgendwo erläutert werden -->
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'2' * '4' === Number(17 / 2)</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'42' === 'zweiundvierzig'</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>isNaN('3' + '4')</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'zwei' &lt; 'drei'</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'seven' &lt; 'nine'</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>'nine' &lt; 'seven'</td>
                                    <td><blank>true</blank></td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welches Ergebnis liefert folgender Ausdruck?</p>
                        <blockcode numbered="numbered" src="code/09/question3.js" />
                    </question_text>
                    <answer correct="correct">'isfalse'</answer>
                    <answer>'isTrue'</answer>
                    <answer>'isFALSE'</answer>
                    <answer>keins, es wird ein Fehler ausgegeben</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text><p>Welche Vergleiche liefern den Wert <code>true</code>?</p></question_text>
                    <answer correct="correct">22 === 2 * 11</answer>
                    <answer correct="correct">22 === '2' * 11</answer>
                    <answer correct="correct">22 &lt; '20' + 2</answer>
                    <answer>202 === '20' + 2</answer>
                    <answer correct="correct">222 !== `222`</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text><p>Welche Vergleiche liefern den Wert <code>false</code>?</p></question_text>
                    <answer correct="correct">'300' &lt; 4</answer>
                    <answer correct="correct">'Alle' &gt; 'Einer'</answer>
                    <answer correct="correct">true === false</answer>
                    <answer correct="correct">(2 + 3) * 4 === 2 + (3 * 4)</answer>
                    <answer>(2 + 3) - 4 === 2 + (3 - 4)</answer>
                </question>
            </questions>
        </lesson>
        <lesson id="if_else">
            <lesson_name>Für alle Fälle &#8230; if &amp; else</lesson_name>
            <topics>
                <li>wie Sie Abhängigkeiten implementieren.</li>
                <li>die Verwendung des <i>ternären Operators</i> kennen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Wer auf dem Holzweg ist, hat die richtige Abzweigung verpasst.</p>
                </blockquote>
                <figcaption>Willy Meurer</figcaption>
            </figure>
            <h1>Wenn &#8230; dann</h1>
            <p>In der letzten Lektion haben Sie gelernt, mithilfe von relationalen Operatoren Ausdrücke zu formulieren, die <code>true</code> oder <code>false</code> zurückgeben. Statt diese booleschen Werte nur auszugeben, verwenden Sie sie nun als Bedingung, auf deren Basis Ihre Programme Entscheidungen treffen.</p>
            <h3>Beispiele</h3>
            <ul>
                <li><b>Bedingung:</b> Ein Rätsel wurde richtig beantwortet.<br/><b>Entscheidung:</b> Das Programm gratuliert dem Spieler zur Lösung.</li>
                <li><b>Bedingung:</b> Der Benutzer hat eine ungültige Zahl in ein Formular eingegeben.<br/><b>Entscheidung:</b> Die Anwendung weist den Benutzer auf seinen Fehler hin.</li>
                <li><b>Bedingung:</b> Die X-Koordinate einer Figur hat den rechten Bildschirmrand erreicht.<br/><b>Entscheidung:</b> Ab sofort bewegt sich die Figur nicht mehr nach rechts weiter, sondern beginnt, nach unten zu laufen.</li>
            </ul>
            <p>Wir dürfen auch das Feature nicht vergessen, dass sich unser Kunde noch wünscht:</p>
            <ul>
                <li><b>Bedingung:</b> Im Warenkorb befinden sich mindestens drei Exemplare desselben Produkts.<br/><b>Entscheidung:</b> Der Rabatt wird vom Preis subtrahiert.</li>
            </ul>
            <p>Programmiersprachen treffen Entscheidungen nach dem <i>Wenn-dann</i>-Prinzip. <b>Wenn</b> eine bestimmte Bedingung wahr (<code>true</code>) ist, <b>dann</b> führe eine oder mehrere Anweisungen aus. In JS übernimmt die <keyword>If-Anweisung</keyword> diese Aufgabe. Diese Anweisung besteht aus:</p>
            <ul>
                <li>dem Schlüsselwort <code>if</code>
                </li>
                <li>einer Bedingung (boolescher Ausdruck) in runden Klammern</li>
                <li>einem Rumpf in geschweiften Klammern, der die Anweisungen enthält</li>
            </ul>
            <p>Verwenden Sie folgende Syntax:</p>
            <blockcode numbered="numbered">
                if (Bedingung) {
                  Anweisung1;
                  Anweisung2;
                   ...
                }
            </blockcode>
            <h3>Beispiel</h3>
            <blockcode id="math_riddle" numbered="numbered" src="accompanying_files/10/examples/if.js"/>
            <p>Bei diesem Rätsel belegt zunächst Zeile 3 die Konstante <code>SOLUTION</code> mit der richtigen Lösung vor. Zeile 5 stellt die Frage und speichert die Eingabe in die Variable <code>answer</code>.<br/>In Zeile 7 prüft die <code>if</code>-Anweisung mithilfe des Gleichheitsoperators, ob die Eingabe der vorgegebenen Lösung entspricht. Wenn das der Fall ist, entscheidet der Interpreter, die Anweisungen im Rumpf (d.&#x202F;h. innerhalb der geschweiften Klammern <code>{&#8230;}</code>) auszuführen. Dadurch erhält der Benutzer eine Rückmeldung, sobald er die Aufgabe gelöst hat. War die Eingabe falsch, so wird der Rumpf nicht ausgeführt und das Skript endet, ohne eine Ausgabe zu erzeugen.</p>
            <p>Mithilfe eines sogenannten Aktivitätsdiagramms lässt sich eine <code>if</code>-Verzweigung visualisieren &#x2014; siehe <a href="#activity_diagram_if"/>. Aktivitätsdiagramme beschreiben Abläufe (Aktivitäten) innerhalb eines Programms. Verzweigungen und mögliche Wege lassen sich in Aktivitätsdiagrammen recht übersichtlich darstellen.</p>
            <figure id="activity_diagram_if" width="100%">
                <img src="images/language_dependent/de/activity_if.png"/>
                <figcaption>Aktivitätsdiagramm zur Rechenaufgabe mit <code>if</code></figcaption>
            </figure>
            <p>Bei einem <code>if</code> verzweigt der Programmfluss. D.&#x202F;h. es gibt zwei mögliche Wege. Deswegen wird <code>if</code> als <keyword>Verzweigung</keyword> bezeichnet und der Gruppe der sogenannten <keyword>Kontrollstrukturen</keyword> zugeordnet.</p>
            <p>Wie lässt sich nun unsere Kundenanforderung in der Praxis realisieren?</p>
            <blockcode numbered="numbered" src="accompanying_files/10/examples/discount.js"/>
            <p>Das <code>if</code> verwendet die Bedingung aus <a href="#relationale_operatoren"/>. Fall Sie im <code>prompt</code>
                <i>3</i> oder mehr eingegeben haben, gibt die Bedingung <code>true</code> zurück und das <code>if</code> führt die Anweisung in Zeile 10 aus. Diese reduziert dann den <code>totalPrice</code> um den Rabatt (<code>DISCOUNT</code>). Der <code>DISCOUNT</code> von <code>0.05</code> entspricht dabei den geforderten 5%.</p>
            <p>Hurra! Das Feature ist umgesetzt und der Kunde glücklich. Mal sehen, ob NerdWorld nun tatsächlich mehr Produkte verkauft&#8230;</p>
            <exercise>
                <name>Die dunkle Seite von JavaScript</name>
                <content>
                    <p>Programmieren Sie nun Stück für Stück ein kleines Quiz, in dem ein Spieler Fragen zu JS beantworten muss und damit gegen Fehler und schlechten Code &#x2014; also die dunkle Seite von JS &#x2014; antritt. Möge der Source mit Ihnen sein.</p>
                    <step>
                        <p>Als ersten Schritt fragen Sie den Spieler nach seinem Namen, speichern diesen in eine Variable und begrüßen ihn mittels einer Alert-Box. Ergänzen Sie den folgenden Code:</p>
                        <blockcode numbered="numbered">'use strict';

let username = ...
alert(...);                    </blockcode>
                    </step>
                    <step>
                        <p>Stellen Sie dem Spieler die Frage, ob er sich fit genug fühlt, um gegen das dunkle JavaScript anzutreten. Es ist sinnvoll, bei der Frage die Antwortmöglichkeiten anzugeben. Die Antwort speichern Sie in einer neuen Variable und erstellen als Nächstes eine <code>if</code>-Verzweigung. Der Rumpf des <code>if</code> soll nur ausgewertet werden, wenn der Spieler bestätigt, dass er sich stark genug fühlt, das Spiel zu beginnen. In den Rumpf schreiben wir ein <code>alert</code>, das den Spielstart bestätigt und den Spieler anfeuert.</p>
                        <blockcode numbered="numbered">'use strict';

let username = ...
alert(...);

let playerFitness = ...
if (...) {
  alert(...);
}                    </blockcode>
                        <p>Für den Fall, dass der Spieler zu feige ist und einen mangelnden Fitness-Grad angegeben hat, schreiben Sie eine weitere <code>if</code>-Verzweigung, die den Fall abfängt und den Spieler mit Schimpf und Schande verabschiedet. Natürlich dürfen Sie auch freundlich bleiben &#x2014; ganz wie Sie mögen.</p>
                        <blockcode numbered="numbered" src="accompanying_files/10/exercises/dark_side_of_js.js"/>
                        <p><b>Tipp:</b> Schon während Sie das Programm entwickeln, sollten Sie es immer wieder testen. Führen Sie nach jeder Änderung das Programm erneut aus!</p>
                    </step>
                    <step>
                        <p>Nun kann es losgehen. Stellen Sie den Spieler vor seine erste Aufgabe. Deklarieren Sie nach dem <code>alert</code> eine neue Variable, in der Sie die Antwort des Spielers zu folgender Frage speichern:<br/>&#187;<i>Which Operator has the higher priority: * or + ?</i>&#171; </p>
                        <p>Um auf die Antwort reagieren zu können, schreiben Sie eine weitere <code>if</code>-Verzweigung, deren Rumpf nur ausgewertet wird, wenn die Antwort stimmt.</p>
                        <blockcode numbered="numbered">'use strict';

let username = ...
alert(...);

let playerFitness = ...

if (...) {
  let fightOne = prompt(...
  if (...) {
    alert(...);
  }
}

if (...) {
  alert(...);
}                    </blockcode>
                        <p><code>alert</code> gratuliert hier zur korrekten Antwort. Wenn Sie mögen, können Sie noch weitere Verzweigungen mit Fragen einbauen.</p>
                    </step>
                    <step>Fügen Sie ein weiteres <code>if</code> für die Variante ein, in der der Spieler eine falsche Antwort gibt.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/10/solutions/dark_side_of_js.js"/>
                </answer>
            </exercise>
            <h1>Und wenn nicht, was dann?</h1>
            <p>In unserem kleinen Rechenspiel (<a href="#math_riddle"/>) erhält der Anwender derzeit ein Feedback, wenn er richtig gerechnet hat. Sollte er aber die hohe Kunst des Einmaleins nicht beherrschen, wird er es nie erfahren.</p>
            <p>Sie könnten ein weiteres <code>if</code> einbauen und nach <code>answer !==
                    solution</code> fragen, aber das geht eleganter:</p>
            <blockcode numbered="numbered" src="accompanying_files/10/examples/if_else.js"/>
            <p>Statt ein zweites <code>if</code> zu verwenden, erweitern Sie das erste um die <keyword>else-Anweisung</keyword>. Der Rumpf der <code>else</code>-Anweisung wird genau dann ausgeführt, wenn der Rumpf der <code>if</code>-Anweisung nicht ausgeführt wird. Ausgesprochen würde unser Skript in etwa so klingen:</p>
            <blockcode>
                Wenn die Eingabe gleich der Lösung ist,
                dann gib die Glückwünsche aus,
                sonst zeige die "Falsch"-Meldung.
             </blockcode>
            <p>Die <code>else</code>-Anweisung besteht aus:</p>
            <ul>
                <li>dem Schlüsselwort <code>else</code> und</li>
                <li>einem Rumpf mit Anweisungen.</li>
            </ul>
            <p><code>else</code> kann nie alleine stehen, da es lediglich eine Erweiterung für <code>if</code> ist. Deswegen wird üblicherweise von der <keyword>if-else</keyword>-Anweisung gesprochen. Die Syntax ist folgende:</p>
            <blockcode>
                if (Bedingung) {
                  Anweisung1a;
                  Anweisung2a;
                  ...
                } else {
                  Anweisung1b;
                  Anweisung2b;
                  ...
                }
            </blockcode>
            <p>Hier noch das Aktivitätsdiagramm:</p>
            <figure>
                <img src="images/language_dependent/de/activity_if-else.png"/>
                <figcaption>Aktivitätsdiagramm zur Rechenaufgabe mit <code>if-else</code></figcaption>
            </figure>
            <h1>Besonderheiten bei nur einer Anweisung</h1>
            <p>Wenn Sie übrigens im <code>if</code>- oder im <code>else</code>-Zweig nur eine einzige Anweisung haben, können Sie auf die geschweiften Klammern verzichten. Wir empfehlen aber, die Klammern nur dann wegzulassen, wenn es sich um eine kurze Anweisung handelt, die Sie mit dem <code>if</code> in die gleiche Zeile schreiben können. Ansonsten besteht die Gefahr, dass Sie später weitere Anweisungen ergänzen und dabei vergessen, die Klammern zu ergänzen.</p>
            <h3>Beispiel</h3>
            <blockcode>if (answer === SOLUTION) console.log('42 is correct.');</blockcode>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <ul>
                    <li>Nach dem Schlüsselwort <code>if</code> oder <code>else</code> folgt genau ein Leerzeichen.</li>
                    <li>Die öffnende geschweifte Klammer <code>{</code> des Rumpfes befindet sich in der gleichen Zeile wie das Schlüsselwort.</li>
                    <li>Nach der öffnenden Klammer des Rumpfes folgt ein Zeilenumbruch.</li>
                    <li>Die Anweisungen innerhalb des Rumpfes werden jeweils um 2 Leerzeichen eingerückt.</li>
                    <li>Die schließende geschweifte Klammer <code>}</code> des Rumpfes befindet sich auf einer eigenen Zeile und ist linksbündig zum ersten Schlüsselwort.</li>
                </ul>
                <p>
                    <b>Ausnahme:</b>
                </p>
                <ul>
                    <li>
                        <p>Enthält der Rumpf nur eine einzige Anweisung, so dürfen die Zeilenumbrüche und die geschweiften Klammern entfallen.</p>
                        <h3>Beispiel:</h3>
                        <blockcode>if (answer === SOLUTION) console.log('42 is correct.');</blockcode>
                    </li>
                </ul>
            </hint>
            <exercise id="dark_side_of_js">
                <name>Die dunkle Seite von JavaScript</name>
                <content>
                    <p>Für Ihr Spiel ist <i>else</i> ebenfalls hilfreich. Zum Beispiel bei der Frage, ob der Spieler bereit zum Spielen ist. Statt hier ein zweites <code>if</code> einzubauen, können Sie <code>else</code> verwenden.</p>
                    <p>Ersetzen Sie die <code>if</code>-Anweisungen an den richtigen Stellen durch ein <code>else</code>:</p>
                    <blockcode>'use strict';

let username = ...
alert(...);

let playerFitness = ...

if (...) {
  let fightOne = prompt(...
  if (...) {
    alert(...
  } else {
    alert(...
  }
} else {
  alert(...);
}                  </blockcode>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/10/solutions/dark_side_of_js_else.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Abnehmen mit JS</name>
                <content>
                    <p>Heute schreiben Sie ein kleines Motivations-Tool für Menschen, die ein bisschen abnehmen möchten.</p>
                    <step>Fragen Sie den Anwender zuerst nach seinem gestrigen und dann nach seinem heutigen Gewicht und speichern Sie die Antworten jeweils in einer Variable.</step>
                    <step>Für den Fall, dass das heutige Gewicht geringer ist als das gestrige, berechnen Sie die Verringerung in Prozent und geben eine begeisterte Gratulation unter Angabe der Gewichtsreduktion in ganzen Prozent aus. Vielleicht fällt Ihnen ja auch eine kleine Belohnung für den Anwender ein&#8230;</step>
                    <step>Für den Fall, dass das heutige Gewicht höher ist als das gestrige, rechnen Sie auch diese Veränderung in Prozent um und geben unter Angabe der Gewichtszulage in Prozent eine mahnende Nachricht aus. Vielleicht mit der Aufforderung zu einer Aktivität?</step>
                    <step>Für den Fall, dass das Gewicht identisch ist, feuern Sie den Anwender an, sich ein bisschen mehr zu bemühen und dranzubleiben.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/10/solutions/lose_weight_with_js.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Die Sache mit dem Schaltjahr</name>
                <content>
                    <p>Vielleicht gehören Sie zu den Menschen, die &#187;die Sache mit dem Schaltjahr&#171; spannend finden. Und falls Sie es nicht spannend finden, schreiben Sie einfach trotzdem ein Programm, das berechnet, ob es sich bei einem Jahr um ein Schaltjahr handelt.</p>
                    <p>Fragen Sie den Anwender nach dem gewünschten Jahr und speichern Sie die Eingabe in einer Variable.</p>
                    <p>Falls das betreffende Jahr ein Schaltjahr ist, soll die Konsole z.&#x202F;B.
                        den Satz &#187;<i>0000 ist ein Schaltjahr!</i>&#171; ausgeben; ansonsten
                            &#187;<i>0000 ist KEIN Schaltjahr</i>&#171; &#x2014; mit dem eingegeben
                        Jahr statt <i>0000</i>.</p>
                    <p>
                        <b>Ein Jahr ist ein Schaltjahr, wenn das betreffende Jahr </b>
                    </p>
                    <ul>
                        <li>ganzzahlig durch 400 teilbar ist.</li>
                        <li>nicht ganzzahlig durch 100, aber ganzzahlig durch 4 teilbar ist.</li>
                    </ul>
                    <hint>
                        <p>Die Berechnung ist übrigens nicht zu 100 Prozent genau, aber für die nächsten 2000 Jahre passt es noch.</p>
                    </hint>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/10/solutions/leap_year.js"/>
                </answer>
            </exercise>
            <h1>Wenn drei zusammenkommen: Der ternäre Operator</h1>
            <hint src="images/hint/bjoern.png">
                <p>Wir haben Bücher als neue Sparte in unsere Produktpalette integriert. Die Mehrwertsteuer für Bücher beträgt aber nur 7%. Könnten Sie den Code anpassen?</p>
            </hint>
            <p>Eine einfache Lösung für Björns neue Anforderung könnte irgendwo in den Tiefen des Shop-Codes z.&#x202F;B. so aussehen:</p>
            <blockcode numbered="numbered" src="accompanying_files/10/examples/totalPrice.js"/>
            <p>Dass Sie in beiden Zweigen einer if-Anweisung derselben Variable einen Wert zuweisen,
                kommt recht häufig vor. Wenn die if-Anweisung, so wie hier, keinen weiteren Zweck
                hat, kann der sogenannte <keyword>ternäre Operator</keyword> helfen, die Lesbarkeit
                des Codes zu verbessern.</p>
            <p>Der ternäre Operator hat drei Operanden (deswegen ternär) und trennt diese mit den
                Zeichen <code>?</code> und <code>:</code>. Sie können den obigen Code auch so
                schreiben:</p>
            <blockcode numbered="numbered" src="accompanying_files/10/examples/totalPrice_ternary.js"/>
            <p>Der ternäre Operator in Zeile 7 verhält sich dabei ähnlich wie ein
                <code>if-else</code>. Zunächst wertet JS den booleschen Ausdruck
                <code>productCategory === 'books'</code> vor dem <code>?</code> aus. Ist das
                Ergebnis <code>true</code>, gibt der Gesamtausdruck den ersten Wert, d.&#x202F;h.
                den Wert zwischen <code>?</code> und <code>:</code> zurück: <code>1.07</code>. Im
                anderen Fall erhalten Sie den Wert nach dem <code>:</code> &#x2014;
                <code>1.19</code>. Damit ist das List&#x00AD;ing semantisch identisch, aber kürzer und
                &#x2014; wenn Sie sich erst einmal an die neue Schreibweise gewöhnt haben &#x2014;
                auch deutlich besser lesbar.</p>
            <hint src="images/hint/owl.png">
                <p>Der Operator heißt übrigens <i>ternär</i>, weil er drei Operanden hat.</p>
            </hint>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Schreiben Sie folgenden Code um, sodass kein <i>if</i> oder <i>if-else</i> mehr benötigt wird:</p>
                        <blockcode>let isAccessGrantedText;
                            if (password === '123456') {
                            isAccessGrantedText = 'yes';
                            }  else {
                            isAccessGrantedText = 'no';
                            }</blockcode>
                        <p>Ohne if:</p>
                        <p><code>let isAccessGranted = password === '123456'</code>
                            <blank>
                                <option>? 'yes' : 'no'</option>
                                <option>? "yes" : "no"</option>
                                <option>? `yes` : `no`</option>
                            </blank><code>;</code></p>
                    </question_text>
                </question>
                <question type="fill_in_the_blanks" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Schreiben Sie folgenden Code um, sodass kein <i>if</i> oder <i>if-else</i> mehr benötigt wird:</p>
                        <blockcode>let isAccessGrantedText;
                            if (password === 'secret') {
                            isAccessGrantedText = 'yes';
                            }  else {
                            isAccessGrantedText = 'no';
                            }</blockcode>
                        <p>Ohne if:</p>
                        <p><code>let isAccessGranted </code><blank>=</blank><code> password === 'secret' </code><blank>?</blank><code> 'yes' </code><blank>:</blank>
                            <code> 'no';</code></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Schreiben Sie folgenden Code um, sodass kein <i>if</i> oder <i>if-else</i> mehr benötigt wird:</p>
                        <blockcode>let isAccessGrantedText;
if (password === '123456') {
  isAccessGrantedText = 'yes';
}  else {
  isAccessGrantedText = 'no';
}</blockcode>
                    </question_text>
                    <answer correct="correct"
                        ><code>let isAccessGranted = password === '123456' ? 'yes' : 'no';</code></answer>
                    <answer correct="correct"
                        ><code>let isAccessGranted = password !== '123456' ? 'no' : 'yes';</code></answer>
                    <answer><code>let isAccessGranted = password &lt;= '123456' ? 'no' : 'yes';</code></answer>
                    <answer><code>let isAccessGranted = password &gt;= '123456' ? 'no' : 'yes';</code></answer>
                </question>
                <question type="multiple_choice">
                    <question_text>
                        <p>Schreiben Sie folgenden Code um, so dass <i>if</i> oder <i>if ... else</i> verwendet wird:</p>
                        <blockcode>let isOver30 = age &gt; 30;</blockcode>
                    </question_text>
                    <answer correct="correct"><blockcode numbered="numbered">
                        let isOver30 = false;
                        if (age &gt; 30) isOver30 = true;
                    </blockcode></answer>
                    <answer><blockcode numbered="numbered">
                        let isOver30 = true;
                        if (age &gt; 30) isOver30 = true;
                    </blockcode></answer>
                    <answer correct="correct"><blockcode numbered="numbered">
                        let isOver30;
                        if (age &gt; 30) {
                            isOver30 = true;
                        } else {
                            isOver30 = false;
                        }
                    </blockcode></answer>
                    <answer><blockcode numbered="numbered">
                        let isOver30 = true;
                        if (age &lt; 30) isOver30 = false;
                    </blockcode></answer>
                    <answer correct="correct"><blockcode numbered="numbered">
                        let isOver30 = true;
                        if (age &lt;= 30) isOver30 = false;
                    </blockcode></answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Codezeilen verwenden die korrekte Syntax der If-Anweisung?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>if (a &gt; 1) { a = a - 1 };</p>
                    </answer>
                    <answer correct="correct">
                        <p>if (a &gt; 1) { a -= 1 };</p>
                    </answer>
                    <answer>
                        <p>if {a &gt; 1} { a = a - 1 };</p>
                    </answer>
                    <answer>
                        <p>if {a &gt; 1} { a -= 1 };</p>
                    </answer>
                    <answer>
                        <p>if a &gt; 1&#x00A0;&#x00A0; { a = a - 1 };</p>
                    </answer>
                    <answer>
                        <p>if a &gt; 1&#x00A0;&#x00A0; { a -= 1 };</p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                <question_text>
                    <p>Vereinfachen Sie den folgenden Code:</p>
                    <blockcode numbered="numbered">
                        let isHeavy;
                        if (weight &gt; 50) {
                            isHeavy = true;
                        } else {
                            isHeavy = false;
                        }
                    </blockcode>
                </question_text>
                <answer correct="correct"><blockcode>let isHeavy = isWeight &gt; 50;</blockcode></answer>
                <answer><blockcode>let isHeavy = isWeight &gt; 50 ? false : true;</blockcode></answer>
                <answer><blockcode>let isWeight = isHeavy &gt; 50;</blockcode></answer>
                <answer><blockcode>let isHeavy = isWeight &lt;= 50;</blockcode></answer>
            </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text><p>Welche Codezeile stellt eine korrekte Anwendung des ternären Operators da?</p></question_text>
                    <answer correct="correct">let a = b ? c : d;</answer>
                    <answer>let a ? b == c : d;</answer>
                    <answer>let a == b ? c : d;</answer>
                    <answer>let a = b : c ? d;</answer>
                </question>
            </questions>
        </lesson>
        <lesson>
            <lesson_name>Logische Operatoren oder der Anfang aller Weisheit</lesson_name>
            <topics>
                <li>wie Sie Logik verknüpfen.</li>
                <li>wie Sie mit Alternation umgehen.</li>
                <li>die Prioritäten logischer Operatoren kennen.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Logik ist der Anfang aller Weisheit, nicht das Ende.</p>
                </blockquote>
                <figcaption>Mr. Spock</figcaption>
            </figure>
            <h1>Mehrere Bedingungen mit logischen Operatoren verbinden</h1>
            <p>Das war ja zu befürchten: Björn und Tanja haben sich wieder getroffen. Meistens hat das Konsequenzen. Aber hören Sie selbst, was Björn zu sagen hat:</p>
            <hint src="images/hint/bjoern.png">
                <p>Sie hatten doch kürzlich den 5%-Rabatt für drei Exemplare desselben Artikels umgesetzt. Denselben Rabatt brauchen wir auch auf neue Artikel &#x2014; also solche, die erst kürzlich erschienen sind. Hmm &#x2014; ich würde sagen, für die ersten 30 Tage. Die beiden Rabatte sind aber nicht kumulativ, wir wollen den Leuten schließlich keinen 10%-Rabatt geben, wenn sie mehr als drei Exemplare eines neuen Artikels kaufen, das wäre ja geschäftsschädigend!</p>
            </hint>
            <p>Wie könnten Sie diese Anforderung umsetzen? Eine Möglichkeit wäre, mithilfe von zwei getrennten <code>if</code>-Anweisungen den Rabatt zu bestimmen.</p>
            <blockcode numbered="numbered">'use strict';

let productAgeInDays = prompt('Product age in days?');
let quantityOfCartItem = prompt('Quantity of the item?');
let discountPercentage = 0;

if (quantityOfCartItem &gt;= 3) {
  discountPercentage = 5;
}

if (productAgeInDays &lt;= 30) {
  discountPercentage = 5;
}

console.log(`Current discount: ${discountPercentage}%`);</blockcode>
            <p>Das Problem lässt sich einfacher lösen. Mithilfe des <keyword>Oder-Operators</keyword>
                <code>||</code> (zwei senkrechte Striche, sog. &#187;Pipes&#171;). Sie könnten sagen:</p>
            <p>Der Rabatt wird gewährt, falls</p>
            <ul>
                <li>mehr als 3 Exemplare des Produkts im Warenkorb sind <b>oder</b></li>
                <li>das Produkt nicht älter als 30 Tage ist.</li>
            </ul>
            <p>Nur eine der beiden Bedingungen muss zutreffen. Die erste <b>oder</b> die zweite. In JS beschreibt der folgende boolesche Ausdruck die Situation:</p>
            <blockcode>quantityOfItem &gt;= 3 || productAgeInDays &lt;= 30</blockcode>
            <p>Und so verwenden Sie den Ausdruck im Programm:</p>
            <blockcode numbered="numbered" src="accompanying_files/11/examples/or.js"/>
            <p>Der Oder-Operator <code>||</code> verbindet die beiden Bedingungen. Sobald mindestens eine der beiden Bedingungen <code>true</code> zurückgibt, hat der Gesamtausdruck im <code>if</code> den Rückgabewert <code>true</code> und das <code>if</code> reagiert entsprechend.</p>
            <h1>Funktionsweise des Oder-Operators</h1>
            <p>Wie arbeitet der Oder-Operator genau? Der Operator lässt sich als sogenannte <keyword>Wahrheitstabelle</keyword> darstellen. Das Ergebnis einer Oder-Verknüpfung ist dann wahr, wenn entweder der eine oder der andere Wert <code>true</code> ist.</p>
            <table>
                <caption>Wahrheitstabelle des oder-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>b</th>
                        <th>a || b</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>false</td>
                        <td>false</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>false</td>
                        <td>true</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>true</td>
                        <td>false</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                    </tr>
                </tbody>
            </table>
            <p>Die erste Zeile der Tabelle bedeutet: Wenn zwei Variablen <code>a</code>, <code>b</code> den Wert <code>false</code> enthalten, muss der Ausdruck <code>a || b</code> ebenfalls <code>false</code> sein. In JS stellt sich diese Situation folgendermaßen dar:</p>
            <blockcode numbered="numbered">
                let a = false;
                let b = false;
                alert(a || b);
            </blockcode>
            <p>Sie können natürlich auch direkt <code>false || false</code> in der Konsole eingeben, um den Ausdruck zu überprüfen.</p>
            <h1>Der Und-Operator</h1>
            <hint src="images/hint/bjoern.png">
                <p>Ach so &#x2014; hatte ich fast vergessen. Es gibt noch eine zweite Art Rabatt. Diesen 7%-Rabatt auf alles(!) gewähren wir aber nur für Erstbesteller und auch nur, wenn der gesamte Warenkorb einen Wert von mindestens $100 hat. Viele Neukunden machen nämlich nur Testbestellungen mit einem oder zwei Artikeln. Da wollen wir einfach einen zusätzlichen Anreiz schaffen, sich gleich den Wagen vollzupacken, anstatt alles auf mehrere Bestellungen zu verteilen.</p>
            </hint>
            <p>In diesem Fall müssen beide Bedingungen erfüllt sein, damit Sie den Rabatt gewähren können. Sie könnten sagen:</p>
            <p>Der Rabatt wird gewährt, falls</p>
            <ul>
                <li>der Gesamtpreis des Warenkorbs größer oder gleich $100 ist <b>und</b></li>
                <li>die Anzahl der bisherigen Bestellungen 0 beträgt (Neukunde).</li>
            </ul>
            <p>Für solche Fälle hält JS den <keyword>Und-Operator</keyword>
                <code>&amp;&amp;</code> bereit:</p>
            <blockcode>total &gt;= 100 &amp;&amp; numberOfOrders === 0</blockcode>
            <p>Und hier sehen Sie den Ausdruck im Einsatz:</p>
            <blockcode numbered="numbered" src="accompanying_files/11/examples/and.js"/>
            <h1>Funktionsweise des Und-Operators</h1>
            <p>Der Und-Operator funktioniert analog, folgt aber seiner eigenen Wahrheitstabelle. Das Ergebnis einer Und-Verknüpfung ist dann <code>true</code>, wenn <b>beide</b> Variablen den Wert <code>true</code> enthalten.</p>
            <table>
                <caption>Wahrheitstabelle des und-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>b</th>
                        <th>a &amp;&amp; b</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>false</td>
                        <td>false</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>false</td>
                        <td>true</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>true</td>
                        <td>false</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                    </tr>
                </tbody>
            </table>
            <h1>Der Nicht-Operator</h1>
            <p>Sie stehen in JS häufig vor der Situation, daß Sie ein <code>true</code> bräuchten, aber ein <code>false</code> erhalten oder umgekehrt. In diesen Fällen erweist sich ein weiterer logischer Operator als nützlich: der <keyword>Nicht-Operator</keyword>. Er wird in JavaScript als Ausrufezeichen <code>!</code> notiert. Sie stellen ihn einfach vor einen Rückgabewert. Er wandelt ein <code>true</code> in ein <code>false</code> um &#x2014; und umgekehrt. D.&#x202F;h. er invertiert einen booleschen Wert. Geben Sie z.&#x202F;B. <code>!true</code> in die Konsole ein, erhalten Sie <code>false</code>.</p>
            <table id="wahrheitstabelle_not">
                <caption>Wahrheitstabelle des Nicht-Operators</caption>
                <thead>
                    <tr>
                        <th>a</th>
                        <th>!a</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>false</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>true</td>
                        <td>false</td>
                    </tr>
                </tbody>
            </table>
            <p>Im Gegensatz zu <code>&amp;&amp;</code> und <code>||</code> hat der <code>!</code>-Operator nur einen Operanden. Entsprechend lesen Sie <a href="#wahrheitstabelle_not"/>. Die erste Zeile der Tabelle bedeutet: Wenn eine Variable <code>a</code> den Wert <code>false</code> hat, gibt der Ausdruck <code>!a</code> den Wert <code>true</code> zurück. Es gibt viele verschiedene Situationen, in denen Ihnen dieser Operator nützt. Ein Beispiel: Wollen Sie dem Benutzer mitteilen, dass er eine Zahl eingegeben hat, so benötigen Sie die <code>isNaN</code>-Funktion. Diese tut aber genau das Gegenteil. Sie gibt <code>true</code> zurück, wenn es sich <b>nicht</b> um eine Zahl handelt. Kein Problem für den <code>!</code>-Operator:</p>
            <blockcode numbered="numbered" src="accompanying_files/11/examples/not.js"/>
            <h1>Priorität von logischen Operatoren</h1>
            <p>Logische Operatoren haben eine geringe Priorität, werden aber noch vor der Zuweisung ausgeführt. Der Nicht-Operator <code>!</code> stellt als <keyword>unärer Operator</keyword> (d.&#x202F;h. Operator mit nur einem Operanden) eine Ausnahme dar. Wie alle unären Operatoren hat er eine sehr hohe Priorität.</p>
            <table>
                <caption>Operatoren in der Auswertungsreihenfolge</caption>
                <thead>
                    <tr>
                        <th>Priorität / Präzedenz</th>
                        <th>Operator</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Funktionsaufruf (z.&#x202F;B. <code>alert()</code>)<br/>Klammern <code>()</code><br/></td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td><b>!</b><br/>typeof</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>*<br/>/<br/>%</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>+<br/>-</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>&lt;<br/> &gt;<br/> &lt;=<br/> &gt;=</td>
                    </tr>
                    <tr>
                        <td>6</td>
                        <td>===<br/>!==</td>
                    </tr>
                    <tr>
                        <td>7</td>
                        <td>
                            <b>&amp;&amp;</b>
                        </td>
                    </tr>
                    <tr>
                        <td>8</td>
                        <td>
                            <b>||</b>
                        </td>
                    </tr>
                    <tr>
                        <td>9</td>
                        <td>=<br/>+=<br/>-=<br/>*=<br/>/=<br/>%=</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die Tabelle:</p>
                        <table width="100%">
                            <caption>Wahrheitstabelle des oder-Operators</caption>
                            <thead>
                                <tr>
                                    <th>a</th>
                                    <th>b</th>
                                    <th>a || b</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>false</td>
                                    <td>false</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>false</td>
                                    <td>true</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>false</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>true</td>
                                    <td><blank>true</blank></td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die Tabelle:</p>
                        <table width="100%">
                            <caption>Wahrheitstabelle</caption>
                            <thead>
                                <tr>
                                    <th>a</th>
                                    <th>b</th>
                                    <th>c</th>
                                    <th>a &amp;&amp; (b || c)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>false</td>
                                    <td>false</td>
                                    <td>false</td>
                                    <td>false</td>
                                </tr>
                                <tr>
                                    <td>false</td>
                                    <td>true</td>
                                    <td>false</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>false</td>
                                    <td>false</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>true</td>
                                    <td>false</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>false</td>
                                    <td>false</td>
                                    <td>true</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>false</td>
                                    <td>true</td>
                                    <td>true</td>
                                    <td><blank>false</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>false</td>
                                    <td>true</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>true</td>
                                    <td>true</td>
                                    <td>true</td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question public="public" reviewed="reviewed" type="fill_in_the_blanks">
                    <question_text>
                        <p>Ergänzen Sie die Tabelle:</p>
                        <table width="100%">
                            <caption>Wahrheitstabelle des und-Operators</caption>
                            <thead>
                                <tr>
                                    <th>a</th>
                                    <th>b</th>
                                    <th>a &amp;&amp; b</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>false</td>
                                    <td>false</td>
                                    <td>false</td>
                                </tr>
                                <tr>
                                    <td>false</td>
                                    <td>true</td>
                                    <td>false</td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td><blank>false</blank></td>
                                    <!-- TODO zu einfach; besser alle dritten Spalten als blank außer dem ersten false -->
                                    <td>false</td>
                                </tr>
                                <tr>
                                    <td>true</td>
                                    <td>true</td>
                                    <td><blank>true</blank></td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert folgender Ausdrücke:</p>
                        <ul>
                            <li>
                                <blockcode>!(4 &lt; 3)</blockcode>
                                <p>Ergebnis: <blank>true</blank></p>
                            </li>
                            <li>
                                <blockcode>'a' &lt; 'b' &amp;&amp; Math.ceil(1.1) === 2</blockcode>
                                <p>Ergebnis: <blank>true</blank></p>
                            </li>
                            <li>
                                <blockcode>3 * 2 === 3 + 3 || 'x' === 'y'</blockcode>
                                <p>Ergebnis: <blank>true</blank></p>
                            </li>
                        </ul>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert folgender Ausdrücke:</p>
                        <ul>
                            <li>
                                <blockcode>!(6 &lt; 7)</blockcode>
                                <p>Ergebnis: <blank>false</blank></p>
                            </li>
                            <li>
                                <blockcode>'HALLO' &lt; 'hallo' &amp;&amp; Math.floor(1.1) === 1</blockcode>
                                <p>Ergebnis: <blank>true</blank></p>
                            </li>
                            <li>
                                <blockcode>3 * 2 === 3 + 2 || 'a' !== 'b'</blockcode>
                                <p>Ergebnis: <blank>true</blank></p>
                            </li>
                        </ul>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode>4 &lt; 3 || ('a' != 'b' &amp;&amp; Math.ceil(1.1) === 2)</blockcode>
                    </question_text>
                    <answer>
                        <p>Ergebnis: <blank>true</blank></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden sind gültige JavaScript (ES6) Operatoren?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>+=</p>
                    </answer>
                    <answer correct="correct">
                        <p>/=</p>
                    </answer>
                    <answer correct="correct">
                        <p>%=</p>
                    </answer>
                    <answer correct="correct">
                        <p>&gt;=</p>
                    </answer>
                    <answer correct="correct">
                        <p>&lt;=</p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Aussage ist korrekt?</p>
                    </question_text>
                    <answer>false || false === true</answer>
                    <answer correct="correct">false || true === true</answer>
                    <answer correct="correct">true || false === true</answer>
                    <answer correct="correct">true || true === true</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Aussage ist korrekt bei gegebenen Werten für <code>a</code> und <code>b</code>:</p>
                        <blockcode>
                            let a = false;
                            let b = true;
                        </blockcode>
                    </question_text>
                    <answer correct="correct">(a &amp;&amp; b) === false</answer>
                    <answer correct="correct">a || b === true</answer>
                    <answer>a &amp;&amp; b === true</answer>
                    <answer correct="correct">!a &amp;&amp; b === true</answer>
                    <answer>a || !b === true</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Aussage ist korrekt bei gegebenen Werten für <code>a</code>, <code>b</code> und <code>c</code>:</p>
                        <blockcode>
                            let a = false;
                            let b = true;
                            let c = (a || b);
                        </blockcode>
                    </question_text>
                    <answer correct="correct">a &amp;&amp; b || c === true</answer>
                    <answer correct="correct">a || b &amp;&amp; c === true</answer>
                    <answer>a &amp;&amp; (b || c) === true</answer>
                    <answer correct="correct">!(a &amp;&amp; b) || c === true</answer>
                    <answer>a || !(b &amp;&amp; c) === true</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Ausdrücke ergeben den Wert <code>false</code>?</p>
                    </question_text>
                    <answer correct="correct">4 &lt; 3</answer>
                    <answer>'a' &lt; 'b' &amp;&amp; Math.ceil(1.1) === 2</answer>
                    <answer>3 * 2 === 3 + 3 || 'x' === 'y'</answer>
                    <answer correct="correct">'xxx' &gt; 'xyz'</answer>
                    <answer>'3' * 2 === 6</answer>
                </question>

                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden sind gültige JavaScript Operatoren?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>&amp;&amp;</p>
                    </answer>
                    <answer correct="correct">
                        <p>||</p>
                    </answer>
                    <answer correct="correct">
                        <p>!</p>
                    </answer>
                    <answer>
                        <p>!&amp;</p>
                    </answer>
                    <answer>
                        <p>|&amp;</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Die dunkle Seite schlägt zurück&#8230;</name>
                <content>
                    <p>Endlich setzen Sie Ihren Kampf gegen die dunkle Seite von JS fort (siehe <a href="#dark_side_of_js"/>) und erstellen zwei neue &#187;Kampf-Sequenzen&#171;:</p>
                    <ul>
                        <li>&#187;What's the German word for if&#171; (Mehrere Lösungsmöglichkeiten: <i>wenn</i>, <i>falls</i>).</li>
                        <li>&#187;Now, please enter a string with a length between 8 and 15 characters&#8230;&#171;</li>
                    </ul>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/11/solutions/dark_side_of_js.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Von guten und bösen Eingaben</name>
                <content>
                    <step>Nehmen Sie Angaben zu Vorname, Nachname, Geschlecht und Alter eines Anwenders entgegen und speichern Sie diese in Variablen.</step>
                    <step>
                        <p>Diese Eingaben sollen Sie nun folgendermaßen validieren:</p>
                        <ul>
                            <li>Vorname und Nachname müssen zwischen 2 und 100 Zeichen lang sein.</li>
                            <li>Die Eingabe für das Geschlecht muss <i>m</i> (male) oder ein <i>f</i> (female) sein.</li>
                            <li>Das Alter muss eine Zahl unter 150 sein.</li>
                        </ul>
                    </step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/11/solutions/inputs.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Die Sache mit dem Schaltjahr &#x2014; Teil 2</name>
                <content>
                    <p>Verschaffen Sie Ihrem Schaltjahr-Tool aus <a href="#if_else"/> ein Facelifting. Mithilfe der logischen Operatoren können Sie einige <code>else</code> einsparen und den Code einfacher, kürzer und übersichtlicher gestalten.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/11/solutions/leap_year2.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Buntes String-Allerlei</lesson_name>
            <topics>
                <li>wie Sie einen Teilstring aus einem String extrahieren.</li>
                <li>einen Abschnitt innerhalb eines Strings ersetzen.</li>
                <li>weitere Möglichkeiten Strings zu manipulieren.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>In den Text zwischen den Zeilen haben sich Fehler eingeschlichen.</p>
                </blockquote>
                <figcaption>Michail Genin</figcaption>
            </figure>
            <p>Es ist mal wieder soweit: Björn ruft an. Er ist etwas verlegen am Telefon und erzählt Ihnen von seinem Dilemma in der Hoffnung, dass Sie ihm helfen können.</p>
            <hint src="images/hint/bjoern.png">
                <p>Auf unserer bestehenden statischen Seite können sich schon seit längerem Kunden für einen Newsletter anmelden. Leider hat der Programmierer damals im Anmeldeformular Vor- und Nachname nicht getrennt abgefragt. So ist unsere Datenbank bezüglich Kundenpflege leider nicht sehr hilfreich. Natürlich passen die Designer das Formular an, aber was machen wir mit den bestehenden Daten?</p>
            </hint>
            <p>Zum Glück bietet die String-API einige Möglichkeiten, die Ihnen bei Björns Problem helfen können.</p>
            <h1>Vom Suchen und Finden mit indexOf</h1>
            <p>Mithilfe von <code>indexOf</code> können Sie die Position eines bestimmten Strings innerhalb eines größeren Strings herausfinden.</p>
            <p>Da Sie nicht auf eine echte Datenbank zurückgreifen können, legen Sie den Namen als Variable an. Statt den korrigierten String in die Datenbank zu speichern, loggen Sie ihn in die Konsole.</p>
            <p><code>indexOf</code> erwartet den zu suchenden String als Argument und gibt Ihnen die Position zurück. Hier ist der zu suchende String ein Leerzeichen, das Vor- und Nachname trennt.</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/indexOf.js"/>
            <p>Sie erhalten die Zahl <code>9</code> als Position des Leerzeichens. Damit wissen Sie, an welcher Stelle Sie den String zerlegen müssen.</p>
            <hint>
                <h3>Mehr vom Index</h3>
                <ul>
                    <li>Die Zählung der Position beginnt bei 0 &#x2014; d.&#x202F;h. falls die Fundstelle mit dem ersten Zeichen des Strings beginnt, erhalten Sie <code>0</code> zurück.</li>
                    <li>Wenn die Funktion <code>indexOf</code> den gewünschten String nicht findet, gibt sie -1 zurück.</li>
                    <li><code>indexOf</code> gibt die Position des <b>ersten</b> Fundes aus.</li>
                    <li><code>indexOf</code> beginnt am Anfang des Strings mit der Suche. Falls Sie die Suche aber lieber von hinten beginnen möchten, können Sie sich freuen: Die Funktion <code>lastIndexOf</code> findet das <b>letzte</b> Vorkommen des gesuchten Strings.</li>
                </ul>
            </hint>
            <h1>Abnehmen mit substr</h1>
            <p>Die Funktion <code>substr</code> (von <i>substring</i>, dt.: Teilzeichenkette) extrahiert einen Teilstring aus einem größeren String. Als Argumente benötigt sie</p>
            <ul>
                <li>die Position des ersten Zeichens und</li>
                <li>die Anzahl von Zeichen, die Sie extrahieren möchten.</li>
            </ul>
            <p>Für den Vornamen heißt das, dass Sie vom Anfang des Strings (Position <code>0</code>) betrachtet <code>9</code> Zeichen extrahieren möchten.</p>
            <blockcode numbered="numbered">'use strict';

let name = 'Ladislaus Jones';
let spacePosition = name.indexOf(' ');
let firstName = name.substr(0, spacePosition);

console.log(firstName);</blockcode>
            <p>Für den Nachnamen benötigen Sie alle Buchstaben ab Position <code>10</code> (d.&#x202F;h. nach dem Leerzeichen) bis zum Ende des Strings. Praktisch ist, dass Sie auf das zweite Argument verzichten können. Schreiben Sie nicht einfach eine <code>10</code> in den Code, sondern nutzen Sie die Variable <code>spacePosition</code>. Direkt nach der Position des Leerzeichens beginnt der Nachname, d.&#x202F;h. an <code>spacePosition + 1</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/substr.js"/>
            <p>Nun liegt der Name in zwei getrennten Strings vor. Damit sind Sie bei der Verwendung des Namens flexibel.</p>
            <exercise>
                <name>Wenn ein Vorname nicht reicht...</name>
                <content>
                    <p>Vielleicht ist Ihnen aufgefallen, dass die Zerlegung nur richtig funktioniert, wenn der Name in der Form <code>'Vorname Nachname'</code> vorliegt.</p>
                    <p>Sollte ein Nutzer einen zweiten Vornamen angeben, ordnet das Programm den zweiten Vorname dem Nachnamen zu. Sie würden für den Namen <i>Ladislaus Coolio Jones</i> fälschlicherweise Folgendes erhalten:</p>
                    <blockcode numbered="numbered">
                    let firstName = 'Ladislaus';
                    let lastName = 'Coolio Jones';
                </blockcode>
                    <p>Korrigieren Sie die Ausgabe des folgenden Codes mithilfe von <code>lastIndexOf</code></p>
                    <blockcode numbered="numbered" src="accompanying_files/12/exercises/first_name.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/first_name.js"/>
                </answer>
            </exercise>
            <h1>trim Dich fit</h1>
            <p>Björn ist indes zufrieden, aber noch nicht glücklich:</p>
            <hint src="images/hint/bjoern.png">
                <p>Das ist ja wirklich klasse! Wäre es dann vielleicht auch noch möglich, die Daten von überflüssigen Leerzeichen zu bereinigen? Manche Leute geben Ihre Daten leider nicht sauber in das Formular ein.</p>
            </hint>
            <p>Kaum zu glauben, aber das funktioniert fast wie von selbst mit der Funktion <code>trim</code>. Diese ist sogar so genügsam, dass sie noch nicht mal einen Parameter verlangt.</p>
            <blockcode numbered="numbered">
                let name = ' Jones ';
                console.log(name.trim()); // =&gt; 'Jones' (ohne Leerzeichen)
            </blockcode>
            <p><b>Wichtig ist</b>: <code>trim</code> entfernt Leerzeichen am Anfang und am Ende eines Strings, nicht jedoch in der Mitte. Meistens ist das aber genau das, was Sie bei solchen Bereinigunsaktionen auch erwarten.</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/trim.js"/>
            <exercise>
                <name>Der zerlegte Heribert</name>
                <content>
                    <p>Björns neue Anforderung stellt nun auch kein Problem mehr dar! Folgender Datensatz liegt Ihnen vor:</p>
                    <blockcode>
                    let name = 'Heribert  Gold ';
                </blockcode>
                    <step>Zerlegen Sie den Namen in Vor- und Nachnamen.</step>
                    <step>Entfernen Sie die überflüssigen Leerzeichen.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/heribert.js"/>
                </answer>
            </exercise>
            <h1>Wählerisch sein mit charAt</h1>
            <p>Wie das mit Kunden oft so ist: Gelöste Probleme wecken ihre Kreativität und spornen sie erst richtig an, neue Problemstellungen zu kreieren. Die nächste Aufgabe folgt also prompt:</p>
            <hint src="images/hint/bjoern.png">
                <p>Jetzt, wo wir flexibel auf Vor- und Nachnamen zugreifen können, würden wir gerne noch eine zusätzliche Ausgabemöglichkeit der Datensätze haben. Für eine einfache Liste brauchen wir den Vornamen oft nicht komplett. Wäre es möglich, z.&#x202F;B. den Namen <i>Ladislaus Jones</i> in der Form <code>&#187;Jones,
                        L.&#171;</code> auszugeben?</p>
            </hint>
            <p>Dazu müssen Sie den ersten Buchstaben des Vornamens ausgeben. Da Sie nicht nach einem bestimmten String, sondern einer bestimmten Position suchen, hilft Ihnen die Funktion <code>indexOf</code> leider nicht weiter.</p>
            <p>Verwenden Sie stattdessen die Funktion <code>charAt</code>. Sie erwartet als Parameter die Position des zu extrahierenden Zeichens.</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/charAt.js"/>
            <exercise id="der_transformierte_ladislaus">
                <name>Der transformierte Ladislaus</name>
                <content>
                    <p>Und weil es so viel Freude macht:</p>
                    <p>Speichern Sie den Namen &#187;Ladislaus Jones&#171; in einer Variable und kreieren Sie eine Ausgabe nach dem Schema <code>'&lt;Nachname&gt;, &lt;Anfangsbuchstabe des
                        Vornamens&gt;.'</code>, also <code>'Jones, L.'</code>.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/ladislaus.js"/>
                </answer>
            </exercise>
            <h1>Schrumpfen mit toLowerCase</h1>
            <hint src="images/hint/bjoern.png">
                <p>Das Problem mit den Leerzeichen haben Sie super gelöst! Bei der Durchsicht unserer Datenbestände ist mir nun aber noch etwas aufgefallen. Manche Namen sind komplett in Kleinbuchstaben angegeben, oder der zweite Buchstabe im Namen wurde versehentlich auch noch großgeschrieben. Eine weitere Korrektur der Daten wäre klasse.</p>
            </hint>
            <p>Für die Korrektur dieses Problems helfen Ihnen gleich zwei Funktionen:</p>
            <ul>
                <li><code>toLowerCase</code> und </li>
                <li><code>toUpperCase</code>.</li>
            </ul>
            <p>Wandeln Sie zunächst den kompletten String in Kleinbuchstaben um.</p>
            <blockcode numbered="numbered">'use strict';

let firstName = 'lAdislaus';
firstName = firstName.toLowerCase();

let lastName = 'JOnes';
lastName = lastName.toLowerCase();

console.log(firstName + " " + lastName);            </blockcode>
            <p>Nun liegt der Name komplett in Kleinbuchstaben vor:</p>
            <blockcode>
                ladislaus jones
            </blockcode>
            <p>Die beiden Namensteile sollten allerdings jeweils mit einem Großbuchstaben beginnen. Dafür benötigen Sie die neue Funktion <code>toUpperCase</code> und die beiden bereits bekannten Funktionen <code>substr</code> und <code>charAt</code>.</p>
            <p>Mithilfe von <code>charAt</code> und <code>substr</code> können Sie genau angeben, welcher Teil des Namens groß und welcher klein zu schreiben ist. Dann verketten Sie beide Teile wieder miteinander.</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/toLowerCase.js"/>
            <p>Die Konsole gibt wie gewünscht aus:</p>
            <blockcode>
                Ladislaus Jones
            </blockcode>
            <exercise>
                <name>Die dunkle Seite von JavaScript &#x2014; der Kampf geht weiter.</name>
                <content>
                    <p>Es wird Zeit, das Spiel weiter zu optimieren. Nehmen Sie sich eine der Fragen vor, die schon implementiert ist:</p>
                    <p>&#187;Was heißt if zu deutsch?&#171; (Mehrere Lösungsmöglichkeiten: wenn, falls).</p>
                    <p>Der Code deckt schon drei verschiedene Lösungsmöglichkeiten ab. Aber was ist, wenn jemand statt <code>wenn</code>
                        <code>Wenn</code> oder <code>WENN</code> schreibt?</p>
                    <p>Das Thema <i>Groß- und Kleinschreibung</i> wird Ihnen bei Benutzereingaben öfter begegnen. Für das Spiel würde es zum Beispiel helfen, wenn der Spieler die Eingabe immer komplett kleinschreibt. Sicher ist der Spieler verwirrt, wenn das Spiel seine Antwort <code>Wenn</code> als falsch quittiert.</p>
                    <p>Optimieren Sie die betreffende Stelle im Spiel, indem Sie die Benutzereingabe in Kleinbuchstaben wandeln &#x2014; vor Prüfung der if-Bedingung.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/dark_side_of_js_caseinsensitive.js"/>
                </answer>
            </exercise>
            <h1>Verflixt und ausgetauscht mit replace</h1>
            <p>Langsam flutscht es mit den neuen Funktionen. Freuen Sie sich schon auf die neuste Anforderung von Björn und Kollegen?</p>
            <hint src="images/hint/bjoern.png">
                <p>Manchmal kommt es vor, dass wir aus Marketinggründen Produkte umbenennen möchten. Den Austausch per Hand zu machen wäre nicht nur fehleranfällig, sondern auch mühselig. Haben Sie da eine Lösung parat?</p>
            </hint>
            <figure width="40%">
                <img src="images/photos/prescription_mug.jpg"/>
                <figcaption>Prescription mug, <a href="http://www.thinkgeek.com/product/1a4c/">© 2015 ThinkGeek, Inc. All Rights Reserved.</a></figcaption>
            </figure>
            <p>Natürlich haben Sie das: Mit der Funktion <code>replace</code>. Sie ermöglicht es, innerhalb eines Strings Ersetzungen vorzunehmen. Als ersten Parameter erwartet die Funktion den gesuchten String und als zweiten den Austausch-String.</p>
            <blockcode numbered="numbered">'use strict';

let productName = 'Prescription Mug';
let productDescription = 'Prescription Mug: Coffee Mug which looks like a drug bottle. Your Prescription Mug is a great conversation starter. Great for the caffeine addict in your life - one that doesn\'t need an intervention. You will love your Prescription Mug.';
let newProductName = 'Drug Mug';

console.log(productDescription.replace(productName, newProductName));</blockcode>
            <p>Sobald Sie den Code ausführen, sehen Sie, dass die Funktion nur das erste Vorkommen des Produktnamens ersetzt.</p>
            <blockcode>
                Drug Mug: Coffee Mug which looks like a drug bottle.  So your Prescription Mug is a great conversation starter. Great for the caffeine addict in your life - one that doesn't need an intervention. You will love your Prescription Mug.
            </blockcode>
            <p>Abhilfe schafft folgende Schreibweise für den ersten Parameter:</p>
            <blockcode>/Suchbegriff/g</blockcode>
            <p>Die Schrägstriche (Slashes) kennzeichnen eine sogenannte <keyword>Regular Expression</keyword> (dt.: <keyword>regulärer Ausdruck</keyword>). Regular Expressions sind hilfreich bei der Texterkennung und bieten eine Vielzahl an Möglichkeiten. An dieser Stelle ist aber nur wichtig, dass Sie als Suchbegriff einen beliebigen String verwenden können.</p>
            <p>Der Buchstabe <code>g</code> steht für <i>global</i> und sorgt dafür, dass die Funktion die Ersetzungen im ganzen Text durchführt, statt nur an der ersten Stelle. Beachten Sie, dass der reguläre Ausdruck in Slashes steht und nicht in Anführungszeichen!</p>
            <blockcode numbered="numbered" src="accompanying_files/12/examples/replace.js"/>
            <p>Nun tauscht <code>replace</code> &#x2014; wie gewünscht &#x2014; in der kompletten Artikelbeschreibung den Namen aus.</p>
            <blockcode>
                Drug Mug: Coffee Mug which looks like a drug bottle. Your Drug Mug is a great conversation starter. Great for the caffeine addict in your life - one that doesn't need an intervention. You will love your Drug Mug.
            </blockcode>
            <!--
            <h1>Fokussieren der inneren Werte mit includes</h1>
            <p>Ein Shop ohne Suche ist wenig sinnvoll und so erhalten Sie eine neue Anforderung von
                Björn:</p>
            <hint src="images/hint/bjoern.png">
                <p>Unser Shop braucht natürlich noch eine Suchfunktion, damit Kunden auch direkt
                    nach einem bestimmten Produkt oder Schlagworten suchen können.</p>
            </hint>
            <p>Mit der Funktion <code>includes</code> alleine lässt sich keine echte Suchfunktion
                realisieren, sie dient aber als Grundlage und Ihnen daher als Vorbereitung.</p>
            <blockcode caption="Produktbeschreibung: thinkgeek.com">
                Bake and build
                Silicone cake molds shaped like building bricks
                Makes 4 2X2 blocks per batch
                Oven, microwave, and dishwasher safe
            </blockcode>
            <h1>Wehret den Anfängen mit startsWith</h1>
            <p>Ein Shop ohne Suche ist wenig sinnvoll, und so erhalten Sie eine neue Anforderung von
                Björn:</p>
            <hint src="images/hint/bjoern.png">
                <p>Wir hätten gerne zusätzlich zu der Volltext-Suche auch eine </p>
            </hint>
             -->
            <h1>Referenz</h1>
            <table>
                <caption>String-API Übersicht am Beispiel <code>let s = 'abcde'</code></caption>
                <thead>
                    <tr>
                        <th>Funktion</th>
                        <th>Zweck</th>
                        <th>Beispielaufruf für<br/><code>let s = 'abcde'</code></th>
                        <th>Rückgabewert</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>charAt</td>
                        <td>Ermittelt das Zeichen an der angegebenen Stelle</td>
                        <td>
                            <code>s.charAt(1)</code>
                        </td>
                        <td>'b'</td>
                    </tr>
                    <tr>
                        <td>includes</td>
                        <td>Prüft, ob der String den angegebenen Teilstring enthält</td>
                        <td>
                            <code>s.includes('bc')</code>
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>startsWith</td>
                        <td>Prüft, ob der String mit dem angegebenen Teilstring beginnt</td>
                        <td>
                            <code>s.startsWith('ab')</code>
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>endsWith</td>
                        <td>Prüft, ob der String mit dem angegebenen Teilstring endet</td>
                        <td>
                            <code>s.endsWith('de')</code>
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>indexOf</td>
                        <td>Ermittelt die Position des angegebenen Teilstrings innerhalb des Strings</td>
                        <td>
                            <code>s.indexOf('cd')</code>
                        </td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <td>lastIndexOf</td>
                        <td>Ermittelt die Position des angegebenen Teilstrings innerhalb des Strings (Suche beginnt von hinten)</td>
                        <td>
                            <code>s.lastIndexOf('de')</code>
                        </td>
                        <td>3</td>
                    </tr>
                    <tr>
                        <td>padStart<footnote>ab ECMAScript 2017</footnote></td>
                        <td>fügt Leerzeichen am Anfang an, um den String auf die angegebene Länge zu vergrößern</td>
                        <td>
                            <code>'abc'.padStart(4)</code>
                        </td>
                        <td>' abc'</td>
                    </tr>
                    <tr>
                        <td>padEnd<footnote>ab ECMAScript 2017</footnote></td>
                        <td>fügt Leerzeichen am Ende an, um den String auf die angegebene Länge zu vergrößern</td>
                        <td>
                            <code>'abc'.padStart(4)</code>
                        </td>
                        <td>'abc '</td>
                    </tr>
                    <tr>
                        <td>repeat</td>
                        <td>Wiederholt den String so oft wie angegeben</td>
                        <td>
                            <code>s.repeat(2)</code>
                        </td>
                        <td>'abcdeabcde'</td>
                    </tr>
                    <tr>
                        <td>replace</td>
                        <td>Ersetzt im String bestimmte Zeichen</td>
                        <td>
                            <code>s.replace('a', 'x')</code>
                        </td>
                        <td>'xbc'</td>
                    </tr>
                    <tr>
                        <td>substr</td>
                        <td>Extrahiert einen Teilstring an der angegebenen Postion</td>
                        <td>
                            <code>s.substr(1, 3)</code>
                        </td>
                        <td>'bcd'</td>
                    </tr>
                    <tr>
                        <td>toLowerCase</td>
                        <td>Gibt den String in Kleinschreibung zurück</td>
                        <td>
                            <code>'AbCdE'.toLowerCase()</code>
                        </td>
                        <td>'abcde'</td>
                    </tr>
                    <tr>
                        <td>toUpperCase</td>
                        <td>Gibt den String in Großschreibung zurück</td>
                        <td>
                            <code>'AbCdE'.toUpperCase()</code>
                        </td>
                        <td>'ABCDE'</td>
                    </tr>
                    <tr>
                        <td>trim</td>
                        <td>Entfernt Whitespace (Leerzeichen, Zeilenumbrüche) am Anfang und am Ende</td>
                        <td>
                            <code>'\n abc \n'.trim()</code>
                        </td>
                        <td>'abc'</td>
                    </tr>
                    <tr>
                        <td>trimEnd, trimRight<footnote>ab ECMAScript 2019</footnote></td>
                        <td>Entfernt Whitespace (Leerzeichen, Zeilenumbrüche) am Ende</td>
                        <td>
                            <code>'\n abc \n'.trimEnd()</code>
                            <br/>
                            <code>'\n abc \n'.trimRight()</code>
                        </td>
                        <td>' \n abc'</td>
                    </tr>
                    <tr>
                        <td>trimStart, trimLeft<footnote>ab ECMAScript 2019</footnote></td>
                        <td>Entfernt Whitespace (Leerzeichen, Zeilenumbrüche) am Anfang</td>
                        <td>
                            <code>'\n abc \n'.trimStart()</code>
                            <br/>
                            <code>'\n abc \n'.trimLeft()</code>
                        </td>
                        <td>'abc \n'</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Vervollständigen Sie folgende Tabelle:</p>
                        <table width="100%">
                            <tbody>
                                <tr>
                                    <th>Ausdruck</th>
                                    <th>Rückgabewert</th>
                                </tr>
                                <tr>
                                    <td>'Hello Goldy'.includes('old' + 'y')</td>
                                    <td><blank>true</blank></td>
                                </tr>
                                <tr>
                                    <td>'Hello Goldy'.substr(0,1).toLowerCase()</td>
                                    <td>'<blank>h</blank>'</td>
                                </tr>
                                <tr>
                                    <td>'Hello Goldy'.charAt(1).repeat(3)</td>
                                    <td>'<blank>eee</blank>'</td>
                                </tr>
                                <tr>
                                    <td>'Hello Goldy'.lastIndexOf('l')</td>
                                    <td><blank>8</blank></td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Vervollständigen Sie folgende Tabelle:</p>
                        <table width="100%">
                            <tbody>
                                <tr>
                                    <th>Ausdruck</th>
                                    <th>Rückgabewert</th>
                                </tr>
                                <tr>
                                    <td>'Ladislaus'.includes('ad' + '<blank><option>i</option><option>islau</option></blank>' + 's')</td>
                                    <td>true</td>
                                </tr>
                                <tr>
                                    <td>'Ladislaus'.substr(1,2).toUpperCase()</td>
                                    <td>'<blank>AD</blank>'</td>
                                </tr>
                                <tr>
                                    <td>'Ladislaus'.charAt(3).repeat(1)</td>
                                    <td>'<blank>i</blank>'</td>
                                </tr>
                            </tbody>
                        </table>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode>'this is a short text'.substr(4, 5).trim().length</blockcode>
                    </question_text>
                    <answer correct="correct"><blank>4</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert des folgenden Ausdrucks:</p>
                        <blockcode>'some string'.substr(3, 2).length</blockcode>
                    </question_text>
                    <answer><blank>2</blank></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'Hello Goldy'.includes('old' + 'y')</code></p>
                    </question_text>
                    <answer correct="correct">true</answer>
                    <answer>false</answer>
                    <answer>7</answer>
                    <answer>8</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'Hello Goldy'.substr(0,1).toLowerCase()</code></p>
                    </question_text>
                    <answer>'hello Goldy'</answer>
                    <answer>'hello goldy'</answer>
                    <answer correct="correct">'h'</answer>
                    <answer>'H'</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'Hello Goldy'.substr(0,1).toUpperCase()</code></p>
                    </question_text>
                    <answer>'Hello Goldy'</answer>
                    <answer>'HELLO GOLDY'</answer>
                    <answer correct="correct">H</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'Hello Goldy'.charAt(1).repeat(3)</code></p>
                    </question_text>
                    <answer correct="correct">'eee'</answer>
                    <answer>'HHH'</answer>
                    <answer>111</answer>
                    <answer>true</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'Hello Goldy'.lastIndexOf('l')</code></p>
                    </question_text>
                    <answer correct="correct">8</answer>
                    <answer>2</answer>
                    <answer>3</answer>
                    <answer>-1</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welchen Rückgabewert liefert folgender Ausdruck?</p>
                        <p><code>'this is a short text'.substr(4, 5).trim().length</code></p>
                    </question_text>
                    <answer correct="correct">4</answer>
                    <answer>5</answer>
                    <answer>this</answer>
                    <answer>is a</answer>
                    <answer>keinen, es wird eine Fehlerausschrift erzeugt.</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Wenn sie doch endlich mal jemand finden könnte&#8230; die Nadel im Heuhaufen&#8230;</name>
                <content>
                    <p>Die meisten Menschen verwenden die Redewendung nur symbolisch. Sie heute aber nicht, denn Sie erhalten von uns den Auftrag, die Nadel wirklich zu finden!</p>
                    <figure>
                        <img src="images/photos/haystack.jpg"/>
                        <figcaption>Foto: <a href="https://www.flickr.com/people/52336371@N07/">Jannis_V</a>, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC Attribution, ShareAlike</a></figcaption>
                    </figure>
                    <p>Natürlich wollen wir Sie nicht wirklich im Heu wühlen lassen. Stattdessen erhalten Sie von uns einen sauberen heulosen String. Das ist vermutlich auch angenehmer, falls Sie an Heuschnupfen leiden:</p>
                    <blockcode>Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Nadel Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen Heuhaufen</blockcode>
                    <p>Finden Sie nun heraus, an welcher Position sich die Nadel befindet und loggen Sie diese Position in die Konsole.</p>
                    <p>Übrigens: Zählen gilt nicht!</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/needle.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Wertgeschätzte Nullen, Teil 1</name>
                <content>
                    <p>NerdWorld hat vor einiger Zeit sein Artikelnummer-Konzept geändert. Die neuen
                        Artikelnummern beginnen stets mit einer 0 &#x2014; z.&#x202F;B. 0123. Leider
                        gibt es bei den alten Nummern viele, die nicht über eine führenden 0
                        verfügen. Sie können aber auch nicht einfach pauschal eine 0 ergänzen, da
                        manche der alten Nummern bereits mit einer 0 beginnen. In dem Fall soll
                        keine weitere 0 vorangestellt werden. Ergänzen Sie das folgende
                        Programmfragment, so dass es für jede Belegung der Variable
                        <code>itemNumber</code> (Artikelnummer) die richtige Nummer im neuen Konzept
                        ausgibt. Verwenden Sie dazu den ternären Operator!</p>
                    <blockcode numbered="numbered">let itemNumber = '123';
let correctedItemNumber = &#8230;;

console.log(correctedItemNumber);</blockcode>
                    <h3>Beispiele</h3>
                    <ul>
                        <li>123 =&gt; 0123</li>
                        <li>7 =&gt; 07</li>
                        <li>07 =&gt; 07</li>
                        <li>007 =&gt; 007</li>
                    </ul>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/12/solutions/zeroes.js"/>
                </answer>
            </exercise>
        </lesson>
          <lesson id="Regex">
            <lesson_name>Regex - <?oxy_comment_start author="niclaskahlmeier" timestamp="20201126T154957+0100" comment="@Stefan Lektorat gesamte Funktion"?>reguläre<?oxy_comment_end?> Ausdrücke</lesson_name>
              <topics>
                  <li>was reguläre Ausdrücke sind</li>
                  <li>und wie Sie mit ihnen immer das finden, was Sie suchen.</li>
                  <li>wie Sie reguläre Ausdrücke in JavaScript verwenden.</li>
              </topics>
            <p>Der Begriff regulärer Ausdruck ist in dieser Class schon einige Male vorgekommen. In späteren Classes werden diese eine deutlich größere Rolle spielen. Damit Sie ein tiefergehendes Verständis für reguläre Ausdrücke entwickeln, werden Sie diese von Grund auf kennenlernen. </p>
            <h1>Was sind reguläre Ausdrücke? </h1>
            <p><i>"Ein regulärer Ausdruck ist eine Gruppe von Buchstaben und Symbolen, die benutzt
                    werden um ein bestimmtes Muster in einem Text zu finden. Ein regulärer Ausdruch
                    ist ein Muster, das mit einem zu durchsuchenden Text von links nach rechts
                    abgeglichen wird. Die Bezeichnung "Regulärer Ausdruck" ist in der Praxis
                    unüblich und stattdessen wird häufig die Englische Abkürzung "Regex" oder
                    "RegExp" (regular expression) verwendet. Reguläre Ausdrücke werden verwendet, um
                    Fragemente eines Textes zu ersetzen, Formulare zu validieren, Segmente eines
                    Textes anhand eines Musters zu extrahieren und für vieles mehr."</i></p>
            <p>Nehmen wir mal das fiktive Beispiel, dass wir in unserer Anwendung validieren möchten, welchen Benutzernamen ein neuer Benutzer wählen kann. Hierzu möchten wir ein paar Regeln definieren, damit der Name gut lesbar bleibt. Wir möchten Kleinbuchstaben, Ziffern, Unter- und Bindestriche erlauben. Weiterhin muss der Nutzername mindestens 6, maximal jedoch 16 Zeichen lang sein. Der reguläre Ausdruck der diese Anforderungen abbildet sieht wie folgt aus:</p>
            <blockcode>^[a-z0-9_-]{6,16}$</blockcode>
            <p>Sie werden jetzt vielleicht denken - <i>Hilfe was ist das?</i> Keine Sorge, bei den regulären Ausdrücken gibt es ein paar Zeichen, deren Bedeutung sie wissen müssen. Dann ist das Ganze schon gar nicht mehr so schwer. Schauen wir uns doch mal ein paar Benutzernamen an, die wir validieren wollen. </p>
            <ul>
                <li><i>javascript</i> - match</li>
                <li><i>java</i></li>
                <li><i>Javascript</i></li>
                <li><i >java_script-123</i> - match</li>
                <li><i >es6-code-macht-spaß</i></li>
                <li><i >123456789</i> - match </li>
                <li><i >java@script</i></li>
            </ul>
            <p>Drei von acht Benutzernamen erfüllen unsere Anforderungen. <i>java</i> ist zu kurz.
                Da reguläre Ausdrucke case sensitive sind und im regulären Ausdruck nur die kleinen
                Buchstaben von a bis z definiert sind, fällt <i>Javascript</i> ebenfalls heraus.
                    <i>es6-code-macht-spaß</i> ist länger als 16 Zeichen. <i>java@script</i>
                verwendet unerlaubte Sonderzeichen. Sie wissen jetzt, dass dieser reguläre Ausdruck
                unsere Anforderungen erfüllt. Jetzt schlüsseln wir den Ausdruck mal auf. Hierbei
                kann ich nur grafische Ansichten empfehlen. Mein absoluter Favorit ist die Seite <a
                    href="https://ihateregex.io/playground/">ihateregex.io</a>. Hier können Sie
                einen regulären Ausdruck angeben und erhalten dessen Verhaltensweise grafisch
                ausgegeben. Für unseren Ausdruck sieht das ganze wie folgt aus: </p>
            <figure width="100%">
                <img src="images/regex/regex01.png"/>
            </figure>
            <p>Wir sehen den Start des Ausdrucks. Anschließend folgt eine sogenannte Zeichenklasse.
                Diese validiert, dass ein Zeichen Teil der definierten Menge ist. Diese Zeichenkette
                muss dann fünf bis fünfzehn Mal wiederholt werden. Dann endet die Zeile bzw. unser
                Ausdruck.</p>
            <p>Allgemein können wir sagen, dass ein regulärer Ausdruck ein Muster von Zeichen ist, welches für eine Textsuche verwendet wird. Die einfachste Form der regulären Ausdrücke ist entsprechend eine Zeichenkette. Der Ausdruck <i>es6</i> ist valide und sucht in einer angegebenen Zeichenkette nach Übereinstimmung. Dabei wird jedes Zeichen des regulären Ausdrucks mit jedem Zeichen der gegebenen Zeichenkette verglichen. Er bedeutet so viel wie <i><b>e</b></i> gefolgt von <i><b>s</b></i> gefolgt von <i><b>6</b></i>. In der Zeichenkette "Javascript ist super doch ab <b>es6</b> wunderbar" erhalten wir die markierte Übereinstimmung. </p>
            <hint>
                <p>reguläre Ausdrücke berücksichtigen die Groß- und Kleinschreibung. </p>
            </hint>
            <h1>Metazeichen</h1>
            <p>Damit das Konstrukt zum Prüfen des Benutzernamens zustande kommt, benötigen wir die
                sogenannten Metazeichen. Diese sind die Bausteine von regulären Ausdrücken. Sie
                werden nicht für sich selbst genommen, sondern haben besondere Bedeutung. Eines
                dieser Metazeichen ist das <i>$</i>. Wenn Sie jedoch ein $ in einer Zeichenkette
                validieren möchten, soll das $ nicht besonders interpretiert werden. Aus diesem
                Grund können die Metazeichen jederzeit mit einem Backslash escaped werden. </p>
            <ul>
                <li><b>.</b> Der Punkt steht für jedes beliebige Zeichen, außer Zeilenumbrüchen. <i>.ree</i> => <b>tree</b> t<b>hree</b>
                    <b>tree</b>house</li>
                <li><b>[]</b> Zeichenklasse oder auch Zeichenmenge. Die Menge entspricht jedem Zeichen innerhalb der eckigen Klammern. Um eine Folge von Zeichen zu definieren, kann ein Bindestrich verwendet werden. Die Reihenfolge der Zeichen innerhalb der Zeichenklasse spielt keine Rolle. Achtung, ein Punkt in einer Zeichenkette entspricht einem wörtlichen Punkt und wird nicht als Metazeichen interpretiert. [Ee]s6 => <b>es6</b>
                    <b>Es6</b> ES6</li>
                <li><b>[^]</b> Negierte Zeichenklasse, entspricht jedem Zeichen welches nicht innerhalb der eckigen Klammern definiert ist. Für diese Negierung sorgt das sogenannte carot symbol <b>^</b>. <i>[^t]ree</i> => tree t<b>hree</b> treehouse</li>
                <li>
                    <b>Wiederholungen - Quantifizierer</b><ul>
                        <li><b>*</b> Entspricht 0 oder mehr Wiederholungen des vorhergehenden Teilausdrucks. Es sind beliebig viele Wiederholungen möglich. Der Stern kann auch nach einer Zeichenklasse stehen. In diesem Fall, können alle Zeichen der Menge der Zeichenklasse beleibieg oft Wiederholt werden. <i>[0-9]*</i> => <b>23454324</b>
                            <b>0176</b>DE<b>343</b> DE<b>3</b>AE</li>
                        <li><b>+</b> Entspricht 1 oder mehr Wiederholungen des vorhergehenden Teilausdrucks. Es sind wie beim * Symbol beliebig viele Wiederholungen möglich. <i>d.+d</i> => dd <b>d d</b>
                            <b>dad</b> it is ba<b>d if you are bad</b> to be honest</li>
                        <li><b>?</b> Macht den vorhergehenden Teilausdruck optional. <i>[D]?as</i> => <b>Das</b> Schiff fährt im W<b>as</b>ser. <i>[D]as</i> => <b>Das</b> Schiff fährt im Wasser. </li>
                        <li><b>{n,m}</b> Die geschweiften Klammern geben an, wie oft ein Teilausdruck minimal und maximal hintereinander übereinstimmen muss. Entspricht mindestens "n", aber nicht mehr als "m" Wiederholungen des vorhergehenden Teilausdrucks. Die zweite Zahl, also m , kann weg gelassen werden. Damit ist nur die minimale Anzahl an Wiederholungen angegeben werden und die maximale Anzahl offen. Wird auch das Komma weg gelassen, müssen genau so viele Teilausdrücke hintereinander übereinstimmen wie durch n definiert. <ul>
                                <li><i>[0-9]{2,3}</i> => Die Nummer 9.<b>999</b>7 runden wir zu <b>10</b>.0 auf.</li>
                                <li><i>[0-9]{2,}</i> => Die Nummer 9.<b>9997</b> runden wir zu <b>10</b>.0 auf. </li>
                                <li><i>[0-9]{3}</i> => Die Nummer 9.<b>999</b>7 runden wir zu 10.0 auf. </li>
                            </ul></li>
                    </ul>
                </li>
                <li><b>(xyz)</b> Eine Gruppierung fasst eine Gruppe von Teilausdrücken in Klammern
                    zusammen. Die Gruppierung ist selbst ein Teilausdruck. Auf die Gruppierung
                    können, wie auf jeden Teilausdruck die Quantifizierer angewendet werden. Die
                    Gruppierung, entspricht den gruppierten Teilausdrücken in der exakten
                    Reihenfolge. <i>DE([0-9]{2} [0-9]{5})</i> => <b>DE60 12345 </b>DE6012345 <b>DE60
                        12345</b>6 60 12345</li>
                <li><b>|</b> Eine Alternation dient dazu eine "Alternative" zu definieren. Der sogenannte Pipe Operator <b>|</b> lässt sich auch immer mit einem <b>Oder</b> ersetzen / übersetzen. Dadurch können beliebige Teilausdrücke alterniert werden. Beispielsweise entweder der eine Teilausdruck oder der andere Teilausdruck. <i>[D|W]as</i> => <b>Das</b> Schiff fährt im <b>Was</b>ser.</li>
                <li><b>\</b> Der Backslash escaped das nachfolgende Zeichen. Dadurch wird die besondere Bedeutung der Metazeichen aufgehoben. Um ein Metazeichen als Literal zu verwenden, muss dieses Zeichen auf den Backslash folgen.  </li>
                <li>Anker<ul>
                        <li><b>^</b> Das Carret oder auch Zirkumflex stimmt mit dem Anfang der
                            Eingabe überein. Das Carret wird genutzt um zu uberprüfen, dass der
                            Teilausdruck mit dem Anfang der Zeichenkette übereinstimmt.</li>
                        <li><b>$</b> Das Dollar stimmt mit dem Ende der Eingabe überein.</li>
                    </ul></li>
            </ul>
            <p>Sehr
                interessant ist, dass sich die Gruppierung eine sogenannte Rückwärtsreferenz
                merkt. Diese Rückwärtsreferenz merkt sich die mit der Zeichenkette
                übereinstimmenden Zeichen der Gruppe. Diese Rückwärtsreferenz kann man quasi
                deaktivieren. Dadurch zeigt die Gruppierung zwar die übereinstimmenden
                Zeichen mit der Zeichenkette an, speichert diese jedoch nicht für eine
                spätere Verwendung. Um die Rückwärtsreferenz zu deaktivieren schreibt man
                ein Fragezeichen gefolgt von einem Doppelpunkt gefolgt vom Teilausdruck. <i
                    >(?:[0-9]{2})</i>
            </p>
            <p><b>Beispiel:</b> Wir haben die folgende URL gegeben:
                <i>https://www.webmasters-fernakademie.de/unser-kursnet-angebot</i>. Unsere
                Aufgabe besteht nun darin, den Pfad <i>/unser-kursnet-angebot</i> in
                <i>/die-weltbesten-kurse</i> zu ändern. <br/>Dazu gehen wir wie folgt vor:</p>
            <blockcode>let url = 'https://www.webmasters-fernakademie.de/unser-kursnet-angebot'

let splittedUrl = url.match('(https?)(://)([^/\r\n]+)(/[^\r\n]*)?')

splittedUrl[4] = '/die-weltbesten-kurse'

splittedUrl.shift()

url = splittedUrl.join('')</blockcode>
            <p>Im gegebenen Code ist einiges passiert. Mit dem regulären Ausdruck aus Zeile 2
                <code>(https?)(://)([^/\r\n]+)(/[^\r\n]*)?</code> überprüfen wir, ob der String
                in der Variable <i >url</i> der gewünschten
                Form, einer URL, entspricht. Der Rückgabewert ist ein Array. An Index 0 des
                Arrays steht der überprüfte String
                <code>splittedUrl[0] 'https://www.webmasters-fernakademie.de/unser-kursnet-angebot'</code>.
                Index 1 gehört der ersten definierten Gruppe, das war <code>(https?)</code> also
                gilt <code>splittedUrl[1] 'https'</code>. An Index 2 finden wir den Teilstring,
                welcher der zweiten Gruppe <code>(://)</code> entspricht;
                <code>splittedUrl[2] '://'</code>. Analog geht es mit Index 3 und 4. Die Gruppe
                <code>([^/\r\n]+)</code> entspricht
                <code>splittedUrl[3] 'www.webmasters-fernakademie.de'</code> und die Gruppe
                <code>(/[^\r\n]*)?</code> entspricht
                <code>splittedUrl[4] // '/unser-kursnet-angebot'</code>. </p><p>In Zeile 3 wird
                    dann der Pfad der URL wie gewünscht geändert. Anschließend der erste Eintrag des
                    Arrays verworfen, da dort lediglich der alte String abgelegt ist. Zu guter letzt
                    wird das verbleibende Array wieder zu einem String, unserer neuen URL,
                    zusammengesetzt und die ursprüngliche URL überschrieben.</p>
            <hint>
                <p>Jetzt wo wir Kenntnis über die Syntax von Regex haben können wir den regulären
                    Ausdruck zur Validierung des Benutzernamens ins Deutsche übersetzen. Versuchen
                    Sie mal selbst, des Rätsels Lösung zu finden. Der reguläre Ausdruck lautete:
                    <code>^[a-z0-9_-]{6,16}$</code></p>
                <p>Hier ist Schritt für Schritt meine Übersetzung: </p>
                <ul>
                    <li>Anfang der Zeile - <b>^</b></li>
                    <li>Beginn der Zeichenklasse - <b>[</b></li>
                    <li>Enthaltene Zeichen der Zeichenklasse - <b>{a-z,0-9,-,_}</b></li>
                    <li>Ende der Zeichenklasse - <b>]</b></li>
                    <li>Mindestens 5, aber nicht mehr als 15 Wiederholungen des vorhergehenden Teilausdrucks. In diesem Fall der Zeichenklasse. - <b>{6,16}</b></li>
                    <li>Ende der Eingabe - <b>$</b></li>
                </ul>
            </hint>
            <h2>definierte Zeichenklassen</h2>
            <p>Wir sind faul. Deshalb haben wir Programmierer echt keine Lust in den Zeichenklassen
                jedes Mal so etwas wie a-zA-Z0-9 zu schreiben. Für die geläufigsten Zeichenklassen
                gibt es fertige Definitionen. Diese funktionieren wie Shortcuts. Die definierten
                Zeichenklassen lassen sich natürlich auch negieren. Die Negation kann entweder von
                Hand durch den Carrot Operator vorgenommen werden oder durch einen Großbuchstaben
                des Shortcuts. </p>
            <ul>
                <li>Shortcut: <b>\w</b> alle alphanumerischen Zeichen <i>[a-zA-Z0-9_]</i> Negation: <b>\W</b></li>
                <li>Shortcut: <b>\d</b> alle Ziffern <i>[0-9]</i> Negation: <b>\D</b></li>
                <li>Shortcut: <b>\s</b> alle Leerräume <i>[\t\n\f\r\p{Z}]</i> Negation: <b>\S</b></li>
            </ul>
            <p>Ein kleines Beispiel. Wir wollen alle alphanumerischen Zeichen einer Zeichenkette validieren. regulärer Ausdruck: <i>^\w{1,}</i> => <b>lorem</b>$ipsum <b>ipsum_ipsum</b>$</p>
            <h2>Modifikatoren</h2>
            <p>Die Modifikatoren modifizieren, wie der Name schon sagt, die Ausgabe eines regulären Ausdrucks. Die Modifikatioren sind zum Beispiel dafür da, dass ein Ausdruck nicht mehr Case Sensitive ist. </p>
            <ul>
                <li>g - global match - Der g Modifikator wird verwendet, damit die Suche durch die gesamte Eingabe stattfindet und nicht nach dem ersten Treffer aufhört. Wird der Modifikator nicht verwendet, bricht die Suche nach dem ersten Treffer ab. <i>"/o|m|e/"</i> => L<b>o</b>rem ipsum  <i>"/o|m|e/g"</i> => L<b>o</b>r<b>e</b><b>m</b> ipsu<b>m</b></li>
                <li>i - ignore case - Der i Modifikator wird verwendet, damit Unterschiede bei Groß- und Kleinschreibung in den Zeichenketten ignoriert werden. <i>"/Hallo/gi"</i> => <b>Hallo</b><b>HALLO</b>
                    <b>hallo</b>
                    <b>hAlLo</b></li>
                <li>m - multiline - Der m Modifikator ermöglicht eine Suche über mehrere Zeilen. Die Anker-Metazeichen funktionieren um festzulegen, ob der reguläre Ausdruck dem Anfang/Ende der Eingabe entspricht.</li>
                <li>s - dotAll - Ein Punkt matched einer neuen Zeile</li>
                <li>u - unicode - Behandelt eine Zeichenkette als Unicode Code</li>
                <li>y - sticky - stimmt nur mit dem Index überein, der durch die lastIndex-Eigenschaft dieses regulären Ausdrucks angegeben wird</li>
            </ul>
           <h2>Lookahead, Lookbehind, Lookaround - Look bitte was? </h2>
            <p>Die Lookarounds sind besondere Gruppierungen ohne Rückwärtsreferenz. Die Besonderheit zu "normalen" Gruppierungen mit Rückwärtsreferenz ist, dass wir Muster erfassen wollen, denen andere Muster vorhergehen oder Folgen. Es lässt sich also eine Abhängigkeit zu anderen Mustern herstellen. Angenommen wir haben einen langen Text und wollen den Anfang jeder enthaltenen deutschen Telefonnummer herausfinden können wir die Lookarounds super dafür verwenden. <i >(?&lt;=\+49)[\d]*</i> => +49<b >123321123</b>
            </p>
            <p>Der reguläre Ausdruck definiert schaut nach eine Zahlenkette der der Teilausdruck <i >+49</i> vorhergeht.</p>
            <p>Um ein Lookaraound zu definieren wird eine Gruppe verwendet. Zu Beginn der Gruppe folgt dann der entsprechende Lookaround gefolgt vom Muster nach dem wir schauen wollen und eine Bedingung knüpfen. </p>
            <h3>Lookahead</h3>
            <p>Wenn wir alle Muster erhalten wollen, die von einem definierten Muster gefolgt sind, können wir Lookaheads verwenden. Wir können somit nach vorne schauen und überprüfen, was nach unserem eigentlichen Teilausdruck folgt. Das Ergebnis der Übereinstimmung ist nur unser Teilausdruck ohne dem Lookahead. Um zu definieren, dass nur die Telausdrücke gültig sind, die von einem weiteren Teilausdruck gefolgt sind, verwenden wir sogenannte positive Lookaheads. Ein positiver Lookahead wird mit <i >?=</i> definiert. Das Lookahead lässt sich auch negieren, sodass wir sagen jeder Teilausdruck der <b >nicht</b> von einem weiteren Teilausdruck gefolgt wird. Die Negation des positiven Lookaheads nennt man negativer Lookahead. Ein negativer Lookahead wird mit <i >?!</i> definiert.</p>
            <h3>Lookbehind</h3>
            <p>Im Beispiel mit den deutschen Telefonnummern habe ich einen sogenannten positiven
                Lookbehind verwendet. Ein positiver Lookbehind wird durch die Zeichen ?&lt;=
                definiert.
                <?oxy_comment_start author="Jonas" timestamp="20201126T150715+0100" comment="Mit dem positiven Lookbehinde erhalten wir alle Muster, die dem Lookbehinde folgen."?>Mit
                dem positiven Lookbehind erhalten wir alle Muster, denen ein definiertes Muster
                vorhergeht.<?oxy_comment_end?> Wir schauen also hinter uns. Dies lässt sich
                natürlich ebenfalls negieren. Um alle Muster zu erhalten denen ein definierts Muster
                    <b>nicht</b> vorhergeht, verwendet man einen sogenannten negativen Lookbehind.
                Der negative Lookbehind wird mit <i>&lt;?!</i> definiert.</p>
            <p><i >Programmiersprache(?=\.)</i> => Die Progammiersprache Javascript ist eine tolle <b >Programmiersprache</b>.</p>
            <p><i >Programmiersprache(?!\.)</i> => Die <b >Progammiersprache</b> Javascript ist eine tolle Programmiersprache.</p>
            <p><i >(?&lt;=Die\s)Programmiersprache</i> => Die <b >Progammiersprache</b> Javascript ist eine tolle Programmiersprache.</p>
            <p><i >(?&lt;!Die\s)Programmiersprache</i> => Die Progammiersprache Javascript ist eine tolle <b >Programmiersprache</b>.</p>
            <h2>greed &amp; lazy Match</h2>
            <p>Anders als wir Programmierer sind Regex nicht faul sondern sehr fleißig. Es wird bei
                einem regulären Ausdruck immer nach der längsten Übereinstimmung gesucht (greed).
                Wir können mit dem Fragezeichen ? festlegen, dass nach der kürzesten Übereinstimmung
                (lazy) gesucht werden soll. </p>
            <p>(.*che) => <b >Die Progammiersprache Javascript ist eine tolle Programmiersprache</b>.</p>
            <p>(.*?che) => <b >Die Progammiersprache</b> Javascript ist eine tolle Programmiersprache.</p>
            <h1>Reguläre Ausdrücke und JavaScript</h1>
            <p>Wir haben in den letzten Kapiteln erfahren, was reguläre Ausdrücke sind, wofür man
                sie benutzen kann und wie man diese bildet. Der nächste Schritt besteht nun darin,
                reguläre Ausdrücke auch in JavaScript zu verwenden. </p>
            <h3>Die Stringfunktion <code>match()</code></h3>
            <p>Wie verwendet man nun reguläre Ausdrücke in JavaScript? Für diesen Zweck gibt es die
                String-Funktion <code>match()</code>. Diese wird auf einem String aufgerufen, der
                reguläre Ausdruck wird als Parameter übergeben. Entspricht ein Teilstring oder gar
                der ganze String dem regulären Ausdruck, dann wird ein Array zurückgegeben.
                Ansonsten wird nichts (null) zurückgegeben. Für tiefgründigere Informationen kann
                ich nur einen Blick in die <a
                    href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/match"
                    >Dokumentation</a> der Funktion empfehlen. </p>
            <p>Genug der trockenen Theorie. Es soll nun sichergestellt werden, dass keine
                Sonderzeichen in einem String vorliegen. </p>
            <blockcode>console.log('JavaScript ist Cool'.match(/\W/g))
// [' ', ' ']</blockcode>
            <p>
               Es wird ein Array zurückgegeben, da der String zwei Leerzeichen enthält.
            </p>
            <blockcode>console.log('JavaScript'.match(/\W/g))
// null         </blockcode>
            <p>Nun wird <code>null</code> zurückgegeben, da der String <code>JavaScript</code> keine
                Sonderzeichen mehr enthält. </p>
            <p>Ist Ihnen etwas aufgefallen? Der reguläre Ausdruck ist von zwei <code>/</code> Slashs umgeben. Wenn Sie der Funktion <code>match()</code> einen regulären Ausdruck übergeben wollen, dann stehen Sie vor der Qual der Wahl. Sie können sich aussuchen, ob Sie einen regulären Ausdruck innerhalb von einfachen <code>'</code> oder doppelten <code>"</code> Anführungszeichen oder <code>/</code> Slashs übergeben. Wenn Sie jedoch Modifikatoren, wie <code>/g</code> für eine globale Suche verwenden möchten, müssen Sie die Schreibweise mit den <code>/</code> Slashs verwenden. Gewöhnen Sie sich also direkt die <code>/</code> Slashs an, das erspart Ihnen einiges an Nerven bei der Fehlersuche.</p>
            <h3>Die Stringfunktion <code>replace()</code></h3>
            <p>Nun wissen Sie also auch, wie man einen String mit einem regulären Ausdruck validieren kann. Auf Dauer wird das Überprüfen von Strings jedoch recht langweilig. Gehen wir also einen Schritt weiter! Ein weiteres Einsatzgebiet von regulären Ausdrücken ist das Ersetzen von Teilstrings. Stellen Sie sich vor, Sie haben einen ausführlichen Blog-Beitrag auf Ihrer Webseite geschrieben. Beim Korrekturlesen bemerken Sie jedoch, dass die des Öfteren die Anredeformen (Sie, Ihnen, ...) klein geschrieben haben. Es wäre nun ein sehr großer Zeitaufwand, wenn sie diese jedes mal händisch korrigieren müssten. An dieser Stelle sind reguläre Ausdrücke Ihre Rettung!</p>
            <p>Gehen wir das gerade erwähnte Beispiel an. JavaScript bietet nicht nur die Funktion
                <code>match()</code> im Zusammenhang mit regulären Ausdrücken. Ein weiterer
                hilfreicher Vertreter ist die Funktion <code>replace()</code>. Dieser kann man
                nämlich nicht nur einen String übergeben, welcher dann gesucht und ersetzt wird,
                sondern auch einen regulären Ausdruck. Der Vorteil des regulären Ausdrucks ist, dass
                nicht nur das erste Hervorkommnis des Ausdrucks, sondern Jedes ersetzt werden kann.
                Dazu muss man lediglich den Modifikator <i>g</i> an den regulären Ausdruck
                anhängen.</p>
            <blockcode>'use strict';

let sentance = 'Wie sie sehen, gibt es viele praktische Anwendungen, die sie für Ihre Website benutzen können.';

sentance = sentance.replace(/(sie)/, 'Sie');
// sentance => 'Wie Sie sehen, gibt es viele praktische Anwendungen, die sie für Ihre Website benutzen können.'

sentance = sentance.replace(/(sie)/g, 'Sie');
// sentance => 'Wie Sie sehen, gibt es viele praktische Anwendungen, die Sie für Ihre Website benutzen können.'</blockcode>
            <p>Wie Sie sehen können, wurde jedes <i>sie</i> durch ein <i>Sie</i> ersetzt. Aber gehen
                wir erstmal einen Schritt zurück. Wie genau funktioniert <code>replace()</code>? Die
                Funktion wird auf dem String aufgerufen, in dem sie etwas ersetzen soll. Als ersten
                Parameter bekommt die Funktion den regulären Ausdruck übergeben, durch welchen die
                zu ersetzenden Worte gesucht werden sollen. Der zweite Parameter ist dann das Wort,
                durch welches ersetzt wird. Zu guter Letzt wird dann der überarbeitete String
                zurückgegeben.</p>
            <h3>Die Stringfunktion <code>search()</code></h3>
            <p>Manchmal befindet man sich in der Situation, dass man ein bestimmtes Zeichen oder
                eine bestimmte Zeichenklasse in einem String finden möchte. Beispielsweise könnten
                Sie in einer Taschenrechneranwendung ein Eingabefeld haben, welches Ihnen Terme in
                der folgenden Form übergibt: <code>'2/5'</code>. Bei der Division ist natürlich zu
                beachten, dass nicht nurch Null geteilt werden darf. Sie müssen also in Ihrer Formel
                herausfinden, wo der Divisor steht. Auch hierfür bietet JavaScript eine Funktion,
                welche uns mit Hilfe von regulären Ausdrücken das Leben erleichtert. Die Rede ist
                von der Funktion <code>search()</code>.</p>
            <p>Die Funktion <code>search()</code> hat eine sehr simple Verwendung. Sie wird wieder
                auf einem String aufgerufen und bekommt als Parameter einen regulären Ausdruck.
                Anhand des regulären Ausdrucks wird dann ein Zeichen bzw. eine Zeichenkette gesucht
                und der Index im String zurückgegeben. In unserem Beispiel sieht das dann so
                aus:</p>
            <blockcode>'use strict';

const term = '2/5';

console.log(`Ihre Eingabe war ${term[term.search(/\//g) + 1] === 0 ? 'fehlerhaft.' : 'korrekt.'}`);
// 'Ihre Eingabe war korrekt.'</blockcode>
            <p>Die Funktion <code>search()</code> gibt uns den Index des Divisionszeichens zurück.
                Da wir das Zeichen dahinter haben möchten addieren wir Eins zum Index hinzu. Die
                Zahl die wir erhalten nutzen wir dann als Indexwert für den Zugriff auf den String.
                Wir erhalten die Zahl <code>5</code> und da diese ungleich der Zahl <code>0</code>
                ist wird <code>'korrekt.'</code> zurück gegeben.</p>
            <h3>Die Stringfunktion <code>matchAll()</code></h3>
            <p>Zu guter Letzt möchte ich Ihnen noch die Funktion <code>matchAll()</code> vorstellen.
                Im Vergleich zu den vorherigen Funktionen ist das Anwendungsfeld dieser Funktion ein
                wenig kleiner. Da <code>matchAll()</code> jedoch sehr mächtig ist, möchte ich Ihnen
                diese Funktion nicht vorenthalten.</p>
            <p>Im Grunde genommen ist <code>matchAll()</code> eine ausführlichere Variante von <code>match()</code>. <code>matchAll()</code> wird gleich, wie <code>match()</code> aufgerufen, liefert jedoch ein anderes Ergebnis. Wir erinnern uns, <code>match()</code> hat uns ein Array mit allen, zu unserem regulären Ausdruck passenden, (Teil-)Strings zurückgegeben. Die Funktion <code>matchAll()</code> leifert uns ein iteratives Objekt. In diesem Objekt ist für jeden übereinstimmenden String ein Array hinterlegt. Dieses Array hingegen besteht nun aus dem übereinstimmenden Gesamtstring, sowie den Zeichen, welche zu den einzelnen Gruppen des regulären Ausdrucks passen. Das klingt im ersten Moment vielleicht kompliziert, ist es aber nicht. Um Sie zu überzeugen folgt nun ein Beispiel.</p>
            <p>Zugegeben ein wenig weit hergeholt aber gehen wir einmal davon aus, Sie wollen
                Strings anhand folgendem regulären Ausdruck überprüfen
                <code>/(Haus)(vom)(Nicolaus|Weihnachtsmann)/g</code>. Zufälligerweise liegt Ihnen
                auch ein passender String vor <code>HausvomNicolaus, HausvomWeihnachtsmann</code>.
                Im Zusammenhang mit <code>matchAll()</code> sieht der Code und das Ergebnis dann so
                aus:</p>
            <blockcode>'use strict';

let word = 'HausvomNicolaus, HausvomWeihnachtsmann';

console.log(Array.from(word.matchAll(/(Haus)(vom)(Nicolaus|Weihnachtsmann)/g)));
/*  [
*     ["HausvomNicolaus", "Haus", "vom", "Nicolaus", index: 0, input: "HausvomNicolaus, HausvomWeihnachtsmann", groups: undefined],
*     ["HausvomWeihnachtsmann", "Haus", "vom", "Weihnachtsmann", index: 17, input: "HausvomNicolaus, HausvomWeihnachtsmann", groups: undefined]
*  ]
*/          </blockcode>
            <p>Gehen wir den Code einmal Schritt für Schritt durch. Zuerst haben wir den gegebenen String <code>'HausvomNicolaus, HausvomWeihnachtsmann'</code> in der Variable <code>word</code> hinterlegt. Daraufhin kommen wir schon zum Aufruf der Funktion <code>matchAll()</code>. Innerhalb des <code>console.log()</code> geht einiges vor sich. Die Funktion <code>matchAll()</code> bekommt den Oben genannten regulären Ausdruck übergeben. Hierbei müssen Sie zwangsläufig das Arrtibut <code>/g</code> übergeben. Fehlt dieses Attribut, so bricht das Programm mit einer Fehlermeldung ab. <code>matchAll()</code> liefert uns, wie oben beschrieben, ein iteratives Objekt zurück. Auf Grundlage des iterativen Objektes haben wir dann ein Array erstellt - <code>Array.from()</code>. Diese Vorgehensweise ist notwendig, damit wir später mit dem Ergebnis der Funktion <code>matchAll()</code> arbeiten können. Wenn Sie sich nun das Ergebnis angucken, dann sehen Sie ein zweidimensionales Array. Das liegt daran, dass <code>matchAll()</code>, wie Anfangs erwähnt, innerhalb des iterativen Objektes selbst wieder Arrays ablegt.</p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Strings entsprechen dem regulären Ausdruck?</p>
                        <blockcode>^[a-z][\w]*@[\w]+.[a-z]+$</blockcode>
                    </question_text>
                    <answer>
                        <p>max.mustermann@mail.com</p>
                    </answer>
                    <answer correct="correct">
                        <p>maxmustermann@mail.com</p>
                    </answer>
                    <answer>
                        <p>max-mustermann@mail.com</p>
                    </answer>
                    <answer correct="correct">
                        <p>max23mustermann@mail12.com</p>
                    </answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Welche der folgenden Strings entsprechen dem regulären Ausdruck?</p>
                        <blockcode>/[a-z0-9]{3,}/g</blockcode>
                    </question_text>
                    <answer correct="correct">
                        <p>javascript</p>
                    </answer>
                    <answer>
                        <p>ES6</p>
                    </answer>
                    <answer>
                        <p>JAVASCRIPT</p>
                    </answer>
                    <answer >
                        <p>JavaScript</p>
                    </answer>
                </question>
                <question type="fill_in_the_blanks" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Ergänzen Sie den folgenden regulären Ausdruck, sodass nur Nutzernamen gültig sind, welche aus Kleinbuchstaben und
                            Sonderzeichen außer dem <code>#</code> bestehen. Zudem sollen nur Nutzernamen mit einer Mindestlänge von 5 Zeichen akzeptiert werden.</p>
                        <blockcode>[ #\d - ]{  }</blockcode>
                        <p><code>[</code><blank>^</blank><code>#\d</code><blank>A</blank><code>-</code><blank>Z</blank><code>]{</code><blank>5,</blank><code>}</code></p>
                    </question_text>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Passwortprüfer</name>
                <content>
                    <p>Schreiben Sie einen Passwortprüfer. Der Nutzer soll aufgefordert werden ein Passwort einzugeben. Das eingegebene Passwort soll dann durch einen regulären Ausdruck überprüft werden. Zuletzt soll der Nutzer darauf hingewiesen werden, ob sein Passwort den Anforderungen entspricht oder nicht. Das Passwort muss mindestens ein Zeichen aus jeder Gruppen enthalten: </p>
                    <ul>
                        <li>Zahlen </li>
                        <li>Kleinbuchstaben </li>
                        <li>Großbuchstaben </li>
                        <li>Sonderzeichen: $, @, %, ! </li>
                        <li>4 - 20 Zeichen</li>
                    </ul>
                    <p>
                       Alle anderen Zeichen sind untersagt.
                    </p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/27/solutions/pwd_check.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Unternehmensrebranding</name>
                <content>
                    <p>Im Zuge der Neustrukturierung Ihres Unternehmes möchten Sie den derzeiten Domainnamen von <i>1,2,3 Schmidt</i> auf <i>hansonline</i> ändern. Die Domain lautet <i>www.123schmidt.de</i>. Sie müssen jedoch die vollständige URL mit Protokol und Pfad berücksichtigen. Die beiden zu ändernden URLs lauten: <code>https://www.123schmidt.de/shop</code> und <code>https://www.123schmidt.de/bewertungen</code>. Die neuen URLs sollen <code>https://www.hansonline.de/shop</code> und <code>https://www.hansonline.de/bewertungen</code> heißen. Da sie die URLs in langen Texten mehrfach verwenden, haben Sie keine Lust jede URL von and anzupassen. Reguläre Ausdrücke sind Ihre Rettung.  </p>
                    <p>Nutzen Sie die Ihnen bekannten Stringfunktionen im Zusammenhang mit regulären Ausdrücken, um die Domainnamen umzubennnen.</p>
                    <p>Sie erhalten die URLs bereits in einer gleichnamigen Variable. In dieser soll sich die aktualisierten URLs auch wieder befinden. </p>
                    <blockcode src="accompanying_files/27/exercises/url.js"/>
                </content>
                <answer>
                    <blockcode src="accompanying_files/27/solutions/url.js"/>
                </answer>
            </exercise>

        </lesson>
        <lesson id="functions">
            <lesson_name>Und jetzt mal bitte mit Funktion!</lesson_name>
            <topics>
                <li>was Funktionen sind.</li>
                <li>wie Sie selbst Funktionen schreiben können.</li>
            </topics>
            <h1>A function is a function is a function</h1>
            <hint src="images/hint/bjoern.png">
                <p>Ich glaube unsere neuen Rabatte könnten auch ein toller Kaufanreiz für viele unserer Stammkunden sein. Aber es sieht so aus, als hätten viele noch nichts davon mitbekommen. Könnten Sie vielleicht einen personalisierten Newsletter rausschicken, der die Kunden auf den neuen Rabatt aufmerksam macht? Die Personalisierung ist uns dabei sehr wichtig! Wir möchten jeden individuell mit Vornamen ansprechen. Können Sie das?</p>
            </hint>
            <p>Klar können Sie das!</p>
            <p>Damit Sie nicht jeden Text einzeln kopieren und den Namen manuell anpassen müssen, bietet es sich an, eine <keyword>Funktion</keyword> selbst zu definieren.</p>
            <p>Funktionen kennen Sie bereits. Sie haben schon oft vordefinierte Funktionen verwendet &#x2014; Funktionen wie <code>prompt</code> oder <code>Number</code>. Eine vordefinierte Funktion besteht &#187;unter der Haube&#171; aus vielen Einzelanweisungen und ist meist nicht in JS geschrieben. Funktionen sind Bestandteil der JS-Engine oder der Umgebung (z.&#x202F;B. eines Browsers) und sind deswegen oft in C, C++ oder Java implementiert. Solche Funktionen werden als <keyword>native</keyword> (&#187;einheimisch&#171;) oder <keyword>built-in</keyword> (eingebaut) bezeichnet.</p>
            <p>Sie werden jetzt Ihre eigenen Funktionen definieren &#x2014; keine Angst, Sie müssen dafür kein C++ lernen, mit JS ist das einfach. Eine sogenannte <keyword>Funktionsdefinition</keyword> &#x2014; hier in Form eines <keyword>Funktionsausdrucks</keyword> (<keyword>function expression</keyword>) &#x2014; besteht aus</p>
            <ul>
                <li><keyword>Parametern</keyword> in runden Klammern <code>()</code>,</li>
                <li>einem Pfeil <code>=&gt;</code> und</li>
                <li>einem <keyword>Rumpf</keyword> in geschweiften Klammern <code>{}</code>.</li>
            </ul>
            <blockcode>() =&gt; {
  ...
};            </blockcode>
            <p>Da Sie zunächst noch keine Parameter benötigen, bleiben die runden Klammern vorerst leer. Im Rumpf &#x2014; auch <keyword>Codeblock</keyword> (oder einfach nur <keyword>Block</keyword>) &#x2014; können Sie beliebige Anweisungen notieren.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered">() =&gt; {
  console.log('Dear Customer,\n');
  console.log(`We're pleased to inform you that NerdWorld is making a number of new discounts available to you. Please visit http://www.nerdworld.example/discounts for detailed information.`);
  console.log('Happy nerding,\nYour NerdWorld Team');
};</blockcode>
            <p>Um eine Funktion ansprechen zu können, ist es meist sinnvoll, sie an einen Namen zu binden &#x2014; mit <code>let</code> oder <code>const</code>. Der Name der Funktion sollte ihre Aufgabe klar herausstellen.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered">let showNewsletter = () =&gt; {
  console.log('Dear Customer,\n');
  console.log(`We're pleased to inform you that NerdWorld is making a number of new discounts available to you. Please visit http://www.nerdworld.example/discounts for detailed information.`);
  console.log('Happy nerding,\nYour NerdWorld Team');
};</blockcode>
            <p>Da die Definition der Form <code>() =&gt; {}</code> ein Ausdruck ist, der eine Funktion zurückgibt (den Sie dann anschließend mit der Variable referenzieren), wird diese Form der Funktionsdefinition auch als <keyword>function expression</keyword> (dt.: <keyword>Funktionsausdruck</keyword>) bezeichnet. Die Schreibweise mit dem <code>=&gt;</code>-Zeichen hat dieser Form der Funktionsdefinition auch den Namen <keyword>arrow function</keyword> (Pfeilfunktion) oder <keyword>fat arrow function</keyword> eingebracht.</p>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>&#187;Also früher, da mussten wir noch &#8230;&#171;</h3>
                <p>In der Praxis finden Sie oft Funktionen vor, die die alte Syntax aus ES5 (und früher) verwenden:</p>
                <blockcode>function showNewsletter() {
  ...
}                </blockcode>
                <p>Die klassische Funktionsschreibweise ist immer noch gebräuchlich und kann in manchen Situationen sogar vorteilhaft sein. Sie kann aber auch schnell zu unverständlichem Code führen, da sie sogenanntes <i>hoisting</i> und <i>dynamisches this</i> verwendet. Wir empfehlen im Normalfall immer die <i>arrow function</i>-Schreibweise zu verwenden.</p>
                <p>Auch die &#187;alten&#171; Funktionen lassen sich als <keyword>function expression</keyword> an eine Variable binden:</p>
                <blockcode>var showNewsletter = function() {
  ...
};</blockcode>
            </hint>
            <p>Tatsächlich würden die Namen für den Newsletter in der Praxis z.&#x202F;B. aus einer Datenbank kommen, und die Ausgabe würde nicht in der Konsole erfolgen, sondern per Mail-Client verschickt werden. Den Teil können Sie erst mal getrost ignorieren. Das ist eine andere Geschichte, die wir Ihnen ein anderes Mal erzählen werden :)</p>
            <h1>Let's function</h1>
            <p>Um eine selbst definierte Funktion zu verwenden, müssen Sie sie aufrufen. Der <keyword>Funktionsaufruf</keyword> einer selbst definierten Funktion unterscheidet sich nicht von dem einer nativen Funktion. Er besteht lediglich aus dem Bezeichner und den runden Klammern. Wie üblich schließt ein Semikolon die Anweisung ab.</p>
            <blockcode>showNewsletter();</blockcode>
            <p>Hier noch einmal im Ganzen:</p>
            <blockcode numbered="numbered" src="accompanying_files/13/examples/showNewsletter.js"/>
            <exercise>
                <name>In die Konsole geloggt, Teil 2</name>
                <content>
                    <step>Schreiben Sie eine Funktion, die Ihren Namen in der Konsole ausgibt.
                        <blockcode>let ... {
console.log(...);
};
...
                    </blockcode>
                    </step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/logged.js"/>
                </answer>
            </exercise>
            <h1>Hallo ${username},&#8230;</h1>
            <p>Ihnen fehlt nun nur noch die Personalisierung. Damit kommen wir zu den runden Klammern. Mit deren Hilfe können Sie einer Funktion einen sogenannten <keyword>Parameter</keyword> übergeben. Benennen Sie die Funktion noch in <code>showNewsletterFor</code> um, da sich das mit dem Parameter besser liest.</p>
            <blockcode numbered="numbered" src="accompanying_files/13/examples/showNewsletterFor.js"/>
            <p>Jedes Mal, wenn Sie die Funktion <code>showNewsletterFor</code> aufrufen, gibt die
                Konsole die personalisierte Fassung der E-Mail aus.</p>
            <blockcode>Hello Heribert,

We're pleased to inform you that NerdWorld is making a number of new discounts available to you. Please visit http://www.nerdworld.example/discounts for detailed information.

Happy nerding,
- your NerdWorld Team


Hello Ladislaus,

We're pleased to inform you that NerdWorld is making a number of new discounts available to you. Please visit http://www.nerdworld.example/discounts for detailed information.

Happy nerding,
- your NerdWorld Team


Hello Goldy,

We're pleased to inform you that NerdWorld is making a number of new discounts available to you. Please visit http://www.nerdworld.example/discounts for detailed information.

Happy nerding,
- your NerdWorld Team            </blockcode>
            <p>Betrachten Sie den ersten Aufruf: Die Funktion nimmt den Namen <code>Heribert</code>
                und setzt ihn an jeder Stelle ein, an der sie die Variable <code>${username}</code>
                findet. Im Hintergrund führt die Funktion sozusagen den Vorgang
                <code>let username = 'Heribert'</code> durch. Ein Parameter ist nichts anderes als
                ein spezieller Variablentyp, bei der die Zuweisung anhand der Parameterübergabe
                stattfindet.</p>
            <hint>
                <h3>Argument vs. Parameter</h3>
                <p>Bei dem Aufruf <code>showNewsletterFor('Heribert')</code> für die Definition</p>
                <blockcode>let showNewsletterFor = (username) =&gt; &#8230;</blockcode>
                <p>gilt übrigens <i>username</i> als <i>Parameter</i> und <i>"Heribert"</i> (d.&#x202F;h. der übergebene Wert) als <i>Argument</i>. Der Unterschied zwischen Argument und Parameter ist allerdings nicht sonderlich bedeutsam. Im Alltag wird oft von Parametern geredet, auch wenn eigentlich das Argument gemeint ist &#x2014; und umgekehrt.</p>
            </hint>
            <h3>Darf's ein bissel weniger sein?</h3>
            <p>Falls Ihre Funktion wie im letzten Beispiel exakt einen Parameter benötigt, können Sie die Funktion sogar noch kürzer schreiben: Sie dürfen die Klammern um den Parameter weglassen:</p>
            <blockcode>
let showNewsletterFor = username =&gt; {
                  ...
};
            </blockcode>
            <p>Das gilt nicht für Funktionen mit zwei oder mehr Parametern, und auch nicht für Funktionen ganz ohne Parameter:</p>
            <blockcode>let myFunction = =&gt; { ... } //wrong!
let myFunction = () =&gt; { ... } //ok

let myFunction = a, b =&gt; { ... } //wrong!
let myFunction = (a, b) =&gt; { ... } //ok            </blockcode>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <p>Es gibt prinzipiell mehrere Möglichkeiten, Funktionsdefinitionen zu schreiben, aber um eine einheitliche und übersichtliche Schreibweise zu erreichen, gelten ab sofort folgende Programmierrichtlinien:</p>
                <p>
                    <b>Aufruf:</b>
                </p>
                <ul>
                    <li>Zwischen dem Bezeichner und der öffnenden runden Klammer darf kein Leerzeichen stehen.</li>
                    <li>Nach jedem Komma nach einem Argument muss ein Leerzeichen folgen.</li>
                </ul>
                <p>
                    <b>Funktionsdefinition:</b>
                </p>
                <ul>
                    <li>Zwischen den runden Klammern und dem Pfeil sowie zwischen dem Pfeil und der öffnenden geschweiften Klammer steht genau ein Leerzeichen.</li>
                    <li>Anweisungen innerhalb der Funktion sind um 2 Leerzeichen eingerückt.</li>
                    <li>Die schließende geschweifte Klammer steht in einer neuen Zeile.</li>
                    <li>Nach jedem Komma nach einem Parameter muss ein Leerzeichen folgen.</li>
                </ul>
                <blockcode numbered="numbered">
let showsABrilliantExample = (firstDirection, secondDirection) =&gt; {
    console.log('First brilliant direction: ' + firstDirection);
    console.log('Second brilliant direction:' + secondDirection);
};
                </blockcode>
                <p>
                    <b>Funktionsbezeichner:</b>
                </p>
                <p>Neben den Programmierrichtlinien für Funktionen, die die äußere Form betreffen, gibt es noch solche, die sich speziell mit den Funktionsbezeichnern beschäftigen. Funktionsbezeichner unterliegen den allgemeinen Richtlinien für Bezeichner. Zu diesen gesellen sich nun weitere, die ausschließlich für Funktionen gelten. Es ist generell sinnvoll, für Funktionsbezeichner Verben zu verwenden, da jede Funktion eine Tätigkeit darstellt, wie z.&#x202F;B. etwas ausgeben oder ändern.</p>
                <ul>
                    <li>Funktionsbezeichner sind Verben bzw. beginnen mit einem Verb. Bevorzugen Sie den Imperativ!</li>
                    <li>Funktionsbezeichner beginnen mit einem Kleinbuchstaben (a bis z)</li>
                </ul>
                <p>Schreiben Sie also zum Beispiel <b>gibMehrereTolleAnweisungenAus();</b> statt <b>AusgabeMehrererTollerAnweisungen();</b></p>
            </hint>
            <h1>Signaturen: Gut dokumentiert ist halb verstanden</h1>
            <p>In <a href="#mdn_substr"/> sehen Sie die Definition der Funktion <code>substr</code> vom <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr">Mozilla Developer Network</a>.</p>
            <figure id="mdn_substr">
                <img src="images/screenshots/mdn_substr.png"/>
                <figcaption>Definition der Funktion <code>substr</code> vom Mozilla Developer Network (MDN)</figcaption>
            </figure>
            <p>Die Zeile</p>
            <blockcode>str.substr(start[, length])</blockcode>
            <p>beschreibt dabei die sogenannte <keyword>Signatur</keyword> der Funktion. Das ist die übliche Vorgehensweise bei der Code-Dokumentation. Eine Signatur besteht dabei aus dem Namen der Funktion und ihren Parametern. Die eckigen Klammern <code>[]</code> bei <code>length</code> bedeuten, dass <code>length</code> ein optionaler Parameter ist, den Sie auch weglassen dürfen. Wichtig ist, dass Sie eine solche Dokumentation lesen können.</p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Schreiben Sie eine Funktion <i>logProduct</i> in der Arrow-Notation, die
                            <i>a</i> als ersten Parameter und <i>b</i> als zweiten Parameter
                            entgegen nimmt und ihr Produkt in der Konsole ausgibt:</p>
                        <p><code>let logProduct </code><blank>= (a, b) =&gt;</blank><code> console.log(a * b);</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Schreiben Sie eine Funktion <i>greetMeByName</i> in der Arrow-Notation, die <i>greeting</i> als ersten Parameter und <i>name</i> als zweiten Parameter entgegen nimmt und eine Begrüßung in der Konsole ausgibt.</p>
                        <p>Beispielaufruf: <code>greetMeByName('Hello', 'Steve')</code></p>
                        <p>Beispielausgabe: <code>Hello Steve!</code></p>
                        <p><code>const greetMeByName </code><blank>= (greeting, name) =&gt;</blank><code> console.log(`</code><blank>$</blank><code>{greeting} </code><blank>$</blank><code>{name}!`)</code>;</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Was gibt folgender Code in der JavaScript-Konsole des Browsers aus?</p>
                        <blockcode>let f = x =&gt; {
  if (x === 8) {
    console.log('ja');
  } else {
    console.log('nein');
  }
};

f(7);</blockcode>
                    </question_text>
                    <answer>undefined</answer>
                    <answer>gar nichts</answer>
                    <answer>eine Fehlermeldung</answer>
                    <answer>'ja'</answer>
                    <answer correct="correct">'nein'</answer>
                </question>

                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Schreiben Sie eine Funktion <i>logProduct</i> in der Arrow-Notation, die <i>a</i> als ersten Parameter und <i>b</i> als zweiten Parameter entgegen nimmt und ihr Produkt in der Konsole ausgibt:</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>let logProduct = (a, b) =&gt; console.log(a * b);</code></p>
                    </answer>
                    <answer>
                        <p><code>let logProduct = [a, b] =&gt; console.log(a * b);</code></p>
                    </answer>
                    <answer>
                        <p><code>let logProduct = [a, b] =&gt; console.log[a * b];</code></p>
                    </answer>
                    <answer>
                        <p><code>let logProduct =&gt; console.log(a * b);</code></p>
                    </answer>
                    <answer>
                        <p><code>let logProduct =&gt; (a, b) = console.log(a * b);</code></p>
                    </answer>
                </question>
                <question type="multiple_choice">
                    <question_text>
                        <p>Schreiben Sie eine Funktion <i>greetMeByName</i> in der Arrow-Notation, die <i>greeting</i> als ersten Parameter und <i>name</i> als zweiten Parameter entgegen nimmt und eine Begrüßung in der Konsole ausgibt.</p>
                        <p>Beispielaufruf: <code>greetMeByName('Hello', 'Steve')</code></p>
                        <p>Beispielausgabe: <code>Hello Steve!</code></p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>const greetMeByName = (greeting, name) =&gt; console.log(`${greeting} ${name}!`);</code></p>
                    </answer>
                    <answer>
                        <p><code>const greetMeByName = (greeting, name) =&gt; console.log('${greeting} ${name}!');</code></p>
                    </answer>
                    <answer>
                        <p><code>const greetMeByName = (greeting, name) =&gt; console.log("${greeting} ${name}!");</code></p>
                    </answer>
                    <answer>
                        <p><code>const greetMeByName = (greeting, name) =&gt; console.log($greeting +  $name + '!');</code></p>
                    </answer>
                    <answer>
                        <p><code>const greetMeByName = (greeting, name) =&gt; console.log(greeting +  name + '!');</code></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Die Signatur einer Funktion in JavaScript beinhaltet immer:</p>
                    </question_text>
                    <answer correct="correct">die Namen der Parameter</answer>
                    <answer>den Datentyp der Parameter</answer>
                    <answer correct="correct">den Namen der Funktion</answer>
                    <answer correct="correct">optionale Parameter</answer>
                    <answer>die Implementierung der Funktion</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Hello Mr. ${recipient}... oder doch Ms.?</name>
                <content>
                    <step>
                        <p>Stellen Sie sich vor, Sie arbeiten für einen nicht ganz so seriösen Auftraggeber. Auch für diesen Auftraggeber sollen Sie eine Serien-Mail versenden:</p>
                        <blockcode>Hello, Mr. Heribert,

We're happy to inform you that you've just won $100,000! Congratulations! Please write us an email with your banking information and we will transfer the money.

Sincerely, the Win Team</blockcode>
                        <p>Programmieren Sie eine Funktion, die den Versand (hier wieder simuliert durch Konsolenausgabe) des Newsletters übernimmt. Dabei soll statt <i>Heribert</i> ein beliebiger Name verwendbar sein.</p>
                        <p>Folgende Aufrufe erfolgen später aus der Datenbank:</p>
                        <blockcode numbered="numbered">
                        showNewsletterFor('Heribert');
                        showNewsletterFor('Goldy');
                        showNewsletterFor('Ladislaus');
                    </blockcode>
                    </step>
                    <step>
                        <p>Studien haben ergeben, dass die Öffnungsrate höher ist, wenn der Newsletter die richtige Anrede (d.&#x202F;h. <i>Ms.</i> oder <i>Mr.</i>) verwendet. Übergeben Sie der Funktion einen zweiten Parameter mit korrekter Anrede, die Sie dann in der ersten Zeile des Newsletters verwenden.</p>
                        <p>Einen zweiten Parameter können Sie bei der Funktionsdefinition innerhalb der Klammern durch Komma getrennt angeben.</p>
                        <h3>Beispiel</h3>
                        <blockcode>
let showNewsletterFor = (recipient, salutation) =&gt; {
    ...
};
                    </blockcode>
                        <p>Es sind auch weitere Parameter möglich, aber hier benötigen Sie nur zwei. Innerhalb des Rumpfes können Sie den neuen Parameter wie gewohnt wie ein Variable verwenden.</p>
                        <p>Folgende Aufrufe erfolgen später aus der Datenbank:</p>
                        <blockcode numbered="numbered">
                        showNewsletterFor('Heribert', 'Mr.');
                        showNewsletterFor('Goldy', 'Ms.');
                        showNewsletterFor('Ladislaus', 'Mr.');
                    </blockcode>
                    </step>
                    <step>
                        <p>Locken Sie mit individuelleren Gewinnen, die Sie nach Geschlecht unterscheiden. Dafür entwickeln Sie einen Newsletter, der die folgenden Texte enthält:</p>
                        <h3>Männliche Version</h3>
                        <blockcode>We are glad to inform you that you won an incredible Ferrari and 20.000$!</blockcode>
                        <figure width="40%">
                            <img src="images/photos/ferrari.jpg"/>
                            <figcaption>Foto:<a href="https://www.flickr.com/photos/autovivacom/">Autoviva</a>
                                <a href="https://creativecommons.org/licenses/by/2.0/legalcode">(CC) Attribution</a></figcaption>
                        </figure>
                        <h3>Weibliche Version</h3>
                        <blockcode>We are glad to inform you that you have won a voucher from Tiffany &amp; Co. (50.000$), a luxury trip to New York and additionally 50.000$ for shopping and more!               </blockcode>
                        <figure width="30%" float="left">
                            <img src="images/photos/tiffany2.jpg"/>
                            <figcaption>Foto: <a href="https://www.flickr.com/photos/irenetong/">irene.</a><a href="https://creativecommons.org/licenses/by-nd/2.0/legalcode">(CC) Attribution-NoDerivs</a></figcaption>
                        </figure>
                        <figure width="60%">
                            <img src="images/photos/tiffany1.jpg"/>
                            <figcaption>Foto: <a href="https://www.flickr.com/photos/revstan/">revstan</a><a href="https://creativecommons.org/licenses/by/2.0/">(CC) Atttribution</a></figcaption>
                        </figure>
                    </step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/hello_mr_recipient1.js"/>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/hello_mr_recipient2.js"/>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/hello_mr_recipient3.js"/>
                </answer>
            </exercise>
            <exercise id="ladislaus2">
                <name>Der transformierte Ladislaus, Teil 2</name>
                <content>
                    <p>Schreiben Sie eine Funktion <code>logTransformedName</code>, die Vor- und Nachname als Parameter entgegennimmt und einen String der Form</p>
                    <blockcode>&lt;Nachname&gt;, &lt;Anfangsbuchstabe des Vornamens&gt;.</blockcode>
                    <p>ausgibt.</p>
                    <h3>Beispielaufruf</h3>
                    <blockcode>logTransformedName('Ladislaus', 'Jones'); // =&gt; 'Jones, L.'</blockcode>
                    <p><b>Hinweis:</b> Sie können Teile der Lösung von <a href="#der_transformierte_ladislaus"/> weiterverwenden.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/ladislaus.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="function_return_values">
            <lesson_name>Funktionen geben uns so viel ... zurück</lesson_name>
            <topics>
                <li>was Rückgabewerte sind und wie Sie damit umgehen.</li>
                <li>was Sie außerdem bei der Definition von Funktionen beachten sollten.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Was das Leben so schwierig macht, ist die fehlende Strg+Z Funktion.</p>
                </blockquote>
                <figcaption>André M. Hünseler</figcaption>
            </figure>
            <hint src="images/hint/bjoern.png">
                <p>Unsere Kunden beschweren sich regelmäßig über unsere zu teure Versandpauschale. Es sieht so aus, als müssten wir die Versandkosten in Zukunft korrekt im Voraus berechnen. Insbesondere bei unseren schicken Verpackungsröhren ist das ein großes Problem. Sowohl Karton als auch Rollen rechnet unser Spediteur nach Volumen ab. Setzen Sie das bitte zuerst um.</p>
            </hint>
            <h1>Wenn Kunden in die Röhre schauen&#8230;</h1>
            <p>Nach Rücksprache mit der Versandabteilung wird klar: Für die meisten Produkte sind die Maße der benötigten Verpackungsröhren bekannt (Durchmesser und Höhe). Daraus lässt sich das Volumen berechnen. Der Spediteur stellt dann $<code>0,001</code> pro cm³ plus $<code>0,70</code> pro Einheit in Rechnung. Dazu benötigen Sie folgende Formeln:</p>
            <hint>
                <p>
                    <b>Formel shippingCost</b><br/> shippingCost = volume × costPerCC + costPerUnit </p>
                <p>
                    <b>Formel cylindricalVolume</b><br/> cylindricalVolume = π × radius² × height </p>
            </hint>
            <p>Eine sehr anschauliche Darstellung der Geometrie-Formeln finden Sie übrigens unter <a href="http://www.basic-mathematics.com/volume-of-cylinders.html">http://www.basic-mathematics.com/volume-of-cylinders.html</a></p>
            <p>Der erste Versuch zur Berechnung könnte wie im nachfolgenden Listing aussehen. Dabei simulieren die Variablen <code>height</code> und <code>diameter</code> wieder Eingaben, die später z.&#x202F;B. aus einer Datenbank oder zumindest aus einem Formular kommen.</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/tube.js"/>
            <h1>Ab in die Kiste&#8230;</h1>
            <p>Ähnlich verhält es sich bei den rechteckigen Kartons. Lediglich die Berechnung des Volumens ist eine andere:</p>
            <hint>
                <p><br/><b>Formel cubeVolume</b><br/>cubeVolume = length × width × height</p>
            </hint>
            <p>Der Code dafür könnte z&#x202F;B. so aussehen:</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/box.js"/>
            <p>Diese ersten Ansätze, die Verpackungskosten korrekt zu berechnen, bringen leider noch einige Schwächen mit:</p>
            <ul>
                <li>Ein großer Teil des Codes ist <b>redundant</b>. So ist z&#x202F;B. die Berechnung der Versandkosten aus dem Volumen in beiden Fällen genau identisch. Sobald sich Änderungen an der Formel ergeben, müssen Sie es an beiden Stellen nachziehen und dürfen dabei keine vergessen! Sonst entstehen Inkonsistenzen und Bugs.</li>
                <li>Die ursprünglichen Formeln sind im Code schlecht zu sehen &#x2014; so taucht der Formelname <i>Zylinder-Volumen</i> nicht einmal auf. Daher können Sie die Funktionen auch nicht <b>wiederverwenden</b>, falls Sie zum Beispiel das Zylinder-Volumen noch mal an einer anderen Stelle benötigen.</li>
                <li>Die Konsole zeigt das Ergebnis. In der Praxis reicht das aber nicht aus. Sie benötigen vielmehr die Möglichkeit, den berechneten Versandkostenpreis an andere Funktionen weiterzugeben, um ihn z.&#x202F;B. auf den Gesamtpreis zu addieren.</li>
            </ul>
            <p>Das sind alles Schwächen, die letztendlich die Wartung des Codes erheblich erschweren. Das ist in diesem kleinen Beispiel noch nicht besonders tragisch. Aber Programme wachsen, und sehr bald sehen Sie den Wald vor lauter Bäumen nicht mehr. Kleinere Wartungsprobleme summieren sich und entwickeln eine Eigendynamik. Ehe Sie sich versehen, mutieren Ihre Anwendungen zu Monsterapplikationen, die nur noch mit sehr viel Aufwand zu pflegen sind.</p>
            <p>Vermutlich werden Sie sich bereits denken, dass es eine Möglichkeit gibt, den Code nicht doppelt zu schreiben und die Formeln klar benannt und wiederverwendbar zu hinterlegen.</p>
            <p>Genau! Für solche Fälle gibt es <b>Funktionen</b>! Ihnen fehlt aber noch ein Puzzleteil, damit Sie Funktionen hier einsetzen können. Sie benötigen <keyword>Rückgabewerte</keyword>.</p>
            <h1>&#8230; und wieder zurück</h1>
            <p>Funktionen können Werte zurückzugeben. Betrachten Sie es im Ganzen: Eine Funktion nimmt Parameter entgegen, verarbeitet sie &#x2014; zum Beispiel in Form einer Berechnung &#x2014; und liefert das Ergebnis der Verarbeitung zurück.</p>
            <p>Im Grunde können Sie sich eine Funktion wie einen Parkschein-Automaten vorstellen. Oben kommt Geld rein. Im Automaten findet eine Verarbeitung statt (Prüfen der Münzen, Bedrucken des Tickets usw.), und unten kommt anschließend das bedruckte Parkticket raus.</p>
            <p>Somit können Sie jede Funktion als eigenes kleines Programm betrachten, das nach dem sogenannten <keyword>EVA-Prinzip</keyword> (engl.: <keyword>IPO-Model</keyword> &#x2014; Input, Process, Output) arbeitet:</p>
            <ul>
                <li>Eingabe</li>
                <li>Verarbeitung</li>
                <li>Ausgabe</li>
            </ul>
            <p>Für die Formel zur Zylinder-Volumenberechung bedeutet das: Die Funktion nimmt Radius und Höhe entgegen, berechnet das Volumen anhand der Formel und gibt den Wert anschließend zurück. Hier als JS-Code:</p>
            <blockcode>let cylindricalVolume = (radius, height) =&gt; Math.PI * radius * radius * height;</blockcode>
            <p>Ist Ihnen der Unterschied zu den bisherigen Funktionen aufgefallen? Stimmt &#x2014; die geschweiften Klammern fehlen. Wenn Sie die Klammern weglassen, können Sie nur einen Ausdruck in den Rumpf packen &#x2014; d.&#x202F;h. diese Kurzvariante funktioniert nicht für mehrzeilige Funktionen. Der Vorteil ist aber, dass die Funktion den vom Ausdruck berechneten Wert zurückgibt. Stellen Sie sich einfach vor, dass JS beim Aufruf einer Funktion diesen Aufruf durch den Rückgabewert ersetzt.</p>
            <p>Der Aufruf <code>cylindricalVolume(5, 80)</code> wird ersetzt durch den Rückgabewert <code>6283</code>. (Eigentlich sind es sogar <code>6283.185307179587</code>, aber die Nachkommastellen haben wir hier der Einfachheit halber mal unterschlagen.) Rechnen Sie es mit dem Taschenrechner nach, falls Sie uns nicht glauben. Stellen Sie sich einfach vor, genau an der Stelle, an der die Funktion aufgerufen wird, würde der Wert stehen. Den Wert können Sie dann beispielsweise loggen:</p>
            <blockcode>
console.log(cylindricalVolume(5, 80));
            </blockcode>
            <p>oder zur Weiterverarbeitung einer Variable zuweisen:</p>
            <blockcode>
let volume = cylindricalVolume(5, 80);
            </blockcode>
            <p>Noch mal: <code>radius</code> (80) und <code>height</code> (5) geht rein, <code>6283</code> kommt raus.</p>
            <p>Auch die Versandkosten lassen sich als Funktion darstellen:</p>
            <blockcode>
let shippingCost = (volume) =&gt; volume * COST_PER_CC + BASE_COST_PER_UNIT;
            </blockcode>
            <p>Die Klammern um <code>volume</code> können Sie natürlich noch weglassen &#x2014; bei nur einem Parameter sind sie ja überflüssig (siehe <a href="#functions"/>).</p>
            <blockcode>
let shippingCost = volume =&gt; volume * COST_PER_CC + BASE_COST_PER_UNIT;
            </blockcode>
            <p>Hier nun im Ganzen:</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/return_values.js"/>
            <p>Die Formeln sind nun sehr viel einfacher zu finden und zu warten. Auch der aufrufende Code ist lesbarer geworden. So ist zur Bestimmung des Volumens der Versandröhren (<code>mailingTubeVolume</code>) im ersten Schritt nur wichtig, dass es sich um ein Zylindervolumen handelt, das den Radius (halber Durchmesser) und die Höhe verwendet. Die Details der Berechnung lassen sich bei Bedarf in der Funktion nachlesen.</p>
            <p>Wenn Sie die beiden Beispiele kombinieren, benötigen Sie die Funktion zur Bestimmung der Versandkosten nur noch einmal:</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/return_values_combined.js"/>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <p>
                    <b>Funktionsdefinition in der Kurzschreibweise:</b>
                </p>
                <ul>
                    <li>Die Funktionsdefinition steht komplett in einer Zeile.</li>
                    <li>Nach dem Pfeil folgt ein Leerzeichen und darauf direkt der Ausdruck.</li>
                    <li>Die Funktionsdefinition muss mit einem Semikolon abgeschlossen werden.</li>
                    <li>Bei Funktionsdefinitionen mit Rückgabewert kann statt eines Verbs auch die Art des zurückgegebenen Werts als Funktionsbezeichners verwendet werden. (z.B. <code>cubeVolume</code> statt <code>calculateCubeVolume</code>)</li>
                </ul>
                <blockcode>let cubeVolume = (length, width, height) =&gt; length * width * height;</blockcode>
            </hint>
            <h1>Wenn's mehr Ausdruck braucht&#8230;</h1>
            <p>Die bisherigen Funktionen waren recht kurz. Sie bestanden nur aus einem Ausdruck. Wenn Sie längere Funktionen haben, können Sie die geschweiften Klammern nicht weglassen. Damit Sie dennoch entscheiden können, welchen Wert die Funktion zurückliefert, gibt es ein neues Schlüsselwort: <keyword>return</keyword>. </p>
            <h3>Beispiel</h3>
            <p>So könnten Sie beispielsweise eine Funktion schreiben, die Volumenberechnung und Versandkosten kombiniert.</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/costForShippingTube.js"/>
            <p>Das <code>return</code> gibt den Wert zurück, den der dahinter stehende Ausdruck berechnet. In diesem Fall ist das lediglich der Wert, der in der Variable <code>cost</code> gespeichert ist. Da die Funktion aus mehr als nur einem Ausdruck besteht, ist es nötig, dass Sie klarstellen, welcher Ausdruck den Rückgabewert bestimmt.</p>
            <p>Im Grunde könnten Sie auch jede einzeilige Funktion in der ausführlichen Form mit <code>return</code> schreiben.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/cylindricalVolume1.js"/>
            <p>Diese Funktion könnten Sie auch folgendermaßen definieren: </p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/cylindricalVolume2.js"/>
            <p>oder sogar:</p>
            <blockcode numbered="numbered" src="accompanying_files/14/examples/cylindricalVolume3.js"/>
            <p>Im Allgemeinen bevorzugen wir die kürzere Form. Allerdings lässt sich nicht jede Funktion in nur einer Zeile ausdrücken. Sobald Ihre Funktion aus mehreren Zeilen besteht, benötigen Sie <code>return</code> zwingend für die Rückgabe eines Wertes.</p>
            <h1>Wächter für Ihre Funktionen</h1>
            <p>Mit Hilfe von <code>return</code> haben Sie sogar die Möglichkeit, eine Funktion vorzeitig zu verlassen. Das ist allerdings nicht ganz unproblematisch. Es stellt eine Verletzung des <keyword>Single Entrance/Single Exit</keyword>-Prinzips (SESE) <footnote><a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a></footnote> dar. Das SESE-Prinzip, das sich in der strukturierten Programmierung begründet, besagt, dass jede Funktion genau <b>einen</b> Ein- und <b>einen</b> Aussprungspunkt haben soll. </p>
            <p>Ist das nicht der Fall, fällt es schwerer, den Ablauf in einer Funktion zu verfolgen und es entstehen oft subtile Bugs. Eine begründete Ausnahme des Prinzips sind sogenannte <keyword>guards</keyword> (Wächter). Ein <i>guard</i> oder <i>guard clause</i> am Anfang einer Funktion prüft, ob die Funktion mit den übergebenen Argumenten überhaupt sinnvoll ihre Arbeit verrichten kann. Ist das nicht der Fall, stoppt der Wächter die Ausführung der Funktion vorzeitig.</p>
            <h3>Beispiel</h3>
            <p>Eventuell möchten Sie verhindern, ein Zylindervolumen für einen negativen Radius oder eine negative Höhe zu berechnen. Hier bietet es sich an, <code>NaN</code> (im Sinne von &#187;kein gültiges Ergebnis&#171;) als Rückgabewert zu liefern.</p>
            <p>Sobald das erste <code>return</code> erreicht wird (wenn einer der Parameter einen negativen Wert enthält), endet die Funktion. Die eigentliche Berechnung findet nicht mehr statt.</p>
            <blockcode src="accompanying_files/14/examples/cylindricalVolume_guard.js" numbered="numbered"/>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Schreiben Sie eine Funktion, die Ihnen den letzten Buchstaben eines Strings zurück gibt:</p>
                        <p><code>let lastLetter = </code><blank>str =&gt;</blank><code> str.charAt(</code><blank>str.length - 1</blank><code>);</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Funktionen könnten (bei entsprechendem Argument) 13 zurückgeben?</p>
                    </question_text>
                    <answer correct="correct">let fa = () =&gt; 13;</answer>
                    <answer correct="correct">let fb = x =&gt; x + 5;</answer>
                    <answer>let fc = x =&gt; { console.log(x); };</answer>
                    <answer correct="correct">let fd = x =&gt; { return x / 2; };</answer>
                    <answer correct="correct">let fe = x =&gt; { return x % 20; };</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Schreiben Sie eine Funktion, die Ihnen den letzten Buchstaben eines übergebenen Strings zurück gibt:</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>let lastLetter = str =&gt; str.charAt(str.length - 1);</code></p>
                    </answer>
                    <answer>
                        <p><code>let lastLetter = str =&gt; str.charAt(str.length);</code></p>
                    </answer>
                    <answer>
                        <p><code>let lastLetter = str =&gt; str.charAt[str.length];</code></p>
                    </answer>
                    <answer>
                        <p><code>let lastLetter = str =&gt; str.charAt[str.length - 1];</code></p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise id="der_transformierte_ladislaus3">
                <name>Der transformierte Ladislaus, Teil 3</name>
                <content>
                    <p>Ändern Sie den Code aus <a href="#ladislaus2"/>. Die Funktion soll den transformierten Namen nun nicht mehr direkt ausgeben, sondern diesen zurückgeben. Das Ausgabeformat bleibt unverändert:</p>
                    <blockcode>&lt;Nachname&gt;, &lt;Anfangsbuchstabe vom Vornamen&gt;.</blockcode>
                    <h3>Beispielaufruf</h3>
                    <blockcode>transformName('Ladislaus', 'Jones')</blockcode>
                    <p>Rufen Sie die Funktion anschließend innerhalb von <code>console.log</code> auf:</p>
                    <blockcode>console.log(transformName('Ladislaus', 'Jones')); // =&gt; 'Jones, L.'</blockcode>
                    <p><b>Hinweis:</b> Vergessen Sie nicht, die Funktion umzubenennen, da sie das Logging nicht mehr selbst ausführt.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/14/solutions/ladislaus.js"/>
                </answer>
            </exercise>
            <exercise id="reichweite_verbrauch3">
                <name>Reichweite &amp; Verbrauch, Teil 3</name>
                <content>
                    <p>Überarbeiten Sie <i>Reichweite &amp; Verbrauch, Teil 2</i> (<a href="#reichweite_verbrauch2"/>). Erstellen Sie passende Funktionen, die die Benutzereingaben zurückgeben.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/14/solutions/gasoline.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Der HTML-Konstruktor</name>
                <content>
                    <p>Schreiben Sie eine Funktion, die eine URL als Parameter erhält und einen HTML-Link zurückgibt.</p>
                    <p> Eingabe: <code>http://1006.org</code><br/> Ausgabe: <code>&lt;a href="http://1006.org"&gt;http://1006.org&lt;/a&gt;</code>
                    </p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/14/solutions/html_link.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Heiß, Heiß, Heiß</name>
                <content>
                    <p>Schreiben Sie eine Funktion, die dem Anwender Temperaturwerte von Celsius in Fahrenheit umrechnet. Die Formel zum Umrechnen lautet:<br/><i>Fahrenheit = Celsius × 9 / 5 + 32.</i></p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/14/solutions/hot.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Einer für alle und alle für einen: Arrays</lesson_name>
            <topics>
                <li>was ein Array ist.</li>
                <li>wie Sie mit Arrays arbeiten können.</li>
                <li>wie Sie Arrays manipulieren können.</li>
            </topics>
            <p>Bei Nerdworld gab es mal wieder ein Innovationsmeeting, und Sie erhalten einen euphorischen Anruf von Björn.</p>
            <hint src="images/hint/bjoern.png">
                <p>Unsere Produkte sind teilweise schon sehr speziell, und die Kunden lieben es, sich darüber auszutauschen, sich gegenseitig Verwendungsbeispiele, Tricks und Spielereien zu verraten.</p>
                <p> Bislang hatten wir ein extern gehostetes Forum, aber ein Forum ist natürlich weniger spontan und interaktiv. Wir gehen davon aus, dass ein Chat wesentlich lebendiger wäre und intensiver bzw. spontaner genutzt würde. </p>
                <p>Für unseren Chat möchten wir eine Liste der Kunden pflegen, die gerade online sind. Es wird also ein stetiges Kommen und Gehen im Chatroom geben. Dennoch soll die Liste natürlich immer aktuell und zusätzlich sortierbar sein. Zudem soll angezeigt werden, wie viele Kunden gerade online sind.</p>
            </hint>
            <p>Wie lässt sich eine Kundenliste am besten darstellen? Eine Möglichkeit wäre, alle Kundennamen in einen String zu schreiben.</p>
            <blockcode>
let customersOnline = 'Heribert, Friedlinde, Tusnelda, Oswine, Ladislaus';
            </blockcode>
            <p>Das erschwert es aber, die Namen zu sortieren oder herauszufinden, wie viele Kunden gerade online sind. Für solche Anforderungen ist ein sogenanntes <keyword>Array</keyword> besser geeignet.</p>
            <h1>Erzeugen von Arrays</h1>
            <p>Ein Array können Sie sich einfach als eine Liste von Elementen (in diesem Fall Namen) vorstellen. Sie erzeugen ein Array mithilfe von eckigen Klammern <code>[]</code>.</p>
            <blockcode>
let customersOnline = ['Heribert', 'Friedlinde', 'Tusnelda', 'Oswine', 'Ladislaus'];
            </blockcode>
            <h1>Die Frage nach der Länge, Teil 2</h1>
            <p>Nun ist es recht einfach herauszufinden, wie viele Kunden gerade online sind. Fragen Sie dazu das Array nach seiner Länge.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/length.js"/>
            <h1>Zugreifen mit dem Indexoperator</h1>
            <p>Die Elemente innerhalb des Arrays stehen in einer Reihenfolge. Sie können anhand ihrer Position auf einzelne Elemente zugreifen. Stellen Sie sich das Array als nummerierte Liste vor.</p>
            <table width="30%">
                <tbody>
                    <tr>
                        <th>0</th>
                        <td>Heribert</td>
                    </tr>
                    <tr>
                        <th>1</th>
                        <td>Friedlinde</td>
                    </tr>
                    <tr>
                        <th>2</th>
                        <td>Tusnelda</td>
                    </tr>
                    <tr>
                        <th>3</th>
                        <td>Oswine</td>
                    </tr>
                    <tr>
                        <th>4</th>
                        <td>Ladislaus</td>
                    </tr>
                </tbody>
            </table>
            <p>Die Nummerierung wird als <keyword>Index</keyword> und die Namen als <keyword>Werte</keyword> des Arrays bezeichnet. Wenn Sie auf einen einzelnen Namen zugreifen möchten, können Sie dazu den sogenannten <keyword>Indexoperator</keyword> verwenden &#x2014; die eckigen Klammern <code>[]</code>. Notieren Sie diese direkt hinter dem Array. Innerhalb der Klammern geben Sie den Index des gesuchten Elements an.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/indexoperator.js"/>
            <h1>Drücken und Schubsen mit push</h1>
            <p>Wenn sich jetzt z.&#x202F;B. <i>Goldy</i> einloggt und Sie das im Array darstellen möchten, benötigen Sie die Funktion <code>push</code>. Sie müssen Goldy also in das Array &#187;reinschubsen&#171;.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/push.js"/>
            <p>Das neue Element übergeben Sie der Funktion <code>push</code> als Argument. Im Array taucht es an der letzten Position auf.</p>
            <h1>Dezimieren mit pop</h1>
            <p>Wenn Goldy den Chat wieder verlässt, benötigen Sie die Funktion <code>pop</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/pop.js"/>
            <p><code>pop</code> entfernt das Element am Ende des Arrays. Außerdem gibt die Funktion das entfernte Element zurück, so dass Sie es weiterverwenden können.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/pop_return.js"/>
            <h1>Gezielt manipulieren mit splice</h1>
            <p>Zugegeben, das letzte Beispiel war etwas an den Haaren herbeigezogen. Mit <code>pop</code> können Sie immer nur das letzte Element eines Array entfernen. Das macht im aktuellen Beispiel aber gar nicht so viel Sinn. Sie können kaum davon ausgehen, dass immer der letzte Teilnehmer als erstes wieder geht. Was tun Sie bei anderen Chat-Teilnehmern?</p>
            <p>Mit <code>splice</code> steht eine sehr viel mächtigere Funktion zur Verfügung. Sie erlaubt es, Elemente an einer beliebigen Position zu löschen. Beispiel &#x2014; Friedlinde loggt sich aus:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/splice1.js"/>
            <p>Der erste Parameter steht dabei für die Position, an der Sie Elemente entfernen möchten. Der zweite Parameter bestimmt die Anzahl der zu löschenden Elemente. Im Beispiel löschen Sie also genau ein Element an der Stelle <code>1</code>. Sie können auch mehrere Elemente auf einmal löschen:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/splice2.js"/>
            <p><code>.splice(1, 3)</code> löscht ab Position <code>1</code> (d.&#x202F;h. <code>Friedlinde</code> an der zweiten Stelle im Array) drei Elemente.</p>
            <p>Sie können mit <code>splice</code> sogar neue Elemente hinzuzufügen:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/splice3.js"/>
            <p>Sogar gleichzeitiges Löschen und Hinzufügen ist möglich:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/splice4.js"/>
            <h1>Ordnung ist das halbe Leben mit sort</h1>
            <p>Björn möchte, dass Sie die Namen der Chat-Teilnehmer in alphabetischer Reihenfolge ausgeben. Dazu müssen Sie sie zunächst alphabetisch sortieren. Nichts ist leichter als das &#x2014; die Array-API von JS bietet dazu die Funktion <code>sort</code> an.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/sort.js"/>
            <h1>Verbinden mit join</h1>
            <p>Bei der Ausgabe der Teilnehmer ist es sinnvoll, nach jedem Namen einen Zeilenumbruch einzufügen. Genau das erreichen Sie mithilfe von <code>join</code>. Die Funktion <code>join</code> kann ein Array in einen String verwandeln, indem sie die einzelnen Elemente mit einem Separator verbindet. Wenn Sie den Zeilenumbruch <code>\n</code> als Separator verwenden, erhalten Sie eine Listenausgabe, bei der die Elemente untereinander stehen.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/join.js"/>
            <blockcode>
                Heribert
                Friedlinde
                Tusnelda
                Oswine
                Ladislaus
            </blockcode>
            <h1>Vom Suchen und Finden mit indexOf, Teil 2</h1>
            <p>Kaum sind die neuen Features online, will der niemals zufriedene Kunde natürlich schon wieder ein neues Feature.</p>
            <hint src="images/hint/bjoern.png">
                <p>Da manchmal sehr viele Kunden online sind, kann die Liste recht unübersichtlich werden. Deswegen wünschen sich einige Anwender die Möglichkeit, direkt nach ihren Freunden zu suchen. Dazu könnten Sie den gesuchten Namen in einem Suchfeld eingeben und später sollen dann alle Fundstellen in der Liste gelb hervorgehoben werden.</p>
            </hint>
            <p>Namen gelb hervorzuheben ist erstmal nicht Ihr Problem. Darum sollen sich die Designer kümmern. Ihre Aufgabe ist es herauszufinden, an welcher Stelle sich der gesuchte Name in der Liste befindet. Das gelingt mithilfe der Funktion <code>indexOf</code>:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/indexOf1.js"/>
            <p>Beachten Sie: Falls die Funktion <code>indexOf</code> den Namen nicht finden kann, gibt sie stattdessen <code>-1</code> zurück.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/indexOf2.js"/>
            <h1>Wenn Strings sich trennen: split</h1>
            <hint src="images/hint/bjoern.png">
                <p>Da unsere Mitarbeiter ständig ihre Passwörter vergessen, wollen wir diese nun vereinheitlichen. Unsere Idee ist, dass die Passwörter aus den <i>rückwärts</i> geschriebenen Vornamen und der Länge des Namens als Zahl bestehen soll. Können Sie das automatisieren?</p>
            </hint>
            <p>Ok &#x2014; wir wissen schon, was Sie sagen wollen. Da haben Björn und sein Team sich eine wirklich grandiose &#187;Sicherheitsrichtlinie&#171; ausgedacht. Natürlich empfehlen Sie Björn, diese Anforderung noch mal genau zu überdenken. (Der danach hinzugezogene unabhängige Sicherheitsexperte hat dann Ihre Skepsis übrigens bestätigt &#x2014; allerdings erst, nach dem er sich zehn Minuten lang die Handfläche gegen die Stirn gehauen hat.)</p>
            <p>Nun gut, nehmen wir mal an, das wir dieses spezielle Feature wirklich umsetzen wollen. Sie müssten dann folgende Schritte durchführen.</p>
            <h3>Schritt 1: Die Buchstaben des Vornamens auftrennen</h3>
            <p>Inzwischen kennen Sie mit <code>join</code> bereits eine Funktion, mit der Sie ein Array zu einem String zusammensetzen können. Als Parameter können Sie den gewünschten Separator angeben.</p>
            <p>Zur Erinnerung:</p>
            <blockcode numbered="numbered">
let geniusWords = ['Willkommen', 'bei', 'NerdWorld'];
geniusWords.join(' '); // =&gt; Willkommen bei NerdWorld
            </blockcode>
            <p>Für den umgekehrten Fall gibt es die Funktion <code>split</code>. Mit dieser können Sie einen String in ein Array wandeln. In den runden Klammern notieren Sie auch hier den gewünschten Separator.</p>
            <blockcode numbered="numbered">
let geniusText = 'Willkommen bei NerdWorld';
geniusText.split(' '); // =&gt; ['Willkommen', 'bei', 'NerdWorld'];
            </blockcode>
            <p>Versuchen Sie nun mal, diesen ersten Schritt für die &#187;clevere Richtlinie&#171; zu implementieren:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/split_step1.js"/>
            <p>Dadurch, dass Sie den leeren String <code>''</code> als Trennzeichen verwenden,
                erhalten Sie nun ein Array, bei dem die Elemente jeweils einzelne Buchstaben sind.
                Dieses Format des Namens ist die Voraussetzung für den nächsten Schritt. </p>
            <h3>Schritt 2: Reihenfolge der Buchstaben vertauschen</h3>
            <p>Der zweite Schritt ist wunderbar einfach, denn JS stellt auch hier wieder eine Funktion bereit. Mit <code>reverse()</code> können Sie die Reihenfolge der Elemente eines Arrays vertauschen. </p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/split_reverse_step2.js"/>
            <h3>Schritt 3: Das veränderte Array wieder zu einem String zusammensetzen</h3>
            <p>Den nächsten Schritt können Sie vermutlich schon im Schlaf. Da ein Passwort ein String ist, setzen Sie den Buchstabensalat (das Array) wieder zu einem String zusammen.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/split_reverse_join_step3.js"/>
            <h3>Schritt 4: Die Länge des Namens in Ziffern anfügen</h3>
            <p>Zum Schluss berechnen Sie mittels <code>length</code> noch die Länge des Vornamens und hängen diese Zahl hinten an.</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/split_reverse_join_length_step4.js"/>
            <p>Den Code sollten Sie natürlich nicht jedes Mal neu schreiben. Damit Sie für jeden Namen das passende Passwort generieren können, erstellen Sie eine Funktion:</p>
            <blockcode>
let passwordFor = name =&gt; name.split('').reverse().join('') + name.length;
            </blockcode>
            <p>Probieren Sie die neue Funktion gleich aus:</p>
            <blockcode numbered="numbered" src="accompanying_files/15/examples/passwordFor.js"/>
            <p>So weit, so gut (vielleicht auch nicht). Wenigstens ist der Kunde erstmal glücklich&#8230;</p>
            <hint src="images/hint/owl.png">
                <h3>Achtung Mutanten: In-place-mutation vs. Rückgabewert</h3>
                <p> Es gibt zwei Arten von Array-Funktionen: Solche, die das Original-Array verändern und solche, die das nicht tun. Bei der ersten Sorte ändert sich das Original-Array an genau dieser Stelle (sogenannte <keyword>in-place mutation</keyword>). Bei der zweiten Variante ist nur der Rückgabewert ausschlaggebend. Funktionen, die neben dem Rückgabewert keine Veränderung (<keyword>mutation</keyword>) durchführen, heißen auch <keyword>side effect free</keyword> (nebeneffektfrei). Verändernde Funktion sind z.&#x202F;B. <code>sort</code>, <code>splice</code> oder <code>pop</code>. Side effect free sind dagegen beispielsweise <code>indexOf</code>, <code>join</code>, <code>split</code> oder <code>slice</code> (ohne p, nicht mit <code>splice</code> verwechseln).</p>
                <p><b>Beispiel</b></p>
                <blockcode>let someNumbers = [3, 1, 2];
let sortedNumbers = someNumbers.sort(); </blockcode>
                <p>Nach der Ausführung des obigen Codes hat <code>sortedNumbers</code> den Wert <code>[1, 2, 3]</code>. Eventuell würden Sie erwarten, dass <code>someNumbers</code> noch ihren ursprünglichen Wert <code>[3, 1, 2]</code> haben. <code>sort</code> hat aber auch das <code>someNumbers</code> verändert. someNumbers hat nun auch den Wert <code>[1, 2, 3]</code>. Deswegen bezeichnet man <code>sort</code> auch als <keyword>destruktive</keyword> Funktion.</p>
                <p>Wenn Sie die Möglichkeit haben, sollten Sie immer Funktionen bevorzugen, die keine Nebeneffekte haben!</p>
            </hint>
            <h1>Referenz</h1>
            <table id="array-api">
                <caption>Array-API Übersicht am Beispiel
                    <code>let a = ['a', 'b', 'c', 'd']</code><br/></caption>
                <thead>
                    <tr>
                        <th>Funktion</th>
                        <th>Zweck</th>
                        <th>Beispiel&#x00AD;aufruf</th>
                        <th>a.join('')</th>
                        <th>Rückgabe&#x00AD;wert (Datentyp)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>push</td>
                        <td>fügt Elemente am Ende des Arrays an</td>
                        <td>
                            <code>a.push('x', 'y')</code>
                        </td>
                        <td>abcdxy</td>
                        <td>6 (number)</td>
                    </tr>
                    <tr>
                        <td>pop</td>
                        <td>entfernt das Element am Ende des Arrays</td>
                        <td>
                            <code>a.pop()</code>
                        </td>
                        <td>abc</td>
                        <td>d (string)</td>
                    </tr>
                    <tr>
                        <td>unshift</td>
                        <td>fügt Elemente am Anfang des Arrays an</td>
                        <td>
                            <code>a.unshift('x', 'y')</code>
                        </td>
                        <td>xyabcd</td>
                        <td>6 (number)</td>
                    </tr>
                    <tr>
                        <td>shift</td>
                        <td>entfernt das Element am Anfang des Arrays</td>
                        <td>
                            <code>a.shift()</code>
                        </td>
                        <td>bcd</td>
                        <td>a (string)</td>
                    </tr>
                    <tr>
                        <td>slice</td>
                        <td>fertigt eine Kopie von einem Teil des Arrays an</td>
                        <td>
                            <code>a.slice(2, 4)</code>
                        </td>
                        <td>abcd</td>
                        <td>c,d (array)</td>
                    </tr>
                    <tr>
                        <td>splice</td>
                        <td>entfernt und/oder ergänzt Elemente im Array</td>
                        <td>
                            <code>a.splice(2, 2, 'x')</code>
                        </td>
                        <td>abx</td>
                        <td>c,d (array)</td>
                    </tr>
                    <tr>
                        <td>sort</td>
                        <td>sortiert das Array</td>
                        <td>
                            <code>a.sort()</code>
                        </td>
                        <td>abcd</td>
                        <td>a,b,c,d (array)</td>
                    </tr>
                    <tr>
                        <td>reverse</td>
                        <td>kehrt die Reihenfolge der Elemente um</td>
                        <td>
                            <code>a.reverse()</code>
                        </td>
                        <td>dcba</td>
                        <td>d,c,b,a (array)</td>
                    </tr>
                    <tr>
                        <td>concat</td>
                        <td>Verbindet ein Array mit einem oder mehreren Elementen oder Arrays</td>
                        <td>
                            <code>a.concat(['x', 'y'])</code>
                        </td>
                        <td>abcd</td>
                        <td>a,b,c,d,x,y (array)</td>
                    </tr>
                    <tr>
                        <td>fill</td>
                        <td>Befüllt alle Elemente mit einem Wert</td>
                        <td>
                            <code>a.fill('x')</code>
                        </td>
                        <td>xxxx</td>
                        <td>x,x,x,x (array)</td>
                    </tr>
                    <tr>
                        <td>flat<footnote>ab ECMAScript 2019</footnote></td>
                        <td>&#187;entschachtelt&#171; mehrfach verschachtelte Arrays</td>
                        <td>
                            <code>[1, 2, [3, 4]].flat()</code>
                        </td>
                        <td>abcd</td>
                        <td>1,2,3,4 (array)</td>
                    </tr>
                    <tr>
                        <td>includes<footnote>ab ECMAScript 2016</footnote></td>
                        <td>Prüft, ob ein Element im Array vorkommt</td>
                        <td>a.includes('x')</td>
                        <td>abcd</td>
                        <td>false (boolean)</td>
                    </tr>
                    <tr>
                        <td>indexOf</td>
                        <td>Ermittelt die Position (index) eines Elements im Array</td>
                        <td>
                            <code>a.indexOf('c')</code>
                        </td>
                        <td>abcd</td>
                        <td>2 (number)</td>
                    </tr>
                    <tr>
                        <td>lastIndexOf</td>
                        <td>Ermittelt die Position (index) eines Elements im Array (vom Ende her)</td>
                        <td>
                            <code>a.lastIndexOf('c')</code>
                        </td>
                        <td>abcd</td>
                        <td>2 (number)</td>
                    </tr>
                    <tr>
                        <td>split</td>
                        <td>Zerlegt einen String anhand eines Separators in ein Array.</td>
                        <td>
                            <code>('a-b-c-d').split('-')</code>
                        </td>
                        <td/>
                        <td>a,b,c,d (array)</td>
                    </tr>
                    <tr>
                        <td>join</td>
                        <td>Verbindet alle Elemente eines Arrays zu einem String</td>
                        <td>
                            <code>a.join('==')</code>
                        </td>
                        <td>abcd</td>
                        <td>a==b==c==d (string)</td>
                    </tr>
                    <tr>
                        <td>toString</td>
                        <td>wie <code>join</code>, verwendet aber das Komma als festen Separator.</td>
                        <td>
                            <code>a.toString()</code>
                        </td>
                        <td>abcd</td>
                        <td>a,b,c,d (string)</td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Was gibt folgender Code in der JavaScript-Konsole des Browsers aus?</p>
                        <blockcode>let a = [1, 7, 17];
console.log(a[2]);</blockcode>
                    </question_text>
                    <answer><blank>17</blank></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was gibt folgender Code in der JavaScript-Konsole des Browsers aus?</p>
                        <blockcode>let a = [1, 7, 17];
console.log(a[2]);</blockcode>
                    </question_text>
                    <answer correct="correct">17</answer>
                    <answer>7</answer>
                    <answer>1</answer>
                    <answer>[2, 14, 34]</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Ausdrücke geben den String 'S' zurück?</p>
                    </question_text>
                    <answer correct="correct">'JavaScript'.substr(4, 1)</answer>
                    <answer>'JavaScript'.substr(1, 4)</answer>
                    <answer correct="correct">'s'.toUpperCase();</answer>
                    <answer>['a', 'b', 'c', 'd']['JavaScript'.indexOf('S')];</answer>
                    <answer>'JavaScript'.charAt(5);</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche der folgenden Ausdrücke geben den String 'J' zurück?</p>
                    </question_text>
                    <answer correct="correct">'JavaScript'.substr(0, 1)</answer>
                    <answer>'JavaScript'.substr(1, 0)</answer>
                    <answer>'J'.low();</answer>
                    <answer correct="correct">['H', 'I', 'J',
                        'K']['JavaScript'.indexOf('v')];</answer>
                    <answer>'JavaScript'.charAt(1);</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche der folgenden Ausdrücke ergeben <i>'c'</i>?</p>
                    </question_text>
                    <answer correct="correct">
                        <p>'chris'.substr(0, 1)</p>
                    </answer>
                    <answer>
                        <p>'chris'.substr(1, 0)</p>
                    </answer>
                    <answer>
                        <p>['a', 'b', 'c', 'd']['chris'.indexOf('c') + 1];</p>
                    </answer>
                    <answer correct="correct">
                        <p>['a', 'b', 'c', 'd']['chris'.indexOf('c') + 2];</p>
                    </answer>
                    <answer correct="correct">
                        <p>'chris'.charAt(0);</p>
                    </answer>
                    <answer>
                        <p>'chris'.charAt(1);</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Kekse backen mit Arrays</name>
                <content>
                    <figure width="70%">
                        <img src="images/photos/cookies.jpg"/>
                        <figcaption>Haferflocken-Kekse</figcaption>
                    </figure>
                    <p>Sie wollen ein digitales Rezeptbuch schreiben, und die Zutaten für das jeweilige Rezept stellen Sie in einem Array zur Verfügung.</p>
                    <step>Legen Sie für das erste Rezept &#x2014; Haferflocken-Kekse &#x2014; ein Array mit den folgenden Zutaten an: <blockcode>
                        70 ml Rapsöl
                        1 getrenntes Ei
                        100 g Zucker
                        1 TL Backpulver
                    </blockcode>
                    </step>
                    <step>Da in der Liste das Mehl fehlt, müssen Sie 1 EL Mehl noch nachträglich ergänzen.</step>
                    <step>Beim Durchlesen der Liste fällt auf, dass die wohl wichtigste Zutat ebenfalls fehlt. Fügen Sie noch 100g Haferflocken an die erste Position in die Zutatenliste ein.</step>
                    <step>Für Kekse ist es eigentlich besser, Butter statt Öl zu verwenden. Tauschen Sie das Öl in der Liste dementsprechend gegen 75 g Butter aus.</step>
                    <step>Wandeln Sie das Array nun in einen String um und speichern Sie diesen in einer Variablen. Dabei sollen die Zutaten als Liste ausgegeben werden.</step>
                    <step>
                        <p>Und damit die Rezeptspielerei nicht total sinnlos war, bekommen Sie natürlich noch die Anleitung von uns dazu. Speichern Sie auch diese in einer Variable und geben Sie das komplette Rezept in der Konsole aus.</p>
                        <p><b>Anleitung</b>:</p>
                        <blockquote>
                            <p>Schmelzen Sie die Butter in einer Pfanne, geben Sie die Haferflocken dazu und vermischen Sie alles gut miteinander.</p>
                            <p>Nehmen Sie die Masse danach vom Herd und lassen Sie sie etwas auskühlen. Nun schlagen Sie das Eiweiß mit Zucker steif und rühren Eigelb, Backpulver und Mehl unter. Vermengen Sie nun die Masse mit den abgekühlten Haferflocken.</p>
                            <p>Setzen Sie kleine Teighäufchen auf ein Backblech. Die Häufchen sollten nicht zu groß sein, da der Teig beim Backen etwas auseinanderläuft. Im vorgeheizten Backofen bei 170 °C 15 Minuten backen.</p>
                        </blockquote>
                    </step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/15/solutions/cookies.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Die Kurzstreckenfahrt, oder: Wenn das nötige Kleingeld fehlt</name>
                <content>
                    <p>Nach dem Backen wollen Sie ein bisschen Bus fahren. Sie selbst befinden sich in Nürnberg in der Nähe der Haltestelle <i>Nordostbahnhof</i>. Ihre Freunde, die Sie und Ihre Kekse schon freudig erwarten, wohnen bei der Haltestelle <i>Martha-Maria-Krkhs.</i> Da Sie aber nur ein Kurzstrecken-Ticket lösen wollen, müssen Sie den Rest der Strecke laufen. Deswegen benötigen Sie die Haltestellen-Liste (<a href="#haltestellen"/>) nur bis zur letzten Haltestelle mit weißem Punkt (<i>Hubertusstr.</i>). </p>
                    <p><b>Hinweis</b>: Für diese Übung bietet es sich an, mit <code>slice</code> und <code>indexOf</code> zu arbeiten. </p>
                    <figure width="50%" id="haltestellen">
                        <img src="images/array_uebung_haltestellen.png"/>
                        <figcaption>Auszug der Haltestellen der Line 46 in Nürnberg</figcaption>
                    </figure>
                    <step>Erstellen Sie ein Array mit den Haltestellen der Linie 46: <blockcode numbered="numbered" src="accompanying_files/15/exercises/short_trip.js"/>
                    </step>
                    <step>Finden Sie die Position der gewünschten Zielhaltestelle <i>Hubertusstr.</i> heraus. </step>
                    <step>Entfernen Sie alle Haltestellen nach <i>Hubertusstr.</i> aus dem Array.</step>
                    <step>Schreiben Sie eine Funktion, die Ihnen nach Übergabe einer beliebigen Zielhaltestelle ein Array mit allen Haltestellen ab <i>Nordostbahnhof</i> bis zur Zielhaltestelle zurückgibt.</step>
                    <step>Erweitern Sie die Funktion, sodass Sie auch die Starthaltestelle übergeben können.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/15/solutions/short_trip_solution.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Unser allerbestes Jahr</name>
                <content>
                    <p>Das Buch <i>Unser allerbestes Jahr</i> (Originaltitel: <i>The Film Club</i>) von <i>David Gilmour</i> handelt von einem Vater, der seinem Sohn das Leben anhand von Filmen erklärt. Filme aller Art und Genres spielen eine Rolle und ergeben eine bunte, aber faszinierende Liste. Ein Filmfan &#x2014; in diesem Fall Christin &#x2014; hat angefangen, die Filme in chronologischer Reihenfolge zu notieren, und möchte die bisher vorliegende Liste nun alphabetisch sortieren.</p>
                    <p>Die vollständige Liste finden Sie mehrfach im Internet, zum Beispiel unter <a href="http://cyberangel-creativity.blogspot.de/2010/07/unser-allerbestes-jahr-filmeliste.html">Cyberangel's Blog</a>.</p>
                    <step>Speichern Sie die Filme in ein Array und geben Sie es alphabetisch sortiert über die Konsole aus. <blockcode numbered="numbered" src="accompanying_files/15/exercises/the_film_club.js"/>
                    </step>
                    <step>Fügen Sie die einzelnen Elemente des Arrays in einem String zusammen und geben Sie diese zeilenweise in der Konsole aus.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/15/solutions/the_film_club.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Alte Listen</name>
                <content>
                    <p>NerdWorld stellt Ihnen eine neue Aufgabe: Die Mitarbeiter haben Produkte früher in Excel-Listen verwaltet. Zu Migrationszwecken haben die Mitarbeiter sie nun als CSV-Dateien (comma separated values) exportiert. Damit sind dann alle Elemente in einer Liste durch Kommas getrennt.</p>
                    <blockcode numbered="numbered" src="accompanying_files/15/exercises/csv_lists.js"/>
                    <p>Schreiben Sie eine Funktion <code>handleCsv</code>, die einen übergebenen CSV-String in ein Array splittet und alphabetisch sortiert. Loggen Sie das fertig verarbeitete Array als Liste (pro Produkt eine Zeile) in die Konsole.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/15/solutions/csv_lists.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="higher_order_functions">
            <lesson_name>Auf zu Höherem mit map, reduce, &#8230;</lesson_name>
            <topics>
                <li>was <i>Higher Order Funktionen sind,</i>.</li>
                <li>wie diese Ihnen den Umgang mit Arrays erleichtern.</li>
                <li>was es mit <i>Callbacks</i> auf sich hat.</li>
            </topics>
            <h1>Funktionen als Parameter</h1>
            <p>Vielleicht haben Sie gehört, dass JavaScript eine objektorientierte Sprache ist. Vielleicht haben Sie aber auch gehört, dass JS eine funktionale Sprache ist. Möglicherweise hat ein Kollege JS aber auch schon mal abfällig als prozedural oder strukturiert bezeichnet. Was stimmt denn nun?</p>
            <p>Alle haben recht! Programmiersprachen lassen sich oft einem sogenannten <keyword>Paradigma</keyword> (Weltanschauung) zuordnen, wie z.&#x202F;B. <i>funktional</i> oder <i>objektorientiert</i>. Bei JS handelt es sich aber um eine sogenannte <keyword>Multiparadigmen-Sprache</keyword>. Das bedeutet, dass JS Elemente aus verschiedenen dieser Paradigmen verwendet. Prozedurale/strukturelle Elemente haben Sie bereits kennengelernt, z.&#x202F;B. Verzweigungen mit <code>if</code>. Mit der Objektorientierung werden Sie sich in einem späteren Band noch beschäftigen. An dieser Stelle möchten wir Ihnen einige <b>funktionale</b> Elemente von JS näherbringen.</p>
            <p>Von seinen funktionalen Vorbildern (z.&#x202F;B. der Programmiersprache <i>Scheme</i>) hat JS die Besonderheit geerbt, dass Funktionen einfach Werte sind. Genauso, wie Sie eine Zahl einer Variable zuordnen können, können Sie das auch mit Funktionen tun.</p>
            <blockcode numbered="numbered">
let price = 3;
let add = (a, b) =&gt; a + b;
            </blockcode>
            <p>Wenn Sie nach dem Typ der Variable fragen, erhalten Sie die entsprechende Antwort:</p>
            <blockcode numbered="numbered">
typeof price; // =&gt; number
typeof add;   // =&gt; function
            </blockcode>
            <p>Die funktionale Programmierung spricht von sogenannten <keyword>first-class citizens</keyword> (Bürger erster Klasse) oder <keyword>first class functions</keyword>. Damit ist gemeint, dass die Sprache Funktionen genauso behandelt wie andere Werte. Sie können sie mit Variablen referenzieren, und Sie können sie sogar als Argumente übergeben. Seltsamerweise können Sie genau das für Björns neusten Geniestreich nutzen.</p>
            <hint src="images/hint/bjoern.png">
                <p>Tanja &#x2014; unsere Marketingexpertin &#x2014; hatte neulich ein Problem: Einer der Chat-Teilnehmer war mehr als unfreundlich zu ihr. Ich möchte das jetzt hier aber nicht genauer ausführen. </p>
                <p>Selbstverständlich hab' ich mich mittlerweile persönlich darum gekümmert. Sie hätte den Vorfall aber gerne gleich einem der Admins gemeldet, der gerade online war. Leider hatte sie in der beachtlichen Liste keinen gefunden. </p>
                <p>Deswegen wünschen wir uns für die Zukunft, dass die Admins erstens mit dem Zusatz &#187;<i>(Admin)</i>&#171; hinter dem Namen kenntlich gemacht werden und zweitens ganz oben in der Liste stehen. Um den ersten Punkt kümmere ich mich selbst. Ich trag' das einfach in die Namen mit ein. Sie müssten die Liste dann aber noch so sortieren, dass die Admins immer oben stehen.</p>
            </hint>
            <p>Zum Glück kann die <code>sort</code>-Funktion genau das leisten. Vorher möchten wir Ihnen aber noch eine einfachere Problemstellung zeigen. Versuchen Sie doch mal, ein Array mit Zahlen zu sortieren.</p>
            <blockcode>
[16, 10, 2, 12, 1].sort();
            </blockcode>
            <p>Wünschen würden Sie sich vermutlich:</p>
            <blockcode>
[1, 2, 10, 12, 16]
            </blockcode>
            <p>Sie erhalten aber:</p>
            <blockcode>
[1, 10, 12, 16, 2]
            </blockcode>
            <p>Was ist hier schiefgelaufen?</p>
            <p>Die <code>sort</code>-Funktion führt standardmäßig eine sogenannte <keyword>lexikographische</keyword> Sortierung durch. Dabei behandelt sie Zahlen genauso wie Strings. Die Zahl <i>10</i> wird als kleiner als die <i>2</i> betrachtet, da <i>10</i> mit der Ziffer <i>1</i> beginnt. Erst wenn <code>sort</code> die erste Ziffer verglichen hat, nimmt sie sich die zweite vor. Deswegen ist <i>12</i> durchaus kleiner als <i>16</i>, aber lexikographisch betrachtet auch <i>10</i> kleiner als <i>2</i>.</p>
            <p>Zum Glück lässt sich das Verhalten von <code>sort</code> beeinflussen. Sie können der Funktion mitteilen, welchen von zwei Werten sie als kleiner und welchen sie als größer erachten soll. Dazu benötigen Sie eine weitere Funktion, die zwei Parameter entgegennimmt und diese miteinander vergleicht.</p>
            <p><code>sort</code> erwartet von der Vergleichsfunktion, dass sie: </p>
            <ul>
                <li><b>0</b> zurückgibt, falls a und b gleich sind</li>
                <li><b>eine positive Zahl</b> zurückgibt, falls a größer als b ist</li>
                <li><b>eine negative Zahl</b> zurückgibt, falls a kleiner als b ist</li>
            </ul>
            <p>Sie erreichen das bei Zahlen z.&#x202F;B. einfach dadurch, dass sie <code>b</code> von <code>a</code> subtrahieren.</p>
            <blockcode numbered="numbered">
let compareNumerical = (a, b) =&gt; a - b;

[16, 10, 2, 12, 1].sort(compareNumerical); // =&gt; [1, 2, 10, 12, 16]
            </blockcode>
            <p>Prinzipiell können Sie die Funktion auch direkt definieren, ohne sie vorher einer Variable zuzuweisen.</p>
            <blockcode>
[16, 10, 2, 12, 1].sort((a, b) =&gt; a - b); // =&gt; [1, 2, 10, 12, 16]
            </blockcode>
            <p>In vielen Fällen ist der Code jedoch besser lesbar, wenn Sie die Funktion vorher einer Variablen zuweisen. Durch den zusätzlichen Variablennamen <i>compareNumerical</i> kann ein Wartungsprogrammierer die ursprüngliche Absicht (numerischer Vergleich) leichter nachvollziehen.</p>
            <hint>
                <h3>Ein Blick hinter die Kulissen von sort</h3>
                <p>Die Arbeit, die <code>sort</code> eigenständig erledigt, lässt sich anhand des Beispiel-Arrays <code>[16, 10, 2, 12, 1]</code> genauer erläutern.</p>
                <p><code>compareNumerical</code> nimmt sich jeweils zwei Werte und vergleicht sie miteinander. Übergeben Sie die ersten zwei Zahlen aus dem Beispiel-Array:</p>
                <blockcode>
let compareNumerical = (16, 10) =&gt; 16 - 10;
                </blockcode>
                <p><code>16 - 10</code> ergibt <code>6</code>, also eine positive Zahl. Dadurch weiß die Funktion <code>sort</code>, dass sie die beiden Zahlen vertauschen muss. Stellen Sie sich vor, für den Moment würde das Array so aussehen: <code>[10, 16, 2, 12, 1]</code>.</p>
                <p>Die Funktion arbeitet sich von vorne nach hinten durch. Sie vertauscht die betreffenden Zahlen, wenn die Subtraktion ein positives Ergebnis liefert. Ist das Ergebnis dagegen negativ, bleiben die Zahlen stehen. Dann würden diese Schritte folgen:</p>
                <p>10, 2, 16, 12, 1<br/>10, 2, 12, 16, 1<br/>10, 2, 12, 1, 16</p>
                <p>Die <code>16</code> ist nach hinten gewandert. Das Ergebnis ist noch nicht befriedigend und die Funktion fängt von vorne an.</p>
                <p>2, 10, 12, 1, 16<br/>2, 10, 1, 12, 16</p>
                <p>Noch ein Durchlauf:</p>
                <p>2, 1, 10, 12, 16</p>
                <p>Und schließlich:</p>
                <p>1, 2, 10, 12, 16</p>
                <p>Dieser Sortieralgorithmus heißt <i>Bubblesort</i>. Das ist immer noch eine starke Vereinfachung der tatsächlichen Vorgehensweise. In Wirklichkeit verwendet <code>sort</code> Varianten der Algorithmen Quicksort, Introsort, Mergesort, Selectionsort, Minsort und Sortierung durch AVL-Bäume &#x2014; abhängig von der JavaScript-Engine und den Datentypen der zu sortierenden Werte. Eine ausführliche Erläuterung würde leider den Rahmen dieser Class sprengen.</p>
                <p><b>Schon gewusst?</b></p>
                <p>Je nachdem, mit welcher Engine Sie ihren JavaScript-Code ausführen, akzeptiert
                    <code>sort()</code> verschiedene Vergleichsfunktionen. Verwenden Sie die
                    SpiderMonkey Engine, die vom Firefox Webbrowser verwendet wird, dann kann Ihre
                    Vergleichsfunktion auch <code>true</code> oder <code>false</code> statt
                    <code>-1, 0, 1</code> zurückgeben. Die SpiderMonkey Engine konvertiert die Werte
                    <code>true</code> und <code>false</code> dann implizit in <code>1</code> oder
                    <code>-1</code>.<br/>Bei der V8 Engine, welche von Chromium Browsern und Node.js
                    verwendet wird, geht das nur bis zur Version 7. Alle neueren Versionen benötigen
                    zwangsläufig die Rückgabewerte <code>-1, 0, 1</code>. Ansonsten verweigert
                    <code>sort()</code> seine Arbeit.</p>
            </hint>
            <p>Zurück zu NerdWorld. Um Björn glücklich zu machen und Tanja vor weiteren Belästigungen zu schützen, benötigen Sie für <code>sort</code> ein anderes Kriterium &#x2014; d.&#x202F;h. eine andere Vergleichsfunktion. Diese neue Vergleichsfunktion muss die Namen der Chat-Teilnehmer miteinander vergleichen können und Adminstratoren stets als &#187;kleiner&#171; kennzeichnen. Die kleinsten Werte stehen nach einer Sortierung ganz oben, am Anfang der sortierten Liste.</p>
            <p>Als Erstes benötigen Sie eine Funktion, die prüft, ob es sich bei dem Chat-Teilnehmer um einen Admin handelt. Da wir Björns Idee hier nicht in Frage stellen wollen, bedeutet das, dass sich Admins durch den Zusatz <i>(Admin)</i> kennzeichnen. Mit der Funktion <i>isAdmin</i> können Sie das prüfen:</p>
            <blockcode>let isAdmin = name =&gt; name.endsWith('(Admin)');</blockcode>
            <p>Als Nächstes benötigen Sie die Vergleichsfunktion, nennen wir sie einfach <code>compareChatParticipants</code>.</p>
            <blockcode numbered="numbered">
let compareChatParticipants = (a, b) =&gt; {
    if (isAdmin(a)) return -1;
    if (isAdmin(b)) return 1;
};
            </blockcode>
            <p>Damit gibt die Funktion <code>-1</code> zurück, falls der erste Parameter den <i>(Admin)</i>-Zusatz enthält. <code>sort</code> interpretiert das als &#187;der erste Parameter ist der kleinere&#171;. Enthält stattdessen der zweite Parameter den Zusatz, ist der Rückgabewert <code>1</code>. Das bedeutet für <code>sort</code>: &#187;Der zweite Parameter enthält den kleineren Wert.&#171; Ihnen fehlt nur noch der Fall, dass beide Chat-Teilnehmer keine Admins sind. Dafür können Sie auf den Standard-String-Vergleich zurückgreifen.</p>
            <blockcode numbered="numbered">
let compareChatParticipants = (a, b) =&gt; {
    if (isAdmin(a)) return -1;
    if (isAdmin(b)) return 1;

    return a > b ? 1 : -1
};
            </blockcode>
            <p>Wenn Sie nun <code>sort</code> mit der neuen Funktion parametrisieren, zeigt sich das gewünschte Verhalten:</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/sort.js"/>
            <h3>Ausgabe</h3>
            <blockcode>
                Ladislaus (Admin)
                Friedlinde
                Herbert
                Oswine
                Tusnelda
            </blockcode>
            <p>Bei der folgenden Aufgabe können Sie das Sortieren ein wenig üben &#x2014; keine Sorge, das macht mehr Spaß, als das Wohnzimmer aufzuräumen &#8230; </p>
            <exercise>
                <name>Stadt, Land, Fluss</name>
                <content>
                    <p>Bei dem bekannten deutschen Quiz-Spiel &#187;Stadt, Land, Fluss&#171; müssen die Spieler zu bestimmten Kategorien Wörter finden, die mit einem bestimmten Buchstaben beginnen. Jeder schreibt die Wörter für sich alleine auf. Sobald einer der Spieler für jede Kategorie ein Wort gefunden hat, ruft er &#187;Stop&#171; und alle müssen das Aufschreiben einstellen. Dann wird verglichen. Mehrfach gefundene Wörter werden gestrichen, alle anderen erhalten je nach Spielregel und Variante Punkte.</p>
                    <p>Bei einer Variante des Spiels ist zusätzlich die Wortlänge ausschlaggebend. Das längste Wort bringt dabei die meisten Punkte. Natürlich möchte niemand tatsächlich die Buchstaben der Wörter zählen. Dafür gibt es schließlich JS.</p>
                    <p>Schreiben Sie eine Funktion, die Wörter einer Kategorie nach Länge sortiert. Das längste Wort soll dabei vorne stehen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/city_country_river.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/city_country_river.js"/>
                </answer>
            </exercise>
            <h1>Funktionen, die auf Funktionen stehen</h1>
            <p>Funktionen wie <code>sort</code>, deren Parameter selbst wieder Funktionen sind (oder sein können), heißen <keyword>Higher-Order-Funktionen</keyword> &#x2014; Funktionen höherer Ordnung. Viel mehr Fachvokabular aus dem Bereich der <i>Funktionalen Programmierung</i> wollen wir Ihnen an dieser Stelle nicht zumuten. Vielleicht möchten Sie gerne noch weitere solche Begriffe kennenlernen &#x2014; zum Beispiel um Ihre Kollegen zu beeindrucken oder beim nächsten Familientreffen zu glänzen. Für den Fall müssen wir Ihnen einfach den grandiosen Talk von <i>Bodil Stoke</i> empfehlen <a href="https://vimeo.com/68331937">What Every Hipster Should Know About Functional Programming</a>. Darin erfahren Sie dann, z.&#x202F;B. was applikative Funktoren sind.</p>
            <p>Zurück zur Erde. Higher-Order-Funktionen sind nützlich &#x2014; ja, wirklich! Ganz ehrlich. Vielleicht können wir Sie in den folgenden Abschnitten davon überzeugen. </p>
            <h1>Arrays im Wandel mit map</h1>
            <p>Erinnern Sie sich an die &#187;extrem sinnvolle Sicherheitsrichtlinie&#171;, Passwörter aus den Namen der Mitarbeiter zu erzeugen?</p>
            <p>Das Prinzip hat prima funktioniert, aber es ist dummerweise davon auszugehen, dass NerdWorld mehr als nur einen Mitarbeiter hat. </p>
            <p>Da ein anständiger Programmierer auch an den richtigen Stellen faul ist, ist es keine Option, die Funktion <code>passwordFor</code> manuell für jeden Mitarbeiter aufzurufen. Hier kommt die Higher-Order-Funktion <code>map</code> ins Spiel.</p>
            <p>Mittels <code>map</code> (dt: abbilden) können Sie ein komplettes Array transformieren. Die Funktion <code>map</code> benötigt ein Ausgangs-Array und eine Funktion als Argument. Sie erzeugt ein Ergebnis-Array, indem sie jedes einzelne Element des Ausgangs-Arrays mithilfe der angegebenen Funktion transformiert und im Ergebnis-Array wieder auffängt. Falls sich das ein wenig abstrakt anhört, hilft Ihnen vielleicht das folgende Beispiel:</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/map.js"/>
            <p>Würde Ihnen die Funktion <code>map</code> nicht zur Verfügung stehen, dafür aber jede Menge übereifrige Programmierer, könnten diese stattdessen so etwas schreiben:</p>
            <blockcode numbered="numbered">let employees = ['Fritzi', 'Heribert', 'Berta', 'Friedlinde', 'Tusnelda', 'Oswine', 'Ladislaus'];

let passwords = [];

passwords.push(passwordFor(employees[0]));
passwords.push(passwordFor(employees[1]));
passwords.push(passwordFor(employees[2]));
...
passwords.push(passwordFor(employees[6]));            </blockcode>
            <p>Wie Sie sehen, waren sogar wir zu faul, alle Zeilen aufzuschreiben. So zu programmieren ist Verschwendung von Zeit und Hirnleistung &#x2014; Sie riskieren dabei sogar noch, Konzentrations- oder Copy-Paste-Fehler einzuschmuggeln.</p>
            <hint>
                <p>Verwenden Sie <code>map</code>, wenn Sie alle Elemente eines Arrays transformieren möchten.</p>
            </hint>
            <exercise>
                <name>Lückentext zu map</name>
                <content>
                    <p>Wir wollen Sie bei der ersten Übung zu <code>map</code> nicht gleich ins kalte Wasser werfen. Stattdessen haben wir einen kleinen Lückentext vorbereitet, bei dem Sie nur wenig ergänzen müssen. Ersetzen Sie die Kommentare <code>/* ??? */</code> durch den richtigen Code, um das angegebene Ergebnis zu erzielen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/koans_map.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/koans_map.js"/>
                </answer>
            </exercise>
            <exercise id="der_transformierte_ladislaus4">
                <name>Der transformierte Ladislaus, Teil 4</name>
                <content>
                    <p>Passen Sie die Funktion <code>transformName</code> aus <a href="#der_transformierte_ladislaus3"/> so an, dass sie beliebig viele Vornamen (als Array) verwerten kann.</p>
                    <h3>Beispielaufruf</h3>
                    <blockcode>transformName(['Ladislaus', 'Coolio', 'Barry'], 'Jones');
// =&gt; 'L. C. B. Jones'</blockcode>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/ladislaus.js"/>
                </answer>
            </exercise>
            <h1>Mehr über Higher-Order-Funktionen und Callbacks</h1>
            <p>Schauen Sie sich noch mal das folgende, einfache Beispiel an:</p>
            <blockcode>let double = n =&gt; 2 * n;
[1, 2, 3].map(double); // =&gt; [2, 4, 6]</blockcode>
            <p>Den Begriff<keyword> Higher-Order Function</keyword> haben Sie bereits kennengelernt. Im Beispiel ist <code>map</code> eine Higher-Order-Funktion, weil sie <code>double</code> (selbst eine Funktion) als Parameter entgegennimmt. Was ist nun <code>double</code>? Zunächst ist <code>double</code> einfach nur eine Funktion &#x2014; oder besser gesagt, eine Variable, in der eine Funktion<footnote>oder noch genauer, ein <keyword>Funktionsausdruck</keyword> (<keyword>function expression</keyword>) statt einer klassischen Funktion.</footnote> gespeichert ist. Wenn Sie <code>double</code> aber als Argument an <code>map</code> übergeben, spricht man von einer sogenannten <keyword>Callback-Function</keyword> &#x2014; oder kurz: einem <keyword>Callback</keyword>, einem Rückruf. Es heißt Rückruf, weil <code>map</code> Ihre Funktion tatsächlich &#187;zurückruft&#171;. Sie rufen Ihre Funktion <code>double</code> nicht selbst auf, sondern übergeben <code>map</code> die Funktion als Ganzes, d.&#x202F;h. die Funktionsdefinition, und <code>map</code> ruft dann wiederum Ihre Funktion auf (ruft zurück), so als ob Sie folgende Aufrufe programmiert hätten:</p>
            <blockcode>double(1); // =&gt; 2
double(2); // =&gt; 4
double(3); // =&gt; 6</blockcode>
            <figure width="35%">
                <img src="images/highorder_and_callback.png"/>
            </figure>
            <p>Wenn Sie die Callback-Funktion vorher nicht in einer Variable speichern, spricht man außerdem von einer <keyword>anonymen Funktion</keyword>:</p>
            <blockcode>[1, 2, 3].map(n =&gt; 2 * n); // =&gt; [2, 4, 6]</blockcode>
            <p>Hier im Beispiel ist <code>n =&gt; 2 * n</code> (gesprochen: <i>n nach zwei n</i>) eine anonyme Funktion.</p>
            <h1>Nur sehen, was man sehen will, mit filter</h1>
            <hint src="images/hint/bjoern.png">
                <p>Wir haben festgestellt, dass unsere Kunden gerne Produktlisten ausdrucken, um sie ihren Freunden zu zeigen. Damit diese Listen etwas besser strukturiert sind, möchten wir sie wie ein Stichwortverzeichnis in einem Buch aufbauen. Das heißt, zuerst wird der Buchstabe als Überschrift gelistet und darunter alle Produkte, die mit diesem Buchstaben beginnen. Bis wann können Sie das umsetzen?</p>
            </hint>
            <p>Björn fragt Sie wohl schon gar nicht mehr, ob Sie das können, sondern nur noch bis wann. Sehen Sie es als Kompliment, er scheint mittlerweile großes Vertrauen in Ihre Fähigkeiten zu haben. Tja, nur wie gehen Sie das am besten an?</p>
            <p>Schreiben Sie zunächst eine Funktion, die einen Buchstaben und die Produkte als Argumente bekommt. Zurückgeben muss sie alle Produkte, die mit diesem Buchstaben beginnen. Folgendes Funktionsgerüst könnte helfen:</p>
            <blockcode>
let productsStartingWith = (letter, products) =&gt; ...
            </blockcode>
            <p>Jetzt hilft Ihnen die Funktion <code>filter</code> weiter. Genau wie <code>map</code> können Sie <code>filter</code> auf Arrays aufrufen, und <code>filter</code> betrachtet jedes Element des Arrays einzeln. Ebenfalls genau wie bei <code>map</code> können Sie <code>filter</code> eine Funktion als Argument übergeben, die <code>filter</code> für jedes Element einzeln ausführt. An der Stelle enden aber die Gemeinsamkeiten. <code>filter</code> erwartet eine Funktion mit booleschem Rückgabewert &#x2014; also eine <b>Bedingung</b>.</p>
            <blockcode numbered="numbered">
let productsStartingWith =
    (letter, products) =&gt; products.filter(
                    product =&gt; ...
        );
            </blockcode>
            <p>Stellt sich nur noch die Frage: Wie lautet die Bedingung? Da Sie alle Elemente (d.&#x202F;h. Produkte) suchen, die mit einem bestimmten Buchstaben beginnen, können Sie schreiben:</p>
            <blockcode>
product.startsWith(letter)
            </blockcode>
            <p>Hier noch mal in zusammengebauter Form:</p>
            <blockcode numbered="numbered">
let productsStartingWith =
    (letter, products) =&gt; products.filter(
        product =&gt; product.startsWith(letter)
);
            </blockcode>
            <p>Probieren Sie die neue Funktion aus! Natürlich können wir hier im Beispiel nur einen kleinen Teil der Produktliste verwenden. Das sollte aber genügen, um das Prinzip zu erkennen.</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/filter.js"/>
            <p>Sie erhalten folgende Ausgabe:</p>
            <blockcode>['Marvel Comics Lightweight Infinity Scarf', 'Meh Hoodie', 'Magnetic Accelerator Cannon']</blockcode>
            <h1>Jeder ist mal dran mit forEach</h1>
            <p>Um die gesamte Produktliste zu erhalten, müssen Sie das Spielchen für alle Buchstaben wiederholen &#x2014; oder zumindest für alle relevanten.</p>
            <blockcode numbered="numbered">
                console.log(productsStartingWith('A', products));
                console.log(productsStartingWith('B', products));
                console.log(productsStartingWith('C', products));
                ...
                console.log(productsStartingWith('Z', products));
            </blockcode>
            <p>Damit Sie die Funktion nicht für jeden Buchstaben einzeln aufrufen müssen, wie im letzten Listing angedeutet, gibt es die Funktion <code>forEach</code> für Arrays. <code>forEach</code> kann <b>für alle</b> Elemente (wie der Name schon sagt) eine bestimmte Funktion aufrufen. Wenn die Elemente die Buchstaben des Alphabets sind, haben Sie es schon fast geschafft!</p>
            <p>Dazu zerlegen Sie zunächst den String <code>'ABCDEF&#8230;Z'</code> noch mittels <code>split('')</code> in ein Array aus Einzelbuchstaben <code>['A', 'B', 'C',
                    'D', 'E', 'F', &#8230; 'Z']</code>. Dadurch, dass Sie den leeren String <code>''</code> als Trennzeichen verwenden, erhalten Sie jeden Buchstaben als einzelnes Element. Danach können Sie auf dem Ergebnis-Array <code>forEach</code> aufrufen.</p>
            <blockcode numbered="numbered">
                'ABCDEGMO'.split('').forEach(letter =&gt; {
                 ...
                });</blockcode>
            <p>Tatsächlich müssten Sie im Grunde alle Buchstaben von A-Z in den String reinschreiben. Um das Beispiel kleinzuhalten, benutzen wir aber nur ein paar wenige: <code>ABCDEGMO</code>. Die Funktion, die Sie <code>forEach</code> übergeben, erhält einen Buchstaben als Argument, den hier der Parameter <code>letter</code> auffängt. Innerhalb dieser Funktion rufen Sie wie gehabt</p>
            <blockcode>console.log(productsStartingWith(letter, products).join('\n'));</blockcode>
            <p>auf. Dabei ersetzt der gerade aktuelle Buchstabe beim jeweiligen Aufruf durch <code>forEach</code> die Variable <code>letter</code>.</p>
            <blockcode numbered="numbered">
                'ABCDEGMO'.split('').forEach(letter =&gt; {
                  console.log(productsStartingWith(letter, products).join('\n'));
                });
            </blockcode>
            <p>Eine kleine Überschrift mit dem Buchstaben rundet die Ausgabe ab:</p>
            <blockcode numbered="numbered">
                'ABCDEGMO'.split('').forEach(letter =&gt; {
                  console.log('\n==== ' + letter + ' ====');
                  console.log(productsStartingWith(letter, products).join('\n'));
                });
            </blockcode>
            <p>Hier noch mal im Ganzen:</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/forEach.js"/>
            <p>Nach dem Ausführen erhalten Sie folgende Ausgabe:</p>
            <blockcode>==== A ====
Aquafarm: Aquaponics Fish Garden

==== B ====
Backpack of Holding

==== C ====
Cassette Adapter Bluetooth
Crosley Collegiate Portable USB Turntable

==== D ====
Dual Heated Travel Mug

==== E ====
Electronic Butterfly in a Jar

==== G ====
Game of Thrones Wax Seal Coasters

==== M ====
Marvel Comics Lightweight Infinity Scarf
Meh Hoodie
Magnetic Accelerator Cannon

==== O ====
Ollie - The App Controlled Robot               </blockcode>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>&#187;Also früher, da mussten wir noch &#8230;&#171;</h3>
                <p>Bevor Sprachversion ES5.1 <code>forEach</code> einführte, mussten Entwickler zum Durchlaufen von Arrays klassische <code>for</code>-Schleifen verwenden. Klassische <code>for</code>-Schleifen haben eine Zählvariable, die sie verändern. Betrachten Sie folgendes Beispiel mit aktuellem <code>forEach</code>:</p>
                <blockcode>
                    'ABCDEGMO'.split('').forEach(letter =&gt; console.log(letter));
                </blockcode>
                <p>Wenn Sie statt des <code>forEach</code> eine klassische <code>for</code>-Schleife einsetzen, sieht der Code wie folgt aus:</p>
                <blockcode numbered="numbered">
let letters = 'ABCDEGMO'.split('');

for (let i = 0; i &lt; letters.length; i += 1) {
    console.log(letters[i]);
}
                </blockcode>
                <p>Sie benötigen das <code>for</code> aber nicht nur zum Durchlaufen von Arrays. Es hat eine breite Menge von Anwendungsfällen. Zum Glück gibt es für die meisten dieser Fälle mittlerweile bessere Möglichkeiten, wie z.&#x202F;B. die Higher-Order-Funktionen dieser Lektion oder die in <a href="#rekursion"/> vorgestellte Rekursion.</p>
            </hint>
            <hint src="images/hint/owl.png">
                <h3>Achtung Nebeneffekt</h3>
                <p>Seien Sie mit <code>forEach</code> ein wenig vorsichtig. Obwohl sie eine Higher-Order-Funktion ist, hat sie keinen Rückgabewert wie alle anderen hier vorgestellten Higher-Order-Funktionen. D.&#x202F;h. Sie verwenden <code>forEach</code> wegen dem Nebeneffekt der übergebenden Funktion. Das macht die Funktionsweise schwerer nachvollziehbar und sollte normalerweise vermieden werden. Bevorzugen Sie die anderen Alternativen, wie <code>map</code> oder <code>filter</code>, wenn es Ihnen möglich ist.</p>
            </hint>
            <exercise>
                <name>Friedemann Friese</name>
                <content>
                    <p>Ferdinand Füller mag Brettspiele von Friedemann Friese. Filtern Sie nur die Spiele aus der angegebenen Liste der Brettspiele heraus, die mit dem Buchstaben <i>F</i> beginnen.</p>
                    <p>Ersetzen Sie dazu die Kommentare <code>/* ??? */</code> durch den richtigen Code.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/friedemann_friese.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/friedemann_friese.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Lückentext zu filter</name>
                <content>
                    <p>Auch zu <code>filter</code> haben wir einen kleinen Lückentext vorbereitet. Ersetzen Sie wieder die Kommentare <code>/* ??? */</code> durch den richtigen Code, um das angegebene Ergebnis zu erzielen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/koans_filter.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/koans_filter.js"/>
                </answer>
            </exercise>
            <h1>Aufs Wesentliche reduzieren mit reduce</h1>
            <hint src="images/hint/bjoern.png">
                <p>Bevor wir das neue Bestellsystem aktivieren können, muss der Warenkorb noch den Gesamtpreis der Produkte im Warenkorb &#x2014; der sogenannten Cart Items &#x2014; anzeigen.</p>
            </hint>
            <p>Das ist nicht weiter schwierig &#x2014; die Produktpreise liegen bereits als Array vor. </p>
            <blockcode>let cartItemPrices = [9.99, 19.99, 5.99];</blockcode>
            <p>Um die Preise aufzusummieren, benötigen Sie zwei Dinge:</p>
            <ul>
                <li>Die Higher-Order-Funktion <code>reduce</code></li>
                <li>die <i>Addition</i> als Funktion (statt nur den Operator)</li>
            </ul>
            <p><code>reduce</code> reduziert ein Array auf einen einzelnen Wert. Dazu benötigt Sie eine Funktion als Argument, die angibt, wie aus jeweils zwei Werten einer wird.</p>
            <p>Definieren Sie dafür zunächst eine eigene Funktion <code>add</code>:</p>
            <blockcode>
let add = (a, b) =&gt; a + b;
            </blockcode>
            <p>Diese Funktion beschreibt einfach die Addition von zwei Zahlen. Wenn Sie die Funktion auf alle Elemente im Array anwenden, erhalten Sie die Gesamtsumme aller Einzelwerte über das Array.</p>
            <p>Übergeben Sie nun die Funktion <code>add</code> als Argument an <code>reduce</code>.</p>
            <blockcode numbered="numbered">
'use strict';

let add = (a, b) =&gt; a + b;

let cartItemPrices = [9.99, 19.99, 5.99];
let sum = cartItemPrices.reduce(add);

console.log(sum); // =&gt; 35.97
            </blockcode>
            <p>Das ist wirklich schon alles. Sie können <code>reduce</code> eine beliebige Funktion übergeben, solange diese zwei Werte zu einem zusammenschrumpft.</p>
            <p>Schauen wir uns mal an, wie <code>reduce</code> hinter den Kulissen arbeitet (etwas vereinfacht). Die Higher-Order-Funktion nimmt sich den ersten Wert aus dem Array (<code>9.99</code>) und setzt ihn als ersten Parameter in <code>add</code> ein. Als zweiten Parameter verwendet sie das zweite Element aus dem Array (<code>19.99</code>).</p>
            <p><code>reduce</code> ruft dann die übergebene Funktion <code>add</code> auf und merkt sich das Ergebnis.</p>
            <blockcode>add(9.99, 19.99) // =&gt; 29.98</blockcode>
            <p>Nun erfolgt ein weiterer Aufruf von <code>add</code>. Das gemerkte Ergebnis des letzten Aufrufs ist nun das neue erste Argument. Für den zweiten Parameter von <code>add</code> nimmt sich <code>reduce</code> das dritte Element aus dem Array (<code>5.99</code>).</p>
            <blockcode>add(29.98, 5.99) // =&gt; 35.97</blockcode>
            <p>Damit ist die Berechnung abgeschlossen und <code>reduce</code> gibt <code>35.97</code> zurück. Gäbe es weitere Elemente im Array, würde die Funktion genauso weiter verfahren:</p>
            <blockcode>
add(29.98, /* 4.Element */) // =&gt; Sum elements 1 to 4

add(/*Sum 1 to 4 */, /* 5.Element*/) // =&gt; Sum 1 to 5

add(/*Sum 1 to 5 */, /* 6.Element*/) // =&gt; Sum 1 to 6

// etc.
            </blockcode>
            <p>Als kleine Verbesserung können Sie nun die Summe noch als eigene Funktion auslagern:</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/reduce.js"/>
            <h3>Reduzierte Sonderlinge</h3>
            <p>Es gibt zwei recht spezielle Fälle bei der reduce-Funktion. Was denken Sie passiert, wenn das zu reduzierende Array nur ein Element enthält?</p>
            <h3>Beispiel</h3>
            <blockcode>
let add = (a, b) =&gt; a + b;
let sum = arr =&gt; arr.reduce(add);
sum([3]); // =&gt; 3
            </blockcode>
            <p><code>reduce</code> kann die übergebene Funktion (z.&#x202F;B. <code>add</code>) nicht aufrufen. Dazu fehlt ein Parameter! Also gibt <code>reduce</code> einfach das eine enthaltene Element zurück. Der Rückgabewert aus dem Beispiel ist schlicht <code>3</code>. Das macht tatsächlich Sinn. Die Summe über &#187;alle&#171; Zahlen des Arrays <code>[3]</code> ist die Zahl <code>3</code>. Reduktion erfolgreich!</p>
            <p>Noch problematischer wird das Ganze, wenn das Array gar komplett leer ist.</p>
            <h3>Beispiel</h3>
            <blockcode>
let add = (a, b) =&gt; a + b;
let sum = arr =&gt; arr.reduce(add);
sum([]); // =&gt; ???
            </blockcode>
            <p>Statt einen Rückgabewert, wirft dieser Code einen Fehler:</p>
            <blockcode>
[].reduce(add);
^

TypeError: Reduce of empty array with no initial value
            </blockcode>
            <p>Praktischerweise erklärt die Fehlermeldung bereits die Lösung des Problems. Sie können <code>reduce</code> als zweiten Parameter einen <keyword>Initialwert</keyword> übergeben. Bei der klassischen Summenbildung sollte das die Zahl <code>0</code> sein.</p>
            <blockcode>
let add = (a, b) =&gt; a + b;
let sum = arr =&gt; arr.reduce(add, 0);
sum([]) // =&gt; 0
            </blockcode>
            <p>Der erste Aufruf, der an <code>reduce</code> übergebenen Funktion (also im Beispiel <code>add</code>), verwendet den Initialwert als ersten Parameter &#x2014; und falls das Array leer ist, gibt <code>reduce</code> den Wert einfach wieder zurück.</p>
            <h3>Beispiel</h3>
            <blockcode>
let add = (a, b) =&gt; a + b;
let sumTo10 = arr =&gt; arr.reduce(add, 10);
sumTo10([3, 4]); // =&gt; 17
sumTo10([3]);    // =&gt; 13
sumTo10([]);     // =&gt; 10
            </blockcode>
            <hint src="images/hint/owl.png">
                <h3>Coole Typen im Initialwert</h3>
                <p>Interessant ist auch, dass der Initialwert einen beliebigen Datentyp haben kann. Er sollte natürlich zur übergebenen Funktion passen. Tatsächlich sind aber auch problemlos <code>[]</code> oder <code>{}</code> möglich &#x2014; damit sind Sie in der Lage mit <code>reduce</code> sogar neue Objekte oder Arrays zu bauen. Objekte lernen Sie allerdings erst in <a href="#objects"/> kennen.</p>
            </hint>
            <h1>Manche mögens heiß mit some</h1>
            <hint src="images/hint/bjoern.png">
                <p>In unserem Shop gibt es ein paar wenige Filme, die erst ab 18 freigegeben sind. Für diesen recht seltenen Fall benötigen wir eine Überprüfung des Warenkorbs. Sollte sich ein solches Produkt im Warenkorb befinden, muss ein gesondertes Verfahren zur Überprüfung des Alters des Bestellers gestartet werden.</p>
            </hint>
            <p>Diese neue Anforderung stellt tatsächlich kein nennenswertes Problem dar, denn auch hier hat JS etwas für uns vorbereitet: Die Funktion <code>some</code>.</p>
            <p>Die Funktion <code>some</code> gibt <code>true</code> zurück, falls <b>mindestens eins</b> der Elemente einer angegebenen Bedingung entsprechen.</p>
            <p>Im Warenkorb befinden sich Produkte mit verschiedenen Eigenschaften. Um das abzubilden, gibt es ein Array für die Produktbezeichnungen, eines für die Preise und auch eines für die jeweilige Altersfreigabe der Produkte.</p>
            <blockcode>
let ageRating = [6, 6, 6, 0, 12, 16, 0, 18, 6, 0, 6];
            </blockcode>
            <p>Nun benötigen Sie eine passende Bedingung. Sie müssen prüfen, ob eine der Altersfreigaben <code>18</code> ist. Die Bedingung für ein gegebenes <code>ageRating</code> würde lauten:</p>
            <blockcode>ageRating === 18</blockcode>
            <p>Da die Altersfreigaben aber in einem Array gespeichert sind, könnten Sie das erste Element folgendermaßen überprüfen: </p>
            <blockcode numbered="numbered">const AGE_OF_MAJORITY = 18;
let ageRating = [6, 6, 6, 0, 12, 16, 0, 18, 6, 0, 6];

ageRating[0] === AGE_OF_MAJORITY; // =&gt; false            </blockcode>
            <p>In diesem Fall ist der Rückgabewert <code>false</code> und es müssten für diesen Film keine weiteren Maßnahmen getroffen werden. Allerdings reicht die Prüfung des ersten Elements nicht aus. Tatsächlich befindet sich im Warenkorb bereits ein FSK18-Film. Sie müssen also das gesamte Array überprüfen.</p>
            <p>Die Funktion <code>some</code> nimmt Ihnen freundlicherweise die mühselige Arbeit ab, alle Werte des Arrays einzeln zu überprüfen. <code>some</code> wendet die Bedingung auf alle Elemente des Arrays an.</p>
            <p>Entweder übergeben Sie die Bedingung direkt an <code>some</code> oder Sie referenzieren die Bedingung mit einer Variable, die Sie anschließend an <code>some</code> übergeben.</p>
            <figure>
                <blockcode numbered="numbered">const AGE_OF_MAJORITY = 18;
let ageRatings = [6, 6, 6, 0, 12, 16, 0, 18, 6, 0, 6];

let isForAdultsOnly = ageRating =&gt; ageRating === AGE_OF_MAJORITY;
ageRatings.some(isForAdultsOnly); // =&gt; true            </blockcode>
                <figcaption>some mit einer Variable als Parameter</figcaption>
            </figure>
            <figure>
                <blockcode numbered="numbered">const AGE_OF_MAJORITY = 18;
let ageRatings = [6, 6, 6, 0, 12, 16, 0, 18, 6, 0, 6];

ageRatings.some(ageRating =&gt; ageRating === AGE_OF_MAJORITY); // =&gt; true </blockcode>
                <figcaption>some mit literaler Function-Expression als Parameter</figcaption>
            </figure>
            <p>Sie sind noch nicht ganz fertig! Das Ziel ist, dass der Shop im Fall eines enthaltenen &#187;Erst-ab-18&#171;-Artikels (Rückgabewert: <code>true</code>) auf die nötige Altersverifizierung hinweist.</p>
            <p>Fragen Sie nach mit <code>if</code>:</p>
            <blockcode numbered="numbered" src="accompanying_files/16/examples/some.js"/>
            <h1>Referenz</h1>
            <p>Zum Nachschlagen finden Sie hier eine Übersicht der Higher-Order-Funktionen von Array. In den Beispielen beziehen wir uns auf die Variable <code>a</code>, die wie folgt belegt ist:</p>
            <blockcode>let a = [1, 2, 3, 4, 5]</blockcode>
            <ul>
                <li>
                    <p><b>sort</b><br/> Sortiert alle Elemente anhand einer compare-Funktion.</p>
                    <b>Beispiel</b>
                    <blockcode>a.sort((x, y) =&gt; y - x); // =&gt; [5, 4, 3, 2, 1]</blockcode>
                </li>
                <li>
                    <p><b>map</b><br/> Bildet ein Array auf ein anderes ab &#x2014; transformiert dabei jedes einzelne Element anhand des Callbacks.<br/></p>
                    <b>Beispiel</b>
                    <blockcode>a.map(x =&gt; x * x) // =&gt; [1, 4, 9, 16, 25]</blockcode>
                </li>
                <li>
                    <p><b>flatMap<footnote>ab ECMAScript 2019</footnote></b><br/> Bildet ein Array auf ein anderes ab &#x2014; transformiert dabei jedes einzelne Element anhand des Callbacks. Zusätzlich &#187;entschachtelt&#171; flatMap das Array um eine Ebene.</p>
                    <b>Beispiel</b>
                    <blockcode>a.flatMap(x =&gt; [x * 2, x * x]) // =&gt; [2, 1, 4, 4, 6, 9, 8, 16, 10, 25]</blockcode>
                </li>
                <li>
                    <p><b>filter</b><br/> Filtert Elemente anhand eines angegebenen Kriteriums (Bedingung) </p>
                    <b>Beispiel</b>
                    <blockcode>
let even = x =&gt; x % 2 === 0;
a.filter(even) // =&gt; [2, 4]
                    </blockcode>
                </li>
                <li>
                    <p><b>reduce</b><br/> Reduziert das Array auf einen einzigen Wert, indem es jeweils zwei Elemente durch den angegeben Callback reduziert. Optional besteht die Möglichkeit, als zweiten Parameter einen Initialwert anzugeben.</p>
                    <b>Beispiel</b>
                    <blockcode>
a.reduce((x, y) =&gt; x + y);
// =&gt; 1 + 2 + 3 + 4 + 5 =&gt; 15

a.reduce((x, y) =&gt; x + y, 10);
// =&gt; 10 + 1 + 2 + 3 + 4 + 5 =&gt; 25
                    </blockcode>
                </li>
                <li>
                    <p><b>reduceRight</b><br/> wie reduce, aber von rechts. Auch hier kann ein optionaler Initialwert angegeben werden.</p>
                    <b>Beispiel</b>
                    <blockcode>
a.reduceRight((x, y) =&gt; x - y);
// =&gt; 5 - 4 - 3 - 2 - 1 =&gt; -5
                    </blockcode>
                </li>
                <li>
                    <p><b>every</b><br/> Gibt <code>true</code> zurück, falls <b>alle</b> Elemente der angegebenen Bedingung entsprechen.</p>
                    <b>Beispiel</b>
                    <blockcode>
let even = x =&gt; x % 2 === 0;
a.every(even); // =&gt; false
                    </blockcode>
                </li>
                <li>
                    <p><b>some</b><br/> Gibt <code>true</code> zurück, falls <b>einige</b> Elemente der angegebenen Bedingung entsprechen.</p>
                    <b>Beispiel</b>
                    <blockcode>
let even = x =&gt; x % 2 === 0;
a.some(even); // =&gt; true
                    </blockcode>
                </li>
                <li>
                    <p><b>forEach</b><br/> Führt den Callback für jedes Element aus. </p>
                    <b>Beispiel</b>
                    <blockcode>
a.forEach(x =&gt; console.log(x));
                    </blockcode>
                </li>
                <li>
                    <p><b>find</b><br/> Findet das erste Element, das die angegebene Bedingung erfüllt. </p>
                    <b>Beispiel</b>
                    <blockcode>
let even = x =&gt; x % 2 === 0;
a.find(even) // =&gt; 2
                    </blockcode>
                </li>
                <li>
                    <p><b>findIndex</b><br/> Gibt den Index des ersten Elements zurück, das die angegebene Bedingung erfüllt.</p>
                    <b>Beispiel</b>
                    <blockcode>
let even = x =&gt; x % 2 === 0;
a.findIndex(even) // =&gt; 1
                    </blockcode>
                </li>
            </ul>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die Lücke, um die geforderte Ausgabe zu erhalten.</p>
                        <p><code>console.log([14, 10, 19].</code><blank>some</blank><code>(el =&gt; el % 2 === 0));</code></p>
                        <p>Ausgabe: true</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die Lücke, um die geforderte Ausgabe zu erhalten.</p>
                        <p><code>console.log([3, 16, 27].</code><blank>every</blank><code>(el =&gt; el % 3 === 0));</code></p>
                        <p>Ausgabe: false</p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welche Higher-Order-Funktion, die auf JS-Arrays verfügbar ist, benötigen Sie, um herauszufinden, ob alle Elemente in einem Array einer bestimmten Bedingung genügen? Es soll nur <code>true</code> oder <code>false</code> zurückgegeben werden.</p>
                    </question_text>
                    <answer><blank>every</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Welche Higher-Order-Funktion, die auf JS-Arrays verfügbar ist, benötigen Sie, um herauszufinden, ob wenigstens ein Element in einem Array einer bestimmten Bedingung genügt? Es soll nur <code>true</code> oder <code>false</code> zurückgegeben werden.</p>
                    </question_text>
                    <answer><blank>some</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Für eine Reihe von Messwerten wird jeweils die Quadratwurzel benötigt. Berechnen Sie nur die Wurzeln von positiven Messwerten.</p>
                        <p><code>[-1, 49, 9, 25, -3, 9].</code><blank>filter</blank><code>(x =&gt; </code><blank>x &gt; 0</blank><code>).</code><blank>map</blank><code>(Math.sqrt)</code></p>
                        <p>Ergebnis: <code>[ 7, 3, 5, 3 ]</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Für eine Reihe von Messwerten wird jeweils das Quadrat benötigt. Verwerfen Sie Ergebnisse über 10.</p>
                        <p><code>[5, 3, 2, 5, 8, 1].</code><blank>map</blank><code>(x =&gt; x * x).</code><blank>filter</blank>(<blank>x =&gt; x &lt;=</blank><code> 10)</code></p>
                        <p>Ergebnis: <code>[ 9, 4, 1 ]</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Was liefert der folgende Ausdruck zurück?</p>
                        <blockcode>[1, 2].map(a =&gt; 3)</blockcode>
                    </question_text>
                    <answer><blank>[3, 3]</blank></answer>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Was liefert der folgende Ausdruck zurück?</p>
                        <blockcode type="NOT_DEFINED">[2, 3, 4].reduce((a, b) =&gt; a * b - 1)</blockcode>
                    </question_text>
                    <answer correct="correct"><blank>19</blank></answer>
                </question>
                <question reviewed="reviewed" public="public" type="fill_in_the_blanks">
                    <question_text>
                        <p>Was gibt folgender Code in der JavaScript-Konsole des Browsers aus?</p>
                        <blockcode type="NOT_DEFINED">console.log([14, 10, 20].every(el =&gt; el % 2 === 0));</blockcode>
                    </question_text>
                    <answer>Ausgabe: <blank>true</blank></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Anweisung liefert die Ausgabe: true?</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>console.log([14, 10, 19].some(el =&gt; el % 2 === 0));</code></p>
                    </answer>
                    <answer>
                        <p><code>console.log([14, 10, 19].every(el =&gt; el % 2 === 0));</code></p>
                    </answer>
                    <answer>
                        <p><code>console.log([14, 10, 19].any(el =&gt; el % 2 === 0));</code></p>
                    </answer>
                    <answer>
                        <p><code>console.log([14, 10, 19].all(el =&gt; el % 2 === 0));</code></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Was liefert der nachfolgende Ausdruck zurück?</p>
                        <blockcode type="NOT_DEFINED">[1].map(() =&gt; { 2 })</blockcode>
                    </question_text>
                    <answer>
                        <p>ein Array mit einem Element, das den Wert <i>1</i> hat</p>
                    </answer>
                    <answer>
                        <p>ein Array mit einem Element, das den Wert <i>2</i> hat</p>
                    </answer>
                    <answer correct="correct">
                        <p>ein Array mit einem Element, das den Wert <i>undefined</i> hat</p>
                    </answer>
                    <answer>
                        <p>ein leeres Array</p>
                    </answer>
                    <answer>
                        <p>einen nicht definierten Wert</p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Was liefert der Ausdruck <code>[5].map( () =&gt; 7 )</code> zurück? </p>
                    </question_text>
                    <answer>die Zahl 5</answer>
                    <answer>die Zahl 7</answer>
                    <answer>ein Array mit einem Element mit undefiniertem Wert</answer>
                    <answer>ein leeres Array</answer>
                    <answer>ein Array mit einem Element mit dem Wert 5</answer>
                    <answer correct="correct">ein Array mit einem Element mit dem Wert 7</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Ergänzen Sie den folgenden Code, um den Rückgabewert 24 zu erhalten.</p>
                        <blockcode>[1, 2, 3, 4].reduce(/* ??? */);</blockcode>
                        <p>Welches Codefragment ersetzt <i>/* ??? */</i> ? Wählen Sie alle Codefragmente aus, bei denen der Gesamtcode den richtigen Rückgabewert liefert.</p>
                    </question_text>
                    <answer>(prod, x) =&gt; prod * x, 0</answer>
                    <answer correct="correct">(prod, x) =&gt; prod * x, 1</answer>
                    <answer correct="correct">(prod, x) =&gt; prod * x</answer>
                    <answer>(x, prod) =&gt; prod * x, 0</answer>
                    <answer correct="correct">(x, prod) =&gt; prod * x, 1</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Higher-Order-Funktion, die auf JS-Arrays verfügbar ist, benötigen Sie, um herauszufinden, ob alle Elemente in einem Array einer bestimmten Bedingung genügen? Es soll nur <code>true</code> oder <code>false</code> zurückgegeben werden.</p>
                    </question_text>
                    <answer correct="correct">every</answer>
                    <answer>any</answer>
                    <answer>some</answer>
                    <answer>forEach</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Für eine Reihe von Messwerten wird jeweils die Quadratwurzel benötigt. Berechnen Sie nur die Wurzeln von positiven Messwerten.</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>[-1, 49, 9, 25, -3, 9].filter(x =&gt; x &gt; 0).map(Math.sqrt)</code></p>
                    </answer>
                    <answer>
                        <p><code>[-1, 49, 9, 25, -3, 9].filter(x =&gt; x &lt; 0).map(Math.sqrt)</code></p>
                    </answer>
                    <answer>
                        <p><code>[-1, 49, 9, 25, -3, 9].filter(x =&gt; x &gt;= 0).map(Math.sqrt)</code></p>
                    </answer>
                    <answer>
                        <p><code>[-1, 49, 9, 25, -3, 9].filter(x &gt; 0).map(Math.sqrt)</code></p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was liefert der folgende Ausdruck zurück?</p>
                        <blockcode>[1, 2].map(a =&gt; 3)</blockcode>
                    </question_text>
                    <answer correct="correct">[3, 3]</answer>
                    <answer>[1, 2, 3]</answer>
                    <answer>[3, 6]</answer>
                    <answer>[1, 2, true]</answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was liefert der folgende Ausdruck zurück?</p>
                        <blockcode type="NOT_DEFINED">[2, 3, 4].reduce((a, b) =&gt; a * b - 1)</blockcode>
                    </question_text>
                    <answer correct="correct">19</answer>
                    <answer>[5, 11]</answer>
                    <answer>5</answer>
                    <answer>11</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Lückentext zu Higher-Order-Funktionen</name>
                <content>
                    <p>Das ist garantiert der letzte Lückentext für diese Lektion. Ersetzen Sie wieder die Kommentare <code>/* ??? */</code> durch den richtigen Code, um das angegebene Ergebnis zu erzielen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/koans.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/koans.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Fröhliches Mixen mit Arrays &amp; Teil 1</name>
                <content>
                    <figure width="60%">
                        <img src="images/photos/cocktails.jpg"/>
                        <figcaption>
                            <a href="https://www.flickr.com/photos/dinnerseries/">Didriks / dinnerseries</a>
                            <a href="https://creativecommons.org/licenses/by/2.0/legalcode">(CC) Attribution</a>
                        </figcaption>
                    </figure>
                    <p>Nach so viel trockener Theorie haben Sie Durst. Sie öffnen Ihren Kühlschrank und sehen eine angebrochene Packung Maracujasaft, die dringend verbraucht werden muss. Mit Maracujasaft lassen sich tatsächlich tolle Cocktails zaubern, und gerade letztens hat Ihnen ein Freund den <i>Honolulu Flip</i> empfohlen. Jetzt wäre es perfekt, wenn in dem besagten Cocktail Maracujasaft enthalten wäre&#8230;</p>
                    <step>Schreiben Sie eine Funktion, <code>hasIngredient</code>, die <code>true</code> zurückgibt, wenn eine angegebene Zutat in einer Rezeptliste vorhanden ist. Rufen Sie Ihre Funktion mit <i>Maracujsasaft</i> und <i>Honolulu Flip</i> auf.<blockcode numbered="numbered" src="accompanying_files/16/exercises/cocktails1.1.js"/>
                    </step>
                    <step>
                        <p>So richtig sinnvoll ist unsere Funktion noch nicht. Viel hilfreicher wäre es, wenn wir eine Funktion hätten, die anhand unserer vorhandenen Zutaten herausfindet, ob wir den Cocktail auch tatsächlich machen können. Dafür benötigen Sie die komplette Liste Ihrer vorhandenen Zutaten (<code>ingredientsFromMyBar</code>). Sie möchten wissen, ob Sie <b>alle</b> Zutaten vorrätig haben, die Sie zum Mixen des Cocktails benötigen.</p>
                        <p><b>Hinweis:</b> Verwenden Sie die Array-Funktion <code>every</code>. Auf <code>hasIngredient</code> aus der letzten Teilübung können Sie zurückgreifen.</p>
                        <blockcode numbered="numbered" src="accompanying_files/16/exercises/cocktails1.2.js"/>
                    </step>
                </content>
                <answer>
                    <h3>Schritt 1</h3>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/cocktails1.1.js"/>
                    <h3>Schritt 2</h3>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/cocktails1.2.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Komm mir doch mal quer</name>
                <content>
                    <p>Schreiben Sie eine Funktion <code>digitSum</code>, die die Quersumme einer übergebenen Zahl zurückgibt. <b>Hinweis</b>: Die Quersumme ist die Summe aller Ziffern einer Zahl. <br/><b>Tipp:</b> Verwenden Sie <code>split('')</code>.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/digitSum.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Völlig verquer</name>
                <content>
                    <p>Na, haben wir den Mathematiker in Ihnen geweckt? Verwenden Sie die Funktion <code>digitSum</code> aus der letzten Übung. Nutzen Sie die Funktion dieses Mal, um gleich ein ganzes Array von Zahlen nach ihrer Quersumme zu sortieren.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/sort_by_digitSum.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/sort_by_digitSum.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Friedemann Friese, Teil 2</name>
                <content>
                    <p>Ferdinand Füller ist nun noch wählerischer geworden. Filtern Sie nur die Spiele aus der angegebenen Liste heraus, bei denen alle Wörter mit dem Buchstaben <i>F</i> beginnen und die aus mindestens zwei Wörten bestehen &#x2014; also z.&#x202F;B. <i>Fearsome Floors</i>, aber nicht <i>Fauna</i> oder <i>Black Friday</i>.</p>
                    <blockcode numbered="numbered" src="accompanying_files/16/exercises/friedemann_friese2.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/16/solutions/friedemann_friese2.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="strict_and_scopes">
            <lesson_name>&#8250;Strict&#8249; behandelte Variablen und ihre Scopes</lesson_name>
            <topics>
                <li>was ein <i>Scope</i> ist.</li>
                <li>wie Scopes das Verhalten von Variablen beeinflussen.</li>
                <li>wie <code>"use strict"</code> Ihnen hilft ungewollte Seiteneffekte zu verhindern.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Jede Konstante hat ihre Variablen.</p>
                </blockquote>
                <figcaption>Unbekannt</figcaption>
            </figure>
            <p>Mit dem ersten Band dieses Kurses sind Sie nun bald durch! <b>Herzlichen Glückwunsch!</b></p>
            <p>Zugegebenermaßen haben wir Ihnen noch ein paar &#187;düstere&#171; Geheimnisse über Variablen verschwiegen. Wir glauben: Jetzt sind Sie bereit für die ganze Wahrheit!</p>
            <h1>Die ganze verheerende Wahrheit über Scopes</h1>
            <h2>let</h2>
            <p>Ein <keyword>Scope</keyword> ist ein Bereich, innerhalb dessen eine Variable Gültigkeit besitzt. Typischerweise definieren Sie Variablen mit <code>let</code>. Dadurch besitzt eine Variable <keyword>local scope</keyword> &#x2014; d.&#x202F;h. sie ist in genau dem <keyword>lokalen Bereich</keyword> gültig, in dem Sie sie definiert haben. Ein Bereich ist dabei ein Code-Block, der durch geschweifte Klammern abgegrenzt ist, z.&#x202F;B. ein Zweig einer if-Anweisung oder auch ein ganzer Funktionsrumpf.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/hurry_up.js"/>
            <p>Außerdem ist die Variable erst ab ihrer Deklaration gültig und nicht vorher, wie das folgende Beispiel demonstriert.</p>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/function_x.js"/>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>&#187;Also früher, da mussten wir noch &#8230;&#171;</h3>
                <p>Variablen dürfen erst nach ihrer Initialisierung verwendet werden?</p>
                <p>Sie meinen, das klingt logisch &#x2014; früher war es nicht so. Das ältere Schlüsselwort <code>var</code> zieht Variablendeklarationen immer an den Anfang einer Funktion (sogenanntes <keyword>Hoisting</keyword>) und macht die Variablen in der kompletten Funktion verfügbar (<keyword>function scope</keyword>). Das war oft sehr verwirrend und führte in der Praxis zu allerhand Fehlern.</p>
            </hint>
            <p>Definieren Sie Variablen deswegen immer mit <code>let</code> und so lokal wie irgendwie möglich. Versuchen Sie, den Bereich einer Variable nur genau so groß zu halten, wie es nötig ist. Damit vermeiden Sie Konflikte, und der Bereich, in dem Sie (potenziell) nach Fehlern suchen, bleibt überschaubar.</p>
            <h2>const</h2>
            <p>Konstanten, die Sie mithilfe von <code>const</code> deklariert haben, sind übrigens auch im <i>local scope</i> gültig &#x2014; genau wie bei <code>let</code>. Deswegen können Sie <code>const</code> und <code>let</code> nahezu gleichermaßen verwenden, mit dem kleinen Unterschied, dass Konstanten eben <i>konstant</i> sind &#x2014; Sie ihnen also nach der Initialiserung keinen neuen Wert mehr zuweisen können. In den meisten Fällen ist das aber sogar vorteilhaft. Mehr dazu erfahren Sie gleich in <a href="#prefer_const"/>.</p>
            <h2 id="parameter_scopes">Parameter</h2>
            <p>Funktionsparameter verhalten sich wie Variablen, die Sie zu Beginn einer Funktion deklarieren. Damit sind sie in der ganzen Funktion verfügbar. Aus diesem Grund sollten Sie die Anzahl der Parameter kleinhalten (Martin 2008) &#x2014; idealerweise drei oder weniger. Außerdem sollten die Funktionen auch nicht zu lang sein &#x2014; als Daumenregel: maximal 10 Anweisungen, besser sind 5, noch besser ist eine.</p>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/function_x_everywhere_a.js"/>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <ul>
                    <li>Vermeiden Sie Funktionen mit mehr als 3 Parametern.</li>
                    <li>Beschränken Sie Funktionen auf maximal 10 Anweisungen.</li>
                </ul>
            </hint>
            <h2>Globale Variablen</h2>
            <p>Globale Variablen sind Variablen, die Sie außerhalb von Funktionen, auf oberster (globaler) Ebene definieren. Sie sind überall gültig.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/function_x_global_a.js"/>
            <p>Globale Variablen sollten Sie unbedingt vermeiden! Sie sind eine der häufigsten Fehlerursachen. Noch dazu sind solche Fehler schwer zu finden. Sie müssten in Ihrem kompletten Programm verfolgen, wann welche Variablen welche Werte haben. Es ist zum Glück nie wirklich nötig, auf globale Variablen zurückzugreifen.</p>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinie</h3>
                <p>Verwenden Sie keine globalen Variablen!</p>
            </hint>
            <p>Leider kann es leicht passieren, dass Sie aus Versehen eine globale Variable anlegen &#x2014; nämlich dann, wenn Sie ein <code>let</code> vergessen:</p>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/function_x_y.js"/>
            <p>Hier erzeugt Zeile 2 eine globale Variable, da das <code>let</code> fehlt. Dadurch ist sie überall verfügbar, sogar innerhalb anderer Funktionen. Wie Sie sich davor schützen können, erfahren Sie im nächsten Abschnitt.</p>
            <h1>Da bleibe ich strict!</h1>
            <p>Netscape legte anfangs großen Wert darauf, dass JS einsteigerfreundlich ist. Das führte leider zu einigen sehr fragwürdigen Designentscheidungen. So gibt es viele Fehler und Probleme, die JS einfach akzeptiert, statt eine Fehlermeldung zu werfen. Das erleichtert es einem Anfänger, erst einmal Code zum Laufen zu bekommen. Es verbirgt aber in größeren Anwendungen oft tieferliegende Probleme. Das kann dazu führen, dass Sie Stunden (oder Tage) damit verbringen, einen Fehler zu suchen, dessen Ursache sich an einer ganz anderen Stelle im Code befindet. </p>
            <p>Seit der JS-Sprachversion <i>ES5.1</i> gibt es ein Gegenmittel: den <b>strict mode</b>. Diesen Modus haben wir schon recht früh in dieser Class (siehe <a href="#strict_intro"/>) eingeführt, damit er Sie vor Fallen und Gefahren in JS schützt &#x2014; erfahrene Entwickler reden gerne von den Landminen in JS.</p>
            <p>Im <i>strict mode</i> erkennt JS viele potenzielle Probleme sofort und kennzeichnet sie als Fehler. JS ermahnt Sie sozusagen, Ihren Code &#187;sauber&#171; zu schreiben. Das kostet Sie anfangs ein wenig Zeit, spart Ihnen aber später stundenlange Fehlersuche. Hier ein Einzeiler als Beispiel:</p>
            <blockcode>price = 10;</blockcode>
            <p>Sehen Sie den Fehler? Das <code>let</code> fehlt. Eigentlich müsste es <code>let price = 10</code> heißen.</p>
            <p>Wie Sie schon wissen, starten Sie den <i>strict mode</i>, indem Sie am Anfang einer JS-Datei folgenden Code einfügen:</p>
            <blockcode>'use strict';</blockcode>
            <p>Sie haben es schon oft getan &#x2014; aber was genau ist das eigentlich?</p>
            <p>Stimmt, das ist tatsächlich einfach nur ein String. Genau darin besteht der Trick. Für einen älteren Browser (der den <i>strict mode</i> nicht kennt) ist das nur ein String-Literal. Eines, das nicht mal in einer Variable gespeichert wird. Damit ignoriert der Browser den Code, und bestehende Programme laufen einfach weiter. </p>
            <p>Ein Browser aber, der den <i>strict mode</i> kennt, versteht den String und schaltet den Modus um. Der folgende Code führt zu einer Fehlermeldung.</p>
            <blockcode>
'use strict';

price = 10;
            </blockcode>
            <p>Sie erhalten die Fehlermeldung &#187;<i>ReferenceError: assignment to undeclared variable price</i>&#171;. Die Meldung sagt aus, dass Sie einer noch nicht deklarierten Variable keinen Wert zuweisen dürfen. Der Strict-Mode verhindert zwar nicht, dass Sie globale Variablen angelegen können, aber zumindest kann es nicht mehr versehentlich passieren. </p>
            <p>Es gibt viele weitere Situationen, in denen Sie <code>'use strict';</code> vor großem
                Unheil bewahrt. Mehr dazu finden Sie auf der <a
                    href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
                    >MDN-Seite zum strict mode</a>.</p>
            <h1 id="prefer_const">In Zukunft konstant</h1>
            <p>Grundsätzlich ist Code immer dann schwierig zu verstehen und birgt hohes Fehlerpotenzial, wenn er viele &#187;bewegliche&#171; Teile hat. Damit ist gemeint, dass sich das Laufzeitverhalten vom statischen Code erheblich unterscheidet &#x2014; also, wenn Sie den Code erst ausführen müssen, um wirklich zu verstehen, was passiert. Bei komplett &#187;unbeweglichem&#171; Code passiert zur Laufzeit nichts, was Sie nicht schon vorher dem Quellcode entnehmen können. Es gibt keinerlei Nebenwirkungen (engl.: <keyword>side effects</keyword>). Das ist typischerweise eine Eigenschaft <keyword>funktionaler Sprachen</keyword>.</p>
            <p>JS ist keine <i>rein</i> funktionale Sprache, bietet aber viele funktionale Aspekte &#x2014; Dinge, die Sie schon kennen, z.&#x202F;B. Funktionen als Werte oder Array-Funktionen wie <code>map</code>, <code>reduce</code> &amp; <code>filter</code>. Um die beweglichen Teile zu reduzieren, ist es enorm hilfreich, auf globale Variablen zu verzichten und mit <code>let</code> zu arbeiten. </p>
            <p>Variablen sind aber grundsätzlich bewegliche Teile. Sie sehen einer Variablen nicht direkt an, wie sich ihre Belegung zur Laufzeit ändert. Sie müssen z.&#x202F;B. mittels <code>console.log</code> oder einem sogenannten <keyword>Debugger</keyword> verfolgen, welchen Wert welche Variable zu welchem Zeitpunkt hat, um den Programmablauf zu verstehen. <code>let</code> beschränkt den Scope und verkleinert damit den Bereich, den Sie auf einmal verstehen und im Fehlerfall untersuchen müssen.</p>
            <p>Der nächste Schritt ist, komplett auf Variablen zu verzichten. Verwenden Sie stattdessen Konstanten mit <code>const</code>. Schreiben Sie einfach beim nächsten Mal immer <code>const</code>, wenn Sie <code>let</code> benötigen. Sie werden sehen, dass das in vielen Fällen funktioniert und Sie nur in wenigen Fällen den Code leicht anpassen müssen.</p>
            <h3>Beispiel</h3>
            <p>Betrachten Sie noch mal <a href="#ladislaus2"/>. Bei der Übung ging es darum, einen Namen der Form &#187;<i>Ladislaus Coolio Barry Crazy Jones</i>&#171; in die Form &#187;<i>L. C. B. C. Jones</i>&#171; zu überführen &#x2014; d.&#x202F;h. die Vornamen auf Initialen zu verkürzen. Ein möglich Lösung könnte so aussehen:</p>
            <figure id="der_transformierte_ladislaus2_bad_solution">
                <blockcode numbered="numbered">'use strict';

let transform = fullName =&gt; {
  let nameParts = fullName.split(' ');
  let lastName = nameParts.slice(nameParts.length - 1);
  nameParts = nameParts.slice(0, nameParts.length - 1);

  return nameParts
    .map(firstName =&gt; firstName.charAt(0) + '.')
    .join(' ') + ' ' + lastName;
}

let aLongName = 'Ladislaus Coolio Barry Crazy Jones';
console.log(transform(aLongName));            </blockcode>
                <figcaption>Eine verbesserungsfähige Lösung des &#187;transformierten Ladislaus&#171;</figcaption>
            </figure>
            <p><a href="#der_transformierte_ladislaus2_bad_solution"/> stellt nicht unbedingt die beste Lösung dar. Erkennen Sie das Problem?</p>
            <p>Zeile 6 überschreibt die Variable <code>nameParts</code>. Dadurch lässt sich nur schwer nachvollziehen, welcher Wert zu welchem Zeitpunkt in der Variable gespeichert ist. Enthielte <code>nameParts</code> einen falschen Wert, ließe sich nicht daraus schließen, dass der Fehler in Zeile 6 sein muss. Es könnte genauso ein Folgefehler aus einer vorhergehenden Zeile sein. </p>
            <p>Zudem ist der Code irreführend &#x2014; <code>nameParts</code> enthält nach Zeile 6 nur die Vornamen als Namensbestandteile. Vorher war zusätzlich noch der Nachname enthalten. Das macht den Code schwer verständlich. Etwas besser ist die folgende Lösung:</p>
            <blockcode numbered="numbered">'use strict';

let transform = fullName =&gt; {
  let nameParts = fullName.split(' ');
  let positionOfLastName = nameParts.length - 1;
  let firstNames = nameParts.slice(0, positionOfLastName);
  let lastName = nameParts.slice(positionOfLastName);

  return firstNames
    .map(firstName =&gt; firstName.charAt(0) + '.')
    .join(' ') + ' ' + lastName;
};

let aLongName = 'Ladislaus Coolio Barry Crazy Jones';
console.log(transform(aLongName));            </blockcode>
            <p>Hier sind alle Informationen gezielt in Variablen gespeichert, deren Namen den Inhalt möglichst genau reflektieren. Es herrscht zu keinem Zeitpunk Unklarheit über die Inhalte, da keine Variable überschrieben wird und die Namen genauer gewählt sind. </p>
            <p>Bei der ersten Lösung könnten Sie die <code>let</code>-Anweisungen nicht durch <code>const</code> ersetzten, da Sie Konstanten nicht überschreiben dürfen. Bei der letzten Lösung ist das problemlos möglich:</p>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/nameParts_of_Ladislaus.js"/>
            <p>Die Konstanten sind sozusagen eine Versicherung, dass Sie nicht versehentlich Variablen überschreiben. Noch besser ist es, Funktionen statt Variablen oder Konstanten zu verwenden. Die Funktionen speichern Sie dabei natürlich auch wiederum in Konstanten:</p>
            <blockcode numbered="numbered" src="accompanying_files/17/examples/nameParts_of_Ladislaus2.js"/>
            <p>Das hat einen unschlagbaren Vorteil: Die einzelnen Konzepte (z.&#x202F;B. das Ermitteln eines Nachnamens) sind auch in anderen Kontexten wiederverwendbar &#x2014; d.&#x202F;h. unabhängig von der Funktion <code>transform</code>. Außerdem erleichtert es die Fehlersuche enorm. Sie können jetzt jede Funktion isoliert testen. Wenn sich beispielsweise ein Fehler in die Funktion <code>firstNames</code> eingeschlichen hätte, könnten Sie ausschließen, dass es sich um einen Folgefehler aus einer anderen Funktion handelt.</p>
            <p>Übrigens gewinnt dieser neue Stil mit zunehmender Verbreitung von ES 2015 gerade erheblich an Beliebtheit und findet sich des Öfteren in Programmierrichtlinien, z.&#x202F;B. bei <a href="https://github.com/airbnb/javascript">AirBnB</a>.</p>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlinien</h3>
                <ul>
                    <li>Vermeiden Sie Variablen (<code>let</code>) &#x2014; versuchen Sie stattdessen mit Konstanten (<code>const</code>) zu arbeiten.</li>
                    <li>Schreiben Sie Variablen- und Konstantenbezeichner in
                            camelCase.<br/><b>Ausnahme:</b> Konstanten, die der Konfiguration dienen
                        (z.&#x202F;B. <code>const STUNDEN_PRO_TAG = 24</code>), d.&#x202F;h. deren
                        Wert schon vor dem Start des Programms feststeht, schreiben Sie weiterhin im
                        SCREAMING_SNAKE_CASE.</li>
                </ul>
            </hint>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Was ist der Wert von &#187;total&#171;, nachdem dieses Codefragment ausgeführt wurde?</p>
                        <blockcode>let total = 10;
let f = () =&gt; {
  [3, 4, 3].forEach(el =&gt; { total += el; } );
};</blockcode>
                        <p>Ergebnis: <blank>10</blank></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Was ist der Wert von &#187;total&#171;, nachdem dieses Codefragment ausgeführt wurde?</p>
                        <blockcode>let total = 10;
let f = () =&gt; {
  [3, 4, 3].forEach(el =&gt; { total += el; } );
};</blockcode>
                    </question_text>
                    <answer correct="correct">10</answer>
                    <answer>13</answer>
                    <answer>17</answer>
                    <answer>20</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche Ausgabe erzeugt folgender Code? (Hinweis: Hier ist kein
                            <code>'use strict'</code> im Scope)</p>
                        <blockcode>let x = () =&gt; a = 3;
let y = () =&gt; a = 5;
let z = () =&gt; console.log(a);

x();
y();
z();                        </blockcode>
                    </question_text>
                    <answer>3</answer>
                    <answer>keine Ausgabe. Das Programm bricht mit einer Fehlermeldung ab.</answer>
                    <answer correct="correct">5</answer>
                    <answer>undefined</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Welche Ausgabe erzeugt folgender Code?</p>
                        <blockcode>'use strict';

let x = () =&gt; a = 3;
let y = () =&gt; a = 5;
let z = () =&gt; console.log(a);

x();
y();
z();                        </blockcode>
                    </question_text>
                    <answer>3</answer>
                    <answer correct="correct">keine Ausgabe. Das Programm bricht mit einer Fehlermeldung ab.</answer>
                    <answer>5</answer>
                    <answer>undefined</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Welche Ausgabe erzeugt folgender Code? (Hinweis: Hier ist kein
                            <code>'use strict'</code> im Scope)</p>
                        <blockcode>let x = () =&gt; a = 7;
let y = () =&gt; { let a = 5 };
let z = () =&gt; console.log(a);

x();
y();
z();                        </blockcode>
                    </question_text>
                    <answer correct="correct">7</answer>
                    <answer>keine Ausgabe. Das Programm bricht mit einer Fehlermeldung ab.</answer>
                    <answer>5</answer>
                    <answer>undefined</answer>
                </question>
            </questions>
        </lesson>
        <lesson id="rekursion">
            <lesson_name>Noch mal von vorne mit Rekursion</lesson_name>
            <topics>
                <li>was Rekursion ist.</li>
                <li>welche Besonderheiten es im Zusammenhang mit Rekursion zu beachten gibt.</li>
            </topics>
            <figure>
                <blockquote>
                    <p>Bei jedem Neubeginn sollte man bedenken, dass man seine Erfahrungen im geistigen Rucksack mitschleppt.</p>
                </blockquote>
                <figcaption>Prof. Dr. Hermann Simon</figcaption>
            </figure>
            <h1>Wiederholungen müssen nicht anstrengend sein</h1>
            <hint src="images/hint/bjoern.png">
                <p>Stephanie, unsere Produktmanagerin, beklagt sich ständig, dass die Eingabe neuer Produkte unpraktisch ist. Besonders an der Stelle, an der sie Produktpreise eingibt. Vertippt sie sich, bricht der Vorgang ab, und sie muss von vorne anfangen. Wäre es nicht möglich, die Eingabe erneut abzufragen, ohne dass sie jedesmal den Vorgang wiederholen muss?</p>
            </hint>
            <p>Tatsächlich würden Sie in der Praxis für derartige Eingaben eher Formulare verwenden. Aus didaktischen Gründen betrachten wir diese aber erst in einer späteren Class und arbeiten vorerst weiter mit Konsole und <keyword>prompt</keyword>.</p>
            <p>Betrachten Sie einen Auszug zur Eingabe eines Produktpreises:</p>
            <blockcode>const productPrice = Number(prompt('Please enter the product price.'));            </blockcode>
            <p>An dieser Stelle könnten verschiedene Fehler auftreten. Beispielsweise könnte Stephanie versehentlich ein Leerzeichen eintippen, oder ein anderer Mitarbeiter könnte schlimmstenfalls einen negativen Preis eingeben (das würde Stephanie natürlich nicht passieren). In letzterem Fall freuen sich vielleicht sogar die Kunden, und das Produkt wird zum Renner &#x2014; für das Unternehmen könnte das auf Dauer aber etwas ungeschickt sein&#8230;</p>
            <p>Idealerweise erkennt das Programm den Fehler und stellt die Frage erneut. Das Programm sollte die Frage nach dem Preis <b>so lange</b> wiederholen, bis die Eingabe passt.</p>
            <p>Packen Sie die Preisfrage dazu zunächst in eine Funktion:</p>
            <blockcode numbered="numbered">const getProductPrice = () =&gt;
  Number(prompt('Please insert the product price.'));

console.log('$' + productPrice());            </blockcode>
            <p>Die Funktion fragt natürlich auch nur ein einziges Mal nach dem Preis. Richtig wäre:</p>
            <blockquote>
                <p>&#187;Wiederhole die Frage so lange, bis die Antwort eine gültige Zahl ist.&#171;</p>
            </blockquote>
            <p>Die Funktion muss dazu herausfinden, ob die Eingabe eine Wiederholung erforderlich macht. Wie kann sie das herausfinden? Richtig &#x2014; mit einer Bedingung. Ergänzen Sie die Funktion um die folgende <code>if</code>-Anweisung:</p>
            <blockcode numbered="numbered">if (productPrice &lt; 0) {
  console.log('A negative price could be disastrous for your company\'s health.');
}            </blockcode>
            <p>Der Rumpf wird nur ausgewertet, wenn <code>productPrice</code> negativ ist. Hier der komplette Code:</p>
            <blockcode numbered="numbered">'use strict';

const getProductPrice = () =&gt; {
  const productPrice = Number(prompt('Please insert the product price.'));
  if (productPrice &lt; 0) {
    console.log('A negative price could be disastrous for your company\'s health.');
  }
  return productPrice;
};

console.log('$' + getProductPrice());            </blockcode>
            <p>Geben Sie nun <code>-12.95</code> ein, erhalten Sie die folgende Ausgabe:</p>
            <blockcode>A negative price could be disastrous for your company's health
$-12.95            </blockcode>
            <p>Sie erhalten zwar die Fehlermeldung, aber der Preis ist immer noch negativ. Die Wiederholung der Eingabe fehlt noch.</p>
            <p>Um die Eingabe zu wiederholen, müssen Sie lediglich die Funktion erneut aufrufen. Und natürlich nur dann, wenn die Eingabe negativ ist.</p>
            <blockcode numbered="numbered" src="accompanying_files/18/examples/product_price.js"/>
            <p>Nun können Sie so viele negative Zahlen eingeben, wie Sie möchten: Das Programm wird nicht müde, Sie geduldig immer wieder zu fragen &#x2014; bis Sie es schaffen, eine gültige positive Zahl einzugeben.</p>
            <h1>Sich selbst &#8230; aufrufen</h1>
            <p>So einfach es auch ist, dass sich eine Funktion selbst aufrufen kann, erscheint es doch zunächst ein wenig gewöhnungsbedürftig, oder? Stellen Sie sich vor, Sie könnten sich selbst klonen und dann jederzeit Arbeit an ihren Klon delegieren. Verrückt?</p>
            <p>Genau das können Funktionen. Dieses Prinzip hat eine lange Tradition und es steckt mehr dahinter, als es im ersten Moment scheint &#x2014; mehr dazu später. Programmierer bezeichnen das Prinzip übrigens als <keyword>Rekursion</keyword>.</p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Die Fähigkeit einer Funktion sich selbst aufzurufen nennt man <blank>Rekursion</blank>.</p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed"
                   >
                    <question_text>
                        <p>Wie nennt man die Fähigkeit einer Funktion, sich selbst aufzurufen?</p>
                    </question_text>
                    <answer correct="correct">Rekursion</answer>
                    <answer>Konstruktion</answer>
                    <answer>Reduktion</answer>
                    <answer>Substitution</answer>
                </question>
                <question type="multiple_choice" public="public">
                    <question_text>
                        <p>In welchen Situationen kann eine Funktion aufgerufen werden?</p>
                    </question_text>
                    <answer correct="correct">durch sich selbst</answer>
                    <answer correct="correct">durch eine andere Funktion</answer>
                    <answer correct="correct">in einem Programmblock</answer>
                    <answer correct="correct">als Bedingung einer if-Anweisung</answer>
                    <answer correct="correct">beim Definieren einer Variablen</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Reichweite &amp; Verbrauch, Teil 4</name>
                <content>
                    <p>Diese Anwender vertippen sich einfach ständig. Damit nun endlich die Beschwerdewellen ein Ende haben, sollten Sie vielleicht an der Bedienbarkeit des Kraftstoffrechners ein wenig feilen. Der Code stammt aus der Lösung von <a href="#reichweite_verbrauch3"/>: <i>Reichweite &amp; Verbrauch, Teil 3</i>:</p>
                    <blockcode src="accompanying_files/14/solutions/gasoline.js"/>
                    <p>Tatsächlich rechnet das Programm bei einer Fehleingabe stur weiter. Für Strecke und Benzinmenge machen aber auch nur positive Zahlen Sinn. Geben Sie dem Anwender also die Chance, bei einer Fehleingabe (z.&#x202F;B. nur Buchstaben) seine Eingabe zu wiederholen.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/18/solutions/gasoline.js"/>
                </answer>
            </exercise>
            <exercise id="guess_the_number">
                <name>Ich weiß eine Zahl, die du nicht weißt</name>
                <content>
                    <p>Programmieren Sie ein Ratespiel mit folgenden Regeln: JS &#187;denkt&#171; sich eine Zahl zwischen 1 und 10 aus, die der Benutzer erraten muss. Der Benutzer gibt seine Vermutung in einer Prompt-Box ein, und eine Alert-Box teilt ihm mit, ob er</p>
                    <ul>
                        <li>zu hoch geraten hat,</li>
                        <li>zu niedrig geraten hat,</li>
                        <li>oder ob die Zahl richtig ist. </li>
                    </ul>
                    <p>Errät der Benutzer die Zahl, so hat er gewonnen und das Spiel endet. Im anderen Fall fordert das Programm eine neue Schätzung an.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/18/solutions/guess_a_number.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Tapeten-Design mit Rekursion &#x2014; Teil 2</lesson_name>
            <topics>
                <li>wie Sie dank Rekursion zum Tapezierer werden.</li>
                <li>wie durch Rekursion aus wenig Code viel Ergebnis wird.</li>
            </topics>
            <h1>Im Zeichen der Linie</h1>
            <p>Heute warten Sie vergebens auf einen Anruf von Björn. Eigentlich ist das Telefon sogar ganz still. Kein Kunde will was. So nutzen Sie die Gunst der Stunde und geben sich ganz Ihrer kreativen Ader hin.</p>
            <p>Kennen Sie noch ASCII-Bildchen? Sie waren z.&#x202F;B. früher in Chat-Rooms sehr verbereitet.</p>
            <figure width="40%">
                <img src="images/ascii_art/ascii_sst.jpg"/>
                <figcaption>ASCII Art by <a href="http://www.ascii-art.surfhome.de">SSt</a></figcaption>
            </figure>
            <p>Im folgenden Abschnitt wenden Sie Rekursion an, um aus einer beliebigen Art und Anzahl an Zeichen ein Rechteck zu &#187;bauen&#171;. Da auch Rom nicht an einem Tag erbaut wurde, beginnen Sie mit einer Linie. Mehrere untereinander stehende Linien bilden später ein Rechteck. </p>
            <figure width="50%">
                <img src="images/ascii_art/wallpaper4.jpg"/>
                <figcaption>Zeichen-Rechteck</figcaption>
            </figure>
            <p>Zuerst schreiben Sie also die folgende &#x2014; zugegeben etwas unsinnige &#x2014; Funktion, die ein bestimmtes Zeichen zurückgibt. Das zurückgegebene Zeichen loggen Sie anschließend in die Konsole:</p>
            <blockcode numbered="numbered">const line = character =&gt; {
  return character;
};

console.log(line('*'));            </blockcode>
            <hint src="images/people/christin.jpg">
                <p>Mein persönlicher <b>Tipp</b>: Haben Sie keine Angst vor einer ersten unsinnigen Funktion. Denn falls es Ihnen wie mir geht, werden Sie merken, dass der nächste Schritt einfacher wird, sobald &#187;das böse weiße Papier&#171; erst einmal nicht mehr nur weiß ist.</p>
            </hint>
            <p>Diese Funktion gibt &#x2014; wie gewünscht &#x2014; ein einziges Zeichen aus. Für den nächsten Schritt benötigen Sie einen Parameter, der die Anzahl der Zeichen angibt. Da es sich um eine Linie handelt, können Sie sagen, die Anzahl der Zeichen ist die Länge (<code>length</code>) der Linie. Bei einer Länge von 0 können Sie als Linie einen leeren String zurückgeben:</p>
            <blockcode numbered="numbered">'use strict';

const line = (length, character) =&gt; {
  if (length === 0) return '';
  return character;
};

console.log(line(10, '*'));            </blockcode>
            <p>Was aber sollte die Funktion im anderen Fall (d.&#x202F;h. bei einer Länge größer als 0) tun? Mittels Rekursion können Sie so tun, als gäbe es die Linie bereits. Um beispielsweise eine Linie aus 10 Zeichen darzustellen, benötigen Sie eine Linie, die aus 9 Zeichen besteht, und ergänzen noch ein Zeichen: <code>line(9, character) + character</code>. Die 9 ist dabei nichts anderes als die aktuelle Länge - 1. Also können Sie auch schreiben <code>line(length - 1, character) + character</code>.</p>
            <blockcode numbered="numbered">'use strict';

const line = (length, character) =&gt; {
  if (length === 0) return '';
  return line(length - 1, character) + character;
};

console.log(line(10, '*'));</blockcode>
            <p>Die erste Hürde ist geschafft, Sie haben eine Linie programmiert. Als Belohnung dürfen Sie diese nicht nur behalten, sondern auch gerne ein bisschen mit Zeichen und Längen spielen.</p>
            <p>Mit etwas Refactoring lässt sich der Code noch straffen.</p>
            <blockcode numbered="numbered" src="accompanying_files/19/examples/line.js"/>
            <hint>
                <h3>Vorsicht!</h3>
                <p>Wenn Sie hier einen Fehler machen, ist es möglich, dass das Programm in eine Endlosschleife gerät und dadurch &#187;hängenbleibt&#171;. Firefox kann eine solche Situation oft erkennen und bietet Ihnen dann eine Hinweisbox an, mit der Sie Ihr Programm stoppen können. Je nach Browser und Situation ist das aber nicht immer möglich. Falls Sie merken, dass Ihr Browser nicht mehr reagiert, sollten Sie versuchen, ihn neu zu starten.</p>
                <p>Besser wäre, Sie kommen gar nicht erst in diese Situation. Achten Sie daher darauf, dass die Abbruchbedingung erfüllt wird.</p>
                <p>Genaugenommen heißt das, dass Sie die Variable (hier: <code>length</code>) bei jedem Aufruf in die richtige Richtung (hier: <code>length - 1</code>) verändern müssen, um die Bedingung (hier: <code>length === 0</code>) letztlich auch zu erfüllen.</p>
            </hint>
            <h1>Rechteck: Wenn Linien sich zusammentun</h1>
            <p>Weiter geht's, schließlich planen Sie noch große Bauvorhaben. Mit der Linie haben Sie den Grundstein für größere Taten gelegt. </p>
            <p>Schreiben Sie nun eine weitere Funktion, die unsere Linie verwendet. Ein Rechteck benötigt neben der Breite (Linienlänge) auch eine Höhe. Die Höhe ist dabei die Anzahl der untereinander stehenden Linien. Für die neue Funktion benötigen Sie im Wesentlichen die gleichen Bestandteile, nur, dass Sie dieses Mal statt einzelner Zeichen ganze Linien ausgeben. Die Linien liefert die Funktion <code>line</code>, und <code>\n</code> sorgt dafür, dass diese untereinander stehen. Als Zähler und Abbruchbedingung benutzen Sie hier statt der Breite die Höhe.</p>
            <blockcode numbered="numbered" src="accompanying_files/19/examples/rectangle.js" id="rectangle_recursive"/>
            <p>Falls Sie das Ergebnis langweilig finden, tauschen Sie doch einfach mal den <code>*</code> gegen ein anderes Zeichen aus. Lassen Sie Ihrer Kreativität freien Lauf&#8230;</p>
            <figure width="60%">
                <img src="images/ascii_art/wallpaper3.jpg"/>
            </figure>
            <figure width="60%">
                <img src="images/ascii_art/wallpaper8.jpg"/>
            </figure>
            <p>Und für die Emoticon-Süchtigen unter Ihnen:</p>
            <figure width="60%">
                <img src="images/ascii_art/wallpaper1.jpg"/>
            </figure>
            <p>Mit diesem kleinen Programm können Sie also zumindest schon Tapeten-Designer werden ;)</p>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Schreiben Sie eine Funktion, die die Summe aller Zahlen in einem Array rekursiv berechnet.</p>
                        <p><code>const sum = arr =&gt; arr.length === </code><blank>0</blank><code> ? 0 : </code><blank>arr[0]</blank><code> + sum(arr.slice(</code><blank>1</blank><code>));</code></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Schreiben Sie eine Funktion, die die Summe aller Zahlen in einem Array rekursiv berechnet.</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>const sum = arr =&gt; arr.length === 0 ? 0 : arr[0] + sum(arr.slice(1));</code></p>
                    </answer>
                    <answer>
                        <p><code>const sum = arr =&gt; arr.reduce((a, b) =&gt; a + b);</code></p>
                    </answer>
                    <answer>
                        <p><code>const sum = arr =&gt; Math.sum(arr);</code></p>
                    </answer>
                    <answer>
                        <p><code>const sum = arr =&gt; arr.map(el =&gt; el * 1);</code></p>
                    </answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Bestimmen Sie die Ausgabe des folgenden Skriptes:</p>
                        <blockcode>const calc = x =&gt; calc(x) * 2;
console.log(calc(3) + 1);</blockcode>
                    </question_text>
                    <answer>1</answer>
                    <answer>2</answer>
                    <answer>3</answer>
                    <answer>7</answer>
                    <answer>Infinity</answer>
                    <answer correct="correct">Es gibt keine Ausgabe, das Programm bleibt hängen.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice">
                    <question_text>
                        <p>Bestimmen Sie die Ausgabe des folgenden Skriptes:</p>
                        <blockcode>const sum = n =&gt; sum(n) + 1;
console.log(sum(6));</blockcode>
                    </question_text>
                    <answer>1</answer>
                    <answer>6</answer>
                    <answer>7</answer>
                    <answer>Infinity</answer>
                    <answer correct="correct">Es gibt keine Ausgabe, das Programm bleibt hängen.</answer>
                </question>
                <question reviewed="reviewed" type="multiple_choice" public="public">
                    <question_text>
                        <p>Bestimmen Sie die Ausgabe des folgenden Skriptes:</p>
                        <blockcode>const calc = x =&gt; x &gt; 100 ? 100 : calc(x * 2);
console.log(calc(3) + 1);</blockcode>
                    </question_text>
                    <answer>100</answer>
                    <answer correct="correct">101</answer>
                    <answer>6</answer>
                    <answer>7</answer>
                    <answer>Infinity</answer>
                    <answer>Es gibt keine Ausgabe, das Programm bleibt hängen.</answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise id="triangle">
                <name>Dreieckig soll es sein...</name>
                <content>
                    <p>Da Sie gerade so schön am Bauen sind: Wie wäre es denn mal mit einem Dreieck?</p>
                    <figure width="20%">
                        <img src="images/screenshots/recursion_triangle.jpg"/>
                        <figcaption>Beispiel für ein mit Rekursion erstelltes Dreieck.</figcaption>
                    </figure>
                    <p>Ob von oben nach unten oder unten nach oben, bleibt Ihnen überlassen. Falls Sie beide Fälle entwickeln, dürfen Sie sich ein Fleißsternchen in Ihr Hausaufgabenheft malen :)</p>
                    <p>Die Funktion <code>triangle</code> sollte nur einen Parameter haben, der sowohl Höhe als auch Breite des Dreiecks bestimmt. So sollte beispielsweise <code>triangle(10)</code> ein Dreieck mit einer Höhe und Breite von 10 Zeichen erzeugen.</p>
                    <p><b>Tipp:</b> Auch hier dient die Linie wieder als Basis.</p>
                    <blockcode numbered="numbered" src="accompanying_files/19/exercises/triangle.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/19/solutions/triangle.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Ich weiß eine Zahl, die du nicht weißt, Teil 2</name>
                <content>
                    <p>Erweitern Sie das Ratespiel aus <a href="#guess_the_number"/>. Zeigen Sie jetzt bei jeder Schätzungsanfrage die aktuelle Rundenzahl &#x2014; d. h. die Anzahl der bisherigen Schätzungen &#x2014; an.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/19/solutions/guess_a_number.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Alles an seinem Platz? [&#187;Kopfnuss&#171;]</name>
                <content>
                    <p>Die Anzeige der Chat-Teilnehmer, die gerade im NerdWorld-Chat online sind, soll Performance-optimiert werden. Die Liste soll nur noch neu sortiert werden, wenn sie noch nicht sortiert wurde. </p>
                    <blockcode>let customersOnline = ['Heribert', 'Friedlinde', 'Tusnelda', 'Oswine', 'Ladislaus', 'Goldy'];                </blockcode>
                    <p>Schreiben Sie dafür eine Funktion <code>isSorted</code>, die prüft, ob ein Array von Teilnehmernamen bereits alphabetisch sortiert ist und in diesem Fall <code>true</code>, sonst <code>false</code> zurückgibt. Sie können dafür nicht auf die Funktion <code>sort</code> zurückgreifen, sonst würden Sie den Performancevorteil gleich wieder verlieren.</p>
                    <p><b>Tipp:</b> Ein Array ist genau dann sortiert, wenn die ersten beiden
                        Elemente der Liste in der richtigen Reihenfolge sind und die Liste ab dem
                        zweiten Element sortiert ist. Ein Array mit nur einem Element ist immer
                        sortiert.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/19/solutions/everything_in_place.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>Verloren in Raum und Zeit? Times &amp; Range</lesson_name>
            <topics>
                <li>zwei hilfreiche Funktionen kennen, die Ihnen viel Schreibaufwand ersparen.</li>
                <li>wie Sie komplexen Code immer und immer wieder wiederholen können.</li>
            </topics>
            <p>Ehrlich gesagt, haben Sie die Tapeten aus der letzten Lektion etwas umständlicher gebaut als es eigentlich sein müsste. Betrachten Sie sich noch mal den Code der Funktion <code>line</code>:</p>
            <figure id="line_recursive_next">
                <blockcode numbered="numbered" src="accompanying_files/19/examples/line.js"/>
                <figcaption>rekursive Implementierung der line-Funktion</figcaption>
            </figure>
            <p>Die Funktion zur Erzeugung einer Linie in <a href="#line_recursive_next"/> funktioniert zwar, ist aber eigentlich recht umständlich.</p>
            <p>Wäre es nicht einfacher zu sagen: <i>Logge 10 mal das Zeichen &#187;*&#171;</i>? </p>
            <p>Das könnte als JS-Code ausgedrückt beispielsweise so aussehen:</p>
            <blockcode>times(10, () =&gt; console.log('*'));</blockcode>
            <p>Haben Sie es schon ausprobiert?</p>
            <p>Leider funktioniert das so nicht. Viele funktionale Sprachen bieten eine solche <code>times</code>-Funktion an. JS gehört aber leider nicht dazu &#x2014; zumindest noch nicht. Zum Glück können Sie sie leicht selbst nachrüsten.</p>
            <h1>Zum x-ten Mal mit times</h1>
            <p>Wir bemühen für die Implementierung eine alte Bekannte &#x2014; das <code>Array</code>. Der folgende Code legt ein Array aus <code>n</code> Elementen an und füllt jedes Element mit einem Wert &#x2014; hier mit einer <code>0</code>:</p>
            <blockcode>Array(n).fill(0);</blockcode>
            <p>Verbinden wir das Ganze mit unserer <code>line</code>-Funktion, ergeben sich die nachstehenden Zeilen:</p>
            <blockcode src="accompanying_files/20/examples/line_times.js" numbered="numbered"/>
            <p>Das <code>Array(n).fill(0)</code> in <code>times</code> erzeugt ein Array, welches durch <code>forEach</code> für jedes Element des Arrays die Funktion aufruft, die Sie an den Parameter <code>fn</code> übergeben haben &#x2014; also hier die Function <code>() =&gt; console.log(character)</code>.</p>
            <p>Somit ruft die <code>line</code>-Funktion zehn mal <code>console.log('*')</code> auf und Sie erhalten folgende Ausgabe:</p>
            <blockcode>
            *
            *
            *
            *
            *
            *
            *
            *
            *
            *
            </blockcode>
            <p>Leider ist die Ausgabe noch nicht ganz wie gewünscht: Die Sternchen stehen untereinander statt nebeneinander. Das liegt daran, das <code>console.log</code> nach jeder Ausgabe einen Zeilenumbruch erzeugt. Außerdem gilt das als schlechter Stil, da die Ausgabe hier eine Nebenwirkung darstellt und der String nicht mehr weiterverarbeitet werden kann &#x2014; an Rechtecke oder gar Tapeten ist also nicht zu denken.</p>
            <p>Eigentlich möchten Sie die Sternchen einzeln haben, damit die Funktion <code>line</code> sie zu einem String ohne Zeilenumbrüche zusammensetzen kann. Schließlich könnte <code>line</code> den String zur Weiterverwendung (Sie wissen schon: für Rechtecke, Tapeten, &#8230;) zurückgeben.</p>
            <p>Dazu müssen Sie lediglich die <code>times</code>-Funktion noch ein wenig aufpeppen. Toll wäre es, wenn sich die <code>times</code>-Funktion die Ergebnisse der einzelnen Aufrufe merken könnte. Aber dafür gibt es ja Arrays!</p>
            <p><code>times</code> kann bei jedem Schleifendurchlauf den Wert in ein Array schubsen und das Ergebnis (<code>result</code>) zurückgeben. Dann kann <code>line</code> das Array mittels <code>join</code> wieder zu einem String zusammensetzen und <code>console.log</code> kann es am Ende ausgeben. Auf das vorzeitige Loggen können Sie dann, zum Glück, verzichten.</p>
            <blockcode src="accompanying_files/20/examples/line_times2.js" numbered="numbered"/>
            <p>Endlich erhalten Sie wieder das gewünschte Ergebnis:</p>
            <blockcode>**********</blockcode>
            <h1>times-mal optimiert</h1>
            <p>Zwei kleine Verbesserungen wollen wir der Funktion <code>times</code> aber noch spendieren.</p>
            <p>Durch das <code>push</code> innerhalb der Schleife muss JS das Array bei jedem Durchlauf dynamisch vergrößern. Das kostet Zeit und verlangsamt die Funktion. </p>
            <p>Durch den Parameter <code>n</code> weiß <code>times</code> bereits von Anfang an, wie viele Elemente das Ergebnis-Array später enthalten wird. Diesen Umstand nutzen wir. Mittels <code>Array(n)</code> können Sie ein sogenanntes Sparse-Array der Größe <code>n</code> anlegen. Anschließend werden alle Arrayelemente mit <code>0</code> gefüllt.</p>
            <blockcode>const result = Array(n).fill(0);</blockcode>
            <p><i>Sparse</i> bedeutet hier, dass das Array keine echten Werte sondern &#187;Löcher&#171; enthält &#x2014; genau wie meine Socken. Statt die Elemente nun per <code>push</code> hinzuzufügen, füllen Sie die Elemente mit dem Indexoperator <code>[]</code> an der gewünschten Stelle. Das geht folgendermaßen:</p>
            <blockcode>result.forEach((x, i, r) =&gt; r[i] = fn());</blockcode>
            <p>Als Letztes übergeben Sie die Variable <code>i</code> noch als Argument an den Aufruf der Funktion <code>fn</code> in der Schleife. Die Zählvariable <code>i</code> enthält die jeweilige Durchlaufnummer (0, 1, 2, &#8230;).</p>
            <blockcode>result.forEach((x, i, r) =&gt; r[i] = fn(i);</blockcode>
            <p>Für das Bauen der Linie ist das nicht erforderlich, es gibt Ihnen aber die Möglichkeit, später auf den Wert der Zählvariable zurückzugreifen. Das kann sich noch als sehr nützlich erweisen. Hier die komplette Funktion:</p>
            <blockcode src="accompanying_files/20/examples/times_optimized.js" numbered="numbered"/>
            <h3>Beispiele</h3>
            <blockcode>times(3, i =&gt; i + 2) // =&gt; [2, 3, 4]
times(5, () =&gt; '') // =&gt; ['', '', '', '', '']</blockcode>
            <hint src="images/hint/owl.png">
                <h3>Warum denn nicht Rekursiv?</h3>
                <p>Normalerweise würden wir die Funktion <code>times</code> einfach mithilfe von Rekursion schreiben:</p>
                <figure>
                    <blockcode src="accompanying_files/20/examples/times_recursive.js" numbered="numbered"/>
                    <figcaption>Rekursive Fassung von times</figcaption>
                </figure>
                <p><code>times</code> ist eine recht grundsätzliche Funktion, die Sie später vermutlich oft in verschiedensten Szenarien einsetzen werden. Es kann vorkommen, dass Ihnen die Performance für manche Anwendungsfälle nicht ausreicht. Abhilfe würde hier ein Konzept schaffen, dass sich <keyword>tail-calls-Optimierung</keyword> (kurz: <keyword>TCO</keyword>) nennt. Wir müssten dann nur dafür sorgen, dass bei der Rückgabe nicht mehr passiert, als der rekursive Funktionsaufruf:</p>
                <figure id="opt_recursive_times">
                    <blockcode numbered="numbered" src="accompanying_files/20/examples/times_tail_recursive.js"/>
                    <figcaption>optimierte tail-recursive Fassung von times</figcaption>
                </figure>
                <p>Leider können viele JS-Umgebungen &#x2014; insbesondere die der meisten Browser &#x2014; die <i>tail-calls-Optimierung</i> noch nicht. Deswegen wäre unsere rekursive Implementierung in <a href="#opt_recursive_times"/> eher langsam. Sie könnten sie auch nur sehr eingeschränkt verwenden &#x2014; bis zu einer bestimmten Anzahl von rekursiven Aufrufen (abhängig von der Größe des Arbeitsspeichers). Einen Ausweg würde nur eine Technik namens <kbd>Trampolining</kbd> bieten, aber die ist recht kompliziert und hilft auch nicht bei der Performance.</p>
            </hint>
            <hint src="images/people/marco.jpg">
                <h3>Benutzung fertiger Funktionen</h3>
                <p>Eigentlich bin ich kein Freund davon, fremde Funktionen per Copy &amp; Paste einzubinden. Es gibt bessere Wiederverwendungstechniken, wie das Laden von Funktionen aus sogenannten <keyword>Funktionsbibliotheken</keyword>. Fall es dann beispielsweise Sicherheitsupdates gibt, gibt es Möglichkeiten, diese mit wenig Aufwand zu aktualisieren. Wenn Sie stattdessen aber eine größere Anzahl von Funktionen per Copy &amp; Paste eingebunden haben, sind sie selbst für die manuelle Pflege dieser Funktionen verantwortlich. Bei einer größeren Codemenge kann das einen erheblichen Aufwand bedeuten.</p>
                <p>Andererseits bin ich der Meinung, das sich das bei zwei Funktionen noch im vertretbaren Rahmen bewegt. Falls Sie später eine externe Bibliothek verwenden möchten, finden Sie hier zwei Beispiele für Bibliotheken, die die Funktion <code>times</code> bereits anbieten:</p>
                <ul>
                    <li>
                        <a href="http://ramdajs.com/">Ramda</a>
                    </li>
                    <li>
                        <a href="https://lodash.com">lodash</a>
                    </li>
                </ul>
            </hint>
            <exercise>
                <name>Der Mann mit der Zipfelmütze</name>
                <content>
                    <p>Weil es draußen gerade schneit, könnten Sie ein kleines Programm schreiben, dass 3 mal <code>Ho!</code> in die Konsole loggt. Verwenden Sie die Funktion <code>times</code> dafür.</p>
                    <p>Wenn bei Ihnen gerade eher heißes Wetter ist, können Sie natürlich auch zur Piratenversion greifen und stattdessen 3 Mal <code>Arrrr!</code> ausgeben.</p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/20/solutions/ho_ho_ho.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Tapetenzeit</name>
                <content>
                    <p>Nachdem Sie nun mithilfe von <code>times</code> Linien zeichnen können, ist es höchste Zeit(!), sich wieder den Tapeten (Rechtecken) zuzuwenden. Schreiben Sie die Funktion <code>rectangle</code> (<a href="#rectangle_recursive_exercise"/>) mithilfe von <code>times</code> so um, dass Sie keine Rekursion mehr benötigen.</p>
                    <figure id="rectangle_recursive_exercise">
                        <blockcode>
const rectangle = (width, height, character) =&gt;
  height === 0
  ? '' : rectangle(width, height - 1, character)
  + '\n' + line(width, character);
                </blockcode>
                        <figcaption>Rekursive Fassung der Funktion rectangle</figcaption>
                    </figure>
                </content>
                <answer>
                    <blockcode src="accompanying_files/20/solutions/rectangle_times.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Wertgeschätzte Nullen, Teil 2</name>
                <content>
                    <p>NerdWorld hat sein Artikelnummer-Konzept noch einmal geändert. Es werden jetzt stets 7-stellige Artikelnummern verwendet. Nummern, die weniger als 7 Stellen haben &#x2014; wie z.&#x202F;B. 123 &#x2014; sollen durch führende Nullen auf sieben Stellen aufgefüllt werden. Beispielsweise wird 123 dann in 0000123 korrigiert. Schreiben Sie eine Funktion, die eine Artikelnummer entgegennimmt und die korrigierte Fassung als String zurückgibt.</p>
                    <p><b>Experimentieren Sie</b>: Versuchen Sie, die Übung mal mit <code>times</code>, mal mit Rekursion und auch mal ganz ohne Rekursion oder <code>times</code> zu lösen.</p>
                </content>
                <answer>
                    <p>
                        <b>Mit Rekursion</b>
                    </p>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/zeroes_recursive.js"/>
                    <p>
                        <b>Mit times-Funktion</b>
                    </p>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/zeroes_times.js"/>
                    <p>
                        <b>Ohne Rekursion oder times-Funktion</b>
                    </p>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/zeroes_simple.js"/>
                </answer>
            </exercise>
            <h1>Von Anfang bis Ende mit range</h1>
            <p>Die &#187;Schwesterfunktion&#171; von <code>times</code> ist <code>range</code>. Auch diese können Sie einfach kopieren und weiterverwenden. Der folgende Code ist leider nicht ganz einfach zu verstehen, weil er auch schon ein paar Optimierungen enthält. Dieser wird Ihnen aber durch den Abschnitt Higher Order Functions der nächsten Lektion verständlicher. Außerdem verwenden wir für die Funktion <code>rangeFromStartToEnd</code> einen sogenannten <keyword>Default Parameter</keyword> &#x2014; mehr zu Default-Parametern erfahren Sie dann in <a href="#default_param"/>.</p>
            <blockcode src="accompanying_files/20/examples/range.js" numbered="numbered"/>
            <p>Auch wenn die Implementierung etwas komplexer ist, können Sie die Funktion doch sehr einfach verwenden. <code>range</code> erzeugt Ihnen genauso wie <code>times</code> ein Array. Im Unterschied zu <code>times</code> enthält es aber immer die Durchlaufnummern als Elemente. Außerdem können Sie beliebige Start- und Endwerte angeben.</p>
            <blockcode>console.log(range(9)); // =&gt; [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]

console.log(range(5, 9)); // =&gt; [ 5, 6, 7, 8 ]            </blockcode>
            <p>Beachten Sie dabei, dass <code>range</code> bei <code>0</code> anfängt, falls Sie keinen Startwert angeben. Der letzte Wert (hier <code>9</code>) ist außerdem nicht mehr im Array vorhanden (<keyword>exklusiver Wertebereich</keyword>).</p>
            <p>Wenn Sie möchten, können Sie sogar noch eine Schrittweite angeben:</p>
            <blockcode>console.log(range(3, 9, 2)); // =&gt; [ 3, 5, 7 ]</blockcode>
            <p>Im Beispiel ist die Schrittweite <code>2</code>. Sie können aber eine beliebige positive oder sogar negative ganze Zahl als Schrittweite hinterlegen.</p>
            <h1>Was ist nur los mit den Schleifen?</h1>
            <p>Haben Sie sich vielleicht mit Ihrem Nachbarn unterhalten &#x2014; mit dem, der seit 20 Jahren programmiert? Und dabei haben Sie unsere Empfehlung erwähnt, auf klassische Schleifen zu verzichten? Wie hat er reagiert? Er war völlig entsetzt?</p>
            <p>Nein? Nun, zumindest könnte Ihnen das passieren, wenn Sie einen Nachbarn haben, der seit 20 Jahren in der Software-Entwicklung tätig ist.</p>
            <p>Schleifen sind nämlich ein sehr verbreitetes Sprachkonstrukt &#x2014; praktisch jeder erfahrene Programmierer, den Sie treffen, hat schon damit gearbeitet. Für viele Traditionalisten ist ein Leben ohne Schleifen kaum vorstellbar.</p>
            <p>Warum also, um alles in der Welt, raten wir dann vom Einsatz von Schleifen ab?</p>
            <h3>Imperativ vs. deklarativ</h3>
            <p>JS ist eine Sprache, die sowohl <keyword>imperative</keyword> als auch <keyword>deklarative</keyword> Konstrukte unterstützt. Imperativ bedeutet, dass Sie formulieren müssen, <b>wie</b> Dinge funktionieren &#x2014; ein Vorgehen beschreiben. Deklarativ bedeutet, nur das <b>Was</b> zu beschreiben. </p>
            <p>Beispielsweise ist es umständlich, detailliert den Vorgang zu beschreiben, wie ein Array durchlaufen wird und mit <code>if</code> bestimmte Elemente herausgefiltert werden. Sagen Sie einfach gleich, Sie möchten ein gefiltertes Array. Deklarative Lösungen sind meist kürzer, klarer und einfacher.</p>
            <h3>Beispiel: gerade Zahlen</h3>
            <blockcode>// imperative
let numbers = range(10);
let evenNumbers = [];
for (let i = 0; i &lt; numbers.length; i += 1) {
  if (numbers[i] % 2 === 0) {
    evenNumbers.push(numbers[i]);
  }
}
console.log(evenNumbers); // =&gt; [0, 2, 4, 6, 8]</blockcode>
            <blockcode>// declarative
range(10).filter(v =&gt; v % 2 === 0) // =&gt; [0, 2, 4, 6, 8]
</blockcode>
            <p>Schleifen sind ein klassisch imperatives Konzept und dementsprechend besser zu vermeiden. In JS war das bisher kaum möglich, aber moderne Sprachmittel aus ES5/6 gepaart mit ein paar kleinen Ergänzungen wie <code>range</code> und <code>time</code> lassen einen Verzicht auf Schleifen (im eigenen Code) Realität werden.</p>
            <p>Hier noch ein paar Argumente, falls Sie doch noch mit Ihrem Nachbarn durch ein Loch im Gartenzaun über Schleifen diskutieren:</p>
            <ul>
                <li>Wenn Sie ein Array durchlaufen möchten, ist es besser, mit einer Higher-Order-Funktion zu arbeiten, da Sie dann keine Zählvariable benötigen. Außerdem sehen Sie der Higher-Order-Funktion direkt an, was der Sinn des Durchlaufs ist; soll z.&#x202F;B. gefiltert oder eher gemappt werden?</li>
                <li>Schleifen bergen immer die Gefahr eines Index-Fehlers (sehr beliebt ist der klassische +/- 1 Fehler, bei dem die Anzahl der Schleifendurchläufe genau um eins abweicht). Bei Higher-Order-Funktionen wie <code>map</code>, <code>reduce</code> oder <code>filter</code> kann das nicht passieren.</li>
                <li>Die Funktionen <code>times</code> und <code>range</code> können Sie statt Schleifen verwenden, wenn es nicht darum geht, Arrays zu durchlaufen, sondern ein fester Wertebereich gefragt ist: eine Artikelnummer mit fester Länge, 6 Richtige im Lotto usw. <!-- HL: auskommentiert, da nicht mehr zutreffend: Die beiden Funktionen sind zwar ebenso wie Schleifen anfällig für Indexfehler &#x2014; aber selbst im Fehlerfall kann es zumindest nicht zu einer Endlosschleife kommen, die einen Programmabsturz verursacht. </li>
                    <li>Außerdem bieten <code>times</code> und <code>range</code> weniger Stellschrauben als eine <code>for</code>-Schleife. So wird z.&#x202F;B. bei <code>times</code> nur die Anzahl der Wiederholungen angegeben, keine Schleifenbedingung oder Update-Operation. Weniger Stellschrauben zu haben, bedeutet auch weniger Möglichkeiten für Fehler.--></li>
                <li>Es gibt eine Reihe von Programmierproblemen, die mit Rekursion einfacher zu lösen sind als mit Schleifen, so z.&#x202F;B. die Fragestellung aus einer der letzten Übungen, ob eine Liste sortiert ist.</li>
            </ul>
            <p>Eine ausführlicher Diskussion über Schleifenprobleme und Alternativen finden Sie im Artikel <a href="https://www.heise.de/developer/artikel/Weg-mit-den-Schleifen-4009774.html">Weg mit den Schleifen</a> bei Heise Developer.</p>
            <h1>Übungen</h1>
            <exercise>
                <name>Zählen will gelernt sein</name>
                <content>
                    <step>Geben Sie die Zahlen von 70 bis 130 in der Konsole aus.</step>
                    <step>Lassen Sie JS nun von 200 bis 20 rückwärts zählen.</step>
                    <step>Geben Sie alle geraden Zahlen von 10 bis 50 in der Konsole aus.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/counting.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>6 Richtige?</name>
                <content>
                    <step>
                        <p>Erweitern Sie Ihren Lottogenerator aus <a href="#lotto"/>. Lassen Sie den Generator sechs zufällige Lottozahlen ausgeben. (Doppelte Zahlen sind zunächst erlaubt.)</p>
                    </step>
                    <step>
                        <p>Schreiben Sie einen neuen Lottogenerator, der keine doppelten Zahlen erzeugt.</p>
                        <p><b>Hinweis:</b> Sie können das beispielsweise wie beim echten Lotto lösen, indem Sie erst einmal 49 Zahlen in einen Behälter werfen, diesen schütteln und dann daraus die ersten 6 Zahlen ziehen.</p>
                    </step>
                </content>
                <answer>
                    <h3>Schritt 1</h3>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/lotteryNumbers1.js"/>
                    <h3>Schritt 2</h3>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/lotteryNumbers2.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Primzahlen</name>
                <content>
                    <p>Schreiben Sie ein Programm, das alle Primzahlen ermittelt und im Browser ausgibt. Eine Primzahl ist eine ganze Zahl größer 1, die &#x2014; ohne Rest &#x2014; nur durch sich selbst oder 1 teilbar ist.</p>
                    <step>Geben Sie die Primzahlen von 1 bis 97 (inkl.) aus. Sie sollten folgendes Ergebnis erhalten:<blockcode>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,67, 71, 73, 79, 83, 89, 97]</blockcode></step>
                    <step>Geben Sie nun alle Primzahlen bis 1000 aus.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/primes_range.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Die perfekte Zahl</name>
                <content>
                    <p>Eine natürliche Zahl wird &#187;vollkommene Zahl&#171; (auch &#187;perfekte&#171; oder &#187;ideale Zahl&#171;) genannt, wenn sie genauso groß ist wie die Summe ihrer positiven echten Teiler (d.&#x202F;h. aller Teiler außer sich selbst).</p>
                    <p>Die kleinsten bekannten Beispiele für vollkommene Zahlen sind 6 und 28: Die echten Teiler von 6 sind 1, 2 und 3. Ihre Summe ist 1 + 2 + 3 = 6:</p>
                    <blockcode>1 * 2 * 3 = 6
1 + 2 + 3 = 6</blockcode>
                    <p>Für 28 sind die echten Teiler 1, 2, 4, 7 und 14, so dass 1 + 2 + 4 + 7 + 14 = 28 ist:</p>
                    <blockcode>1 * 28 = 28
2 * 14 = 28
4 *  7 = 28

1 + 2 + 4 + 7 + 14 = 28                </blockcode>
                    <p>Schreiben Sie ein Programm, dass alle vollkommenen Zahlen bis 1000 in der Konsole ausgibt.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/perfect_number.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Lottostatistik [&#187;Kopfnuss&#171;]</name>
                <content>
                    <p>Jetzt wollen wir es wissen. Wie oft hat man denn wirklich 6 Richtige? Schreiben Sie eine Programm, dass an 10000 Lottoziehungen teilnimmt &#x2014; immer mit den gleichen Zahlen. Geben Sie anschließend eine Statistik aus, wie oft 6 Richtige, 5 Richtige, usw. erreicht wurden.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/20/solutions/lottery_statistic.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="advanced_functions">
            <lesson_name>Das merkwürdige Verhalten reifer Funktionsdefinitionen zur Aufrufzeit</lesson_name>
            <topics>
                <li>genaueres zum Umgang mit Parametern.</li>
                <li>wie Default-Parameter Ihnen das Leben erleichtern,</li>
                <li>und was es mit dem Reste-Parameter auf sich hat.</li>
            </topics>
            <p>Ich weiß, ich weiß &#x2014; mit Funktionen haben wir uns schon recht ausführlich beschäftigt. Allerdings haben wir Ihnen noch ein paar Dinge verschwiegen. Keine böse Absicht &#x2014; wir wollten es erst einmal einfach halten. Dafür lassen wir es jetzt krachen und verraten Ihnen all die fiesen kleinen Details, die Sie schon immer mal über Funktionen und deren Parameter wissen wollten.</p>
            <h1>Funktionsparameter &#x2014; mal ist's zu viel, mal ist's zu wenig</h1>
            <p>Eine JS-Besonderheit ist, dass Sie beim Aufruf von Funktionen mehr (oder auch weniger) Argumente übergeben können, als die Funktionsdefinitionen verlangt. Betrachten Sie dazu noch mal die Funktion <code>cylindricalVolume</code> aus <a href="#function_return_values"/>:</p>
            <blockcode>const cylindricalVolume = (radius, height) =&gt; Math.PI * radius * radius * height;</blockcode>
            <p>Was passiert, wenn Sie der Funktion beim Aufruf statt zwei Argumenten drei Argumente übergeben?</p>
            <blockcode>cylindricalVolume(10, 80, 27)</blockcode>
            <p>Nichts Besonderes! Das Ergebnis ist <code>25132.741228718347</code>, das gleiche wie beim Aufruf <code>cylindricalVolume(10, 80)</code>. Die Funktion ignoriert das dritte Argument einfach. Das hört sich nicht weiter dramatisch an, ist aber leider eine häufige Fehlerursache. Vielleicht wollten Sie einen dritten Parameter hinzufügen, haben aber vergessen, die Funktionsdefinition zu erweitern. Statt dass Sie eine aussagekräftige Fehlermeldung bekommen, produziert Ihr Code falsche Ergebnisse &#x2014; und Sie müssen anfangen, nach dem Fehler zu suchen.</p>
            <p>Noch schlimmer ist es, wenn Sie beim Funktionsaufruf weniger Argumente übergeben als benötigt.</p>
            <blockcode>cylindricalVolume(10)</blockcode>
            <p>Statt einer Fehlermeldung erhalten Sie <code>NaN</code>.</p>
            <p>Auf der Plus-Seite steht, dass dieses Verhalten das Refactoring erleichtert, wenn Sie z.&#x202F;B. eine Funktion erstmal um einen neuen Parameter erweitern und erst danach einige oder alle Aufrufe anpassen möchten. Außerdem gibt es einen Trick bei den Higher-Order-Funktionen, der von der legeren Handhabung profitiert. Dazu gleich mehr&#x202F;&#8230;</p>
            <p>Ein großer Nachteil ist dagegen das hohe Fehlerpotenzial &#x2014; versuchen Sie deswegen, solche Abweichungen zu vermeiden!</p>
            <hint src="images/people/christin.jpg">
                <h3>Meine Empfehlung</h3>
                <p>
                    <b>Achten Sie darauf, dass die</b>
                </p>
                <ul>
                    <li><b>Anzahl der Parameter</b> der Funktionsdefinition und die</li>
                    <li><b>Anzahl der Argumente</b> beim Funktionsaufruf</li>
                </ul>
                <p>
                    <b>immer übereinstimmen!</b>
                </p>
                <p>Es gibt ein paar Ausnahmen von dieser Regel. Dazu kommen wir aber gleich.</p>
            </hint>
            <h1 id="default_param">Den Standardfall erschlagen mit Default-Parametern</h1>
            <p>Nehmen Sie mal an, dass Björns Verpackungsröhren eine genormte Höhe von 80cm haben. Es gibt nur wenige Sonderfälle, bei denen die Höhe abweicht. In dem Fall wäre es praktisch, wenn Sie die Funktion nur mit dem Radius aufrufen könnten und als Höhe automatisch der Normwert verwendet würde.</p>
            <blockcode>cylindricalVolume(10) // =&gt; 25132.741228718347</blockcode>
            <p>Die gute Nachricht ist: Das ist machbar! Sie benötigen dafür einen sogenannten <keyword>Default-Parameter</keyword>.</p>
            <p>Alles, was Sie dafür tun müssen, ist, den gewünschten Standardwert bei der Parameter-Definition mit <code>=</code> zuzuweisen.</p>
            <blockcode numbered="numbered">const cylindricalVolume = (radius, height = 80) =&gt;
    Math.PI * radius * radius * height;</blockcode>
            <p>Wenn Sie die Funktion jetzt nur mit dem Radius aufrufen, erhält die Höhe (Parameter <code>height</code>) automatisch den Wert <code>80</code>. In Spezialfällen, wenn Björn z.&#x202F;B. mal eine besonders kurze Röhre hat, haben Sie nach wie vor die Möglichkeit, alle Argumente beim Aufruf anzugeben:</p>
            <blockcode>cylindricalVolume(10, 60) // =&gt; 18849.55592153876</blockcode>
            <p>In diesem Fall ignoriert der Aufruf den Vorgabewert <code>80</code>.</p>
            <h3>&#8230; und manchmal kommt es auf die Reihenfolge an</h3>
            <p>Entscheidend bei Default-Parametern ist auch die Reihenfolge. Sie können sie nur am Ende der Parameterliste verwenden. Beispielsweise wäre folgende Definition nicht gültig:</p>
            <blockcode>(radius = 10, height) =&gt; ...</blockcode>
            <p>Alle Parameter als Default-Werte zu setzen, ist wiederum kein Problem, solange es keine Lücken gibt:</p>
            <blockcode>(radius = 10, height = 80) =&gt; ...</blockcode>
            <p>Die letzte Funktion könnten Sie auch ganz ohne Argumente aufrufen.</p>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>&#187;Also früher, da mussten wir noch &#8230;&#171;</h3>
                <p>Einer der Gründe, warum JS die Parameteranzahl nicht überprüft, ist, dass es dadurch auch früher schon möglich war, Default-Parameter zu verwenden &#x2014; noch bevor ES2015 das Feature offiziell eingeführt hat.</p>
                <h3>Beispiel</h3>
                <blockcode numbered="numbered">const cylindricalVolume = (radius, height) =&gt;
  Math.PI * radius * radius * height;</blockcode>
                <p>Hat der Aufruf der Funktion nur ein Argument verwendet (z.&#x202F;B. <code>cylindricalVolume(10)</code> ), so erhielt der zweite Parameter (<code>height</code>) den Wert <code>undefined</code>.</p>
                <p>Das ist zwar unschön, ließ sich aber überprüfen (<code>typeof height === 'undefined'</code>), und gegebenenfalls konnte ein Standardwert zugewiesen werden.</p>
                <blockcode numbered="numbered">
const cylindricalVolume = (radius, height) =&gt; {
  if (typeof height === "undefined") height = 80;
  return Math.PI * radius * radius * height;
 };
                </blockcode>
                <p>Auf diese Weise ließen sich auch früher schon Default-Parameter emulieren. Heute ist das wesentlich einfacher &#x2014; &#187;echte&#171; Default-Parameter machen den Code lesbarer.</p>
            </hint>
            <h1>Nehmen wie es kommt: Rest-Parameter</h1>
            <p>Manchmal ist es nützlich, wenn Funktionen beliebig viele Parameter entgegennehmen können. Das mittlerweile sehr vertraut gewordene <code>console.log</code> ist z.&#x202F;B. eine solche Funktion.</p>
            <blockcode>const a = 1;
const b = 2;

console.log('a: ', a , ' ', 'b: ', b);</blockcode>
            <p>Diese Möglichkeit gibt es aber nicht nur für Funktionen aus der JS-Standard-Bibliothek! Sie können selbst solche Funktionen schreiben. Dazu stellt ECMAScript2015 die sogenannten Rest-Parameter zur Verfügung.</p>
            <p>Hier ist ein kleines Beispiel:</p>
            <blockcode>greetWith('HeyHo', 'Goldy', 'Ladislaus', 'Heribert');</blockcode>
            <p>Die Funktion <code>greetWith</code> soll eine Reihe von Namen als Argumente (ab dem zweiten) entgegennehmen. Diese Namen spricht sie dann der Reihe nach an &#x2014; jeweils mit der Begrüßung aus dem ersten Argument:</p>
            <blockcode>HeyHo Goldy
HeyHo Ladislaus
HeyHo Heribert</blockcode>
            <p>Die Anzahl der Namen ist dabei nicht begrenzt. Jeder erhält eine freundliche Begrüßung. Wie lässt sich das realisieren?</p>
            <p>Deklarieren Sie den letzten Parameter der Funktion als Rest-Parameter, indem Sie die Zeichenfolge <code>...</code> (drei Punkte) voranstellen:</p>
            <blockcode>const greetWith = (greeting, ...names) =&gt;</blockcode>
            <p>Der Funktionsaufruf <code>greetWith('HeyHo', 'Goldy', 'Ladislaus', 'Heribert');</code> packt das erste Argument (im Beispiel <code>Heyho</code>) in den ersten Parameter. Weitere normale Parameter müssten Sie vor dem Rest-Parameter ergänzen. Diese würden ganz normal befüllt. Alle weiteren Argumente (<code>'Goldy', 'Ladislaus', 'Heribert'</code>) schluckt der Rest-Parameter <code>...names</code>. </p>
            <p>Der Rest-Parameter ist ein Array und enthält die restlichen, eingesammelten Argumente als Elemente (im Beispiel <code>['Goldy', 'Ladislaus', 'Heribert']</code>). Nun können Sie jeden Namen in einem <code>forEach</code> begrüßen:</p>
            <blockcode src="accompanying_files/21/examples/rest.js" numbered="numbered"/>
            <h1>Higher-Order-Funktionen</h1>
            <hint src="images/hint/bjoern.png">
                <p>Für ein kleines Gewinnspiel auf unserer Website benötigen wir noch die Möglichkeit, eine Liste der Gewinner auszugeben. Die ersten drei Gewinner bekommen besondere Preise. Deswegen muss jeweils <i>Place 1</i>, <i>Place 2</i> und <i>Place 3</i> vor dem Namen stehen.</p>
            </hint>
            <blockcode>let winners = ['Heribert', 'Friedlinde', 'Tusnelda', 'Oswine', 'Ladislaus'];</blockcode>
            <p>Die Gewinner liegen bereits als Array vor &#x2014; sortiert nach der Reihenfolge der Ziehung. Ihre Aufgabe besteht darin, die Strings mit dem Präfix <code>'Place 1:'</code> usw. zu versehen. Im Grunde können Sie einfach über das Array <code>winners</code> mappen. Ergänzen Sie erstmal nur das Präfix <code>'Place :'</code> ohne die Nummer.</p>
            <blockcode>winners.map(winner =&gt; `Place : ${winner}`);</blockcode>
            <p>Sie erhalten:</p>
            <blockcode>[ 'Place : Heribert',
  'Place : Friedlinde',
  'Place : Tusnelda',
  'Place : Oswine',
  'Place : Ladislaus' ]</blockcode>
            <p>Die Schwierigkeit besteht nun darin, an die Platznummer zu kommen. Im Parameter <code>winner</code> steht sie nicht, und viel mehr Informationen haben Sie nicht. Also, was tun?</p>
            <p>An dieser Stelle kommt uns ein besonderes Feature der Higher-Order-Funktionen entgegen. Wie Sie wissen, nimmt <code>map</code> eine Funktion als Argument entgegen &#x2014; eine sogenannte Callback-Funktion. Welche Parameter sollte diese Callback-Funktion haben? Es gibt eine Art Vertrag zwischen <code>map</code> und der übergebenen Callback-Funktion:</p>
            <p><code>map</code> übergibt der Funktion nach und nach ein Element seines Arrays als erstes Argument. Die Callback-Funktion nimmt das Argument in ihrem ersten Parameter entgegen, führt eine Verarbeitung durch und produziert einen Rückgabewert.</p>
            <p>Tatsächlich übergibt <code>map</code> aber noch mehr als nur das aktuelle Element. <code>map</code> übergibt außerdem den Index des Array-Elements. Alles, was Sie tun müssen, ist, diesen Wert in einem zweiten Parameter aufzufangen. Typischerweise nennt man den Parameter <code>i</code> (für Index).</p>
            <blockcode>winners.map((winner, i) =&gt; `Place ${i}: ${winner}`);</blockcode>
            <p>Sie erhalten:</p>
            <blockcode>
                [ 'Place 0: Heribert',
                  'Place 1: Friedlinde',
                  'Place 2: Tusnelda',
                  'Place 3: Oswine',
                  'Place 4: Ladislaus' ]
            </blockcode>
            <p>Der Index beginnt, wie bei Arrays üblich, bei <code>0</code>, &#x2014; oder wie wir Entwickler sagen, <code>i</code> ist <keyword>0-indiziert</keyword>. Um die korrekte Platzierung zu erhalten, müssen Sie also noch jeweils 1 aufaddieren.</p>
            <blockcode>winners.map((winner, i) =&gt; `Place ${i + 1}: ${winner}`);</blockcode>
            <p>Ergebnis:</p>
            <blockcode>
                [ 'Place 1: Heribert',
                  'Place 2: Friedlinde',
                  'Place 3: Tusnelda',
                  'Place 4: Oswine',
                  'Place 5: Ladislaus' ]
            </blockcode>
            <p>Sehr schön! Das geht in die richtige Richtung. Björn hätte jetzt noch gerne, dass Sie die Plätze nur für die ersten drei Gewinner anzeigen. Dank des Index-Parameters können Sie das berücksichtigen:</p>
            <blockcode numbered="numbered" id="winners">
winners.map((winner, i) =&gt;
  i &lt; 3 ? `Place ${i + 1}: ${winner}` : winner
);
            </blockcode>
            <p>Nennen Sie die Funktion noch <code>withPlace</code>, und Ihr Programm ist fertig:</p>
            <blockcode src="accompanying_files/21/examples/winners.js" numbered="numbered"/>
            <p>Der Rückgabewert von <code>withPlace</code> hat die gewünschte Form und kann nun für entsprechende Ausgaben weiterverwendet werden:</p>
            <blockcode>
                [ 'Place 1: Heribert',
                  'Place 2: Friedlinde',
                  'Place 3: Tusnelda',
                  'Oswine',
                  'Ladislaus' ]
            </blockcode>
            <exercise>
                <name>Richtige Gewinner</name>
                <content>
                    <p>Die Ausgabe der Gewinner aus dem letzten Beispiel () ist immer noch nicht ideal. Am Besten wäre das folgende Ergebnisarray:</p>
                    <blockcode>[ '1st place: Heribert',
  '2nd place: Friedlinde',
  '3rd place: Tusnelda',
  'Oswine',
  'Ladislaus' ]</blockcode>
                    <p>Verbessern Sie den Code entsprechend.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/21/solutions/winners2.js"/>
                </answer>
            </exercise>
            <h3>Der geheimnisvolle Dritte &#x2014; Callbackparameter</h3>
            <p>Neben dem Indexoperator (zweiter Parameter) und dem aktuellen Wert (erster Parameter) können Sie sogar noch einen weiteren (dritten) Parameter abgreifen. Als dritten Parameter erhält die an <code>map</code> übergebene Callback-Funktion jeweils noch mal das komplette Ursprungsarray. In der Praxis gibt es aber nur selten Situationen, bei denen Sie den dritten Parameter tatsächlich benötigen.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered" src="accompanying_files/21/examples/three_callback_params.js"/>
            <p>Ausgabe:</p>
            <blockcode>
                v: Heribert, i: 0, a: Heribert,Friedlinde,Tusnelda,Oswine,Ladislaus
                v: Friedlinde, i: 1, a: Heribert,Friedlinde,Tusnelda,Oswine,Ladislaus
                v: Tusnelda, i: 2, a: Heribert,Friedlinde,Tusnelda,Oswine,Ladislaus
                v: Oswine, i: 3, a: Heribert,Friedlinde,Tusnelda,Oswine,Ladislaus
                v: Ladislaus, i: 4, a: Heribert,Friedlinde,Tusnelda,Oswine,Ladislaus
            </blockcode>
            <h3>Weitere Array-Callbackfunktionen </h3>
            <p>Praktischerweise funktionieren die optionalen Callback-Parameter nicht nur bei <code>map</code>, sondern auch bei vielen anderen Arrayfunktionen, wie:</p>
            <ul>
                <li>filter</li>
                <li>reduce</li>
                <li>reduceRight</li>
                <li>every</li>
                <li>some</li>
                <li>find</li>
                <li>findIndex</li>
                <li>forEach</li>
            </ul>
            <h1>Referenz</h1>
            <table>
                <caption>Callback-Parameter von Array-Higher-Order-Funktionen</caption>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Parameter der Callback-Funktion</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>map, filter, every, some, find, findIndex, forEach</td>
                        <td>
                            <ol>
                                <li><b>Value</b>: Der Wert des aktuell betrachteten Elements aus dem Array.</li>
                                <li><b>Index</b>: Ein laufender Index-Wert, beginnend bei 0.</li>
                                <li><b>Array</b>: Das komplette Array, auf dem <code>map</code> aufgerufen wird.</li>
                            </ol>
                        </td>
                    </tr>
                    <tr>
                        <td>reduce, reduceRight</td>
                        <td>
                            <ol>
                                <li><b>previousValue</b>: Ergebnis der letzten Ausführung des Callbacks. Beim ersten Aufruf ist es der Initialwert von <code>reduce</code>. Falls es keinen Initialwert gibt, verwendet <code>reduce</code> stattdessen den ersten Wert des Arrays.</li>
                                <li><b>Value</b>: Der Wert des aktuell betrachteten Elements aus dem Array.</li>
                                <li><b>Index</b>: Ein laufender Index-Wert, beginnend bei 0.</li>
                                <li><b>Array</b>: Das komplette Array, auf dem <code>reduce</code> aufgerufen wird.</li>
                            </ol>
                        </td>
                    </tr>
                    <tr>
                        <td>sort</td>
                        <td>
                            <p>1. &amp; 2. <b>element</b>: Elemente, die miteinander zu vergleichen sind.</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die folgende Funktion:</p>
                        <p><code>const showTodoList = (</code><blank><option>startChar, todos = ["get some milk"]</option><option>startChar, todos = ['get some milk']</option></blank><code>) =&gt; console.log(todos.map(t =&gt; `${startChar} ${t}` ).join('\n'));</code></p>
                        <p><b>Beispielaufruf </b></p>
                        <blockcode>showTodoList('*');</blockcode>
                        <p><b>Ausgabe</b></p>
                        <blockcode>* get some milk</blockcode>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Erzeugen aus dem String "abc" den String "3a-2b-1c"</p>
                        <p><code>'abc'.split('').map((</code><blank>x, i, a</blank><code>) =&gt; `${a.</code><blank>length</blank><code> - i}${x}`).join('-');</code></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Ergänzen Sie die folgende Funktion:</p>
                        <p><code>const showTodoList = (</code><blank><option>todos, startChars = "-&gt;"</option><option>todos, startChars ='-&gt;'</option></blank><code>) =&gt; console.log(todos.map(t =&gt; `${startChars} ${t}` ).join('\n'));</code></p>
                        <p><b>Beispielaufruf </b></p>
                        <blockcode>showTodoList(['find batteries', 'save World', 'get out of House']);</blockcode>
                        <p><b>Ausgabe</b></p>
                        <blockcode>-&gt; find batteries
-&gt; save World
-&gt; get out of House</blockcode>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Erzeugen Sie aus dem String 'xyz' den String 'x1-y2-z3'</p>
                        <p><code>"xyz".split('').map((</code><blank>x, i</blank><code>) =&gt; `</code><blank>${x}${i</blank><code>+1}`).join('-');</code></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Erzeugen aus dem String "abc" den String "3a-2b-1c"</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>'abc'.split('').map((x, i, a) =&gt; `${a.length - i}${x}`).join('-')</code></p>
                    </answer>
                    <answer>
                        <p><code>'abc'.split('').map((x, i, a) =&gt; `${i - a.length}${x}`).join('-')</code></p>
                    </answer>
                    <answer>
                        <p><code>'abc'.split('').map((x, i, a) =&gt; `${a.length - i}${x}-`).join()</code></p>
                    </answer>
                    <answer>
                        <p><code>'abc'.split('').map((x, i, a) =&gt; ${a.length - i}${x}).join('-')</code></p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Welche Funktion liefert zum vorgegebenen Aufruf das gewünschte Ergebnis?</p>
                        <p><b>Beispielaufruf </b></p>
                        <blockcode>showTodoList(['find batteries', 'save World', 'get out of House'])</blockcode>
                        <p><b>Ausgabe</b></p>
                        <blockcode>`->find batteries
->save World
->get out of House`</blockcode>
                    </question_text>
                    <answer correct="correct">
                        <p><code>const showTodoList = (todos, startChars = '-&gt;') =&gt; console.log(todos.map(t =&gt; `${startChars}${t}` ).join('\n'));</code></p>
                    </answer>
                    <answer>
                        <p><code>const showTodoList = (todos, startChars = '-&gt;') =&gt; console.log(todos.map(t =&gt; ${startChars} ${t} ).join('\n'));</code></p>
                    </answer>
                    <answer correct="correct">
                        <p><code>const showTodoList = (todos, startChars = '-&gt;') =&gt; console.log(todos.map(t =&gt; startChars + t ).join('\n'));</code></p>
                    </answer>
                    <answer>
                        <p><code>const showTodoList = (todos, startChars = '-&gt;') =&gt; console.log(todos.map(t =&gt; startChars + t ).join('-&gt;'));</code></p>
                    </answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Erzeugen Sie aus dem String 'xyz' den String 'x1-y2-z3'</p>
                    </question_text>
                    <answer correct="correct">
                        <p><code>'xyz'.split('').map((x, i) =&gt; `${x}${i + 1}`).join('-')</code></p>
                    </answer>
                    <answer>
                        <p><code>'xyz'.split('').map((x, i) =&gt; `${x}${i}`).join('-')</code></p>
                    </answer>
                    <answer>
                        <p><code>'xyz'.split('').map((x, i) =&gt; `${x}${i}-`).join()</code></p>
                    </answer>
                    <answer>
                        <p><code>'xyz'.split('').map((x, i) =&gt; ${x}${i + 1}).join('-')</code></p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Der Buchstabendieb</name>
                <content>
                    <p>Bei dem deutschen Kinderlied <a href="https://de.wikipedia.org/wiki/Auf_der_Mauer,_auf_der_Lauer">Auf der Mauer, auf der Lauer</a> singen Sie in jeder neuen Strophe bei den Wörtern <i>Wanze</i> und <i>tanzen</i> immer einen Buchstaben weniger, bis nichts mehr vom jeweiligen Wort übrig ist. </p>
                    <p>Schreiben Sie eine Funktion, der Sie ein beliebiges Wort übergeben können. Sie soll ein Array zurückliefern, bei dem jedes Element ein Teil des Wortes ist, sodass von Element zu Element immer ein Buchstabe verloren geht. Das letzte Element im Array muss immer ein leerer String sein.</p>
                    <h3>Beispiel</h3>
                    <blockcode>letterThief('dance') //=&gt; ['danc', 'dan', 'da', 'd', ''];</blockcode>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/21/solutions/letter_thief.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>ISBNx &#x2014; das Geheimnis der Prüfsumme [&#187;Kopfnuss&#171;]</name>
                <content>
                    <p>Wissen Sie, wie Bücher weltweit identifiziert werden? Dazu gibt es die <keyword>ISBN</keyword>, die <keyword>International Standard Book Number</keyword>.</p>
                    <p>Nehmen Sie einfach mal ein Buch aus Ihrem Bücherregal und drehen Sie es um. Auf der Rückseite &#x2014; da steht sie, die ISBN.</p>
                    <p>Seit 2007 wird nur noch die ISBN-13 verwendet, d.&#x202F;h. eine ISBN, die aus 13 Ziffern besteht. Interessant ist dabei vor allem, dass die letzte Ziffer eine sogenannte Prüfziffer ist. Sie lässt sich aus den anderen 12 Ziffern berechnen. Dadurch können Sie recht einfach feststellen, ob es sich bei einer 13-stelligen Zahl tatsächlich um eine gültige ISBN handelt oder nicht.</p>
                    <step>
                        <p>Schreiben Sie eine Funktion, die zu einer 12-stelligen Zahl wie beispielsweise <code>978151705411</code> die ISBN-Prüfziffer (hier: <code>3</code>) berechnet.</p>
                        <p>Wie genau funktioniert die Berechnung der Prüfziffer? Hier der Algorithmus:</p>
                        <ul>
                            <li>
                                <p>Bilden Sie die Summe der einzelnen Ziffern, wobei Sie jede zweite Ziffer mit 3 multiplizieren. <b>Beispiel anhand der 4-stelligen Zahl 4567:</b></p>
                                <blockcode>4567 =&gt; 4 + 5 * 3 + 6 + 7 * 3 =&gt; 46</blockcode>
                            </li>
                            <li>
                                <p>Vom Ergebnis dieser Berechnung verwenden Sie nur die letzte Ziffer und subtrahieren sie von 10. <b>Beispiel:</b>
                                </p>
                                <blockcode>4567 =&gt; 46 =&gt; 6 =&gt; 10 - 6 =&gt; 4</blockcode>
                            </li>
                            <li>Falls das Ergebnis 10 ist, ersetzen Sie es durch 0.</li>
                        </ul>
                    </step>
                    <step>Achten Sie darauf, dass Ihr Programm mit einer beliebigen Anzahl von Stellen (nicht nur genau 12) umgehen kann.</step>
                    <step>Erlauben Sie auch die Angabe einer ISBN mit Bindestrichen, wie z.&#x202F;B. in <code>978-3-86680-192-9</code></step>
                    <step>Kramen Sie ein paar Bücher aus Ihrem Regal, blasen Sie den Staub weg und drehen Sie sie auf die Rückseite. Testen Sie nun Ihr Programm mit den ISBNs der Bücher.</step>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/21/solutions/isbn_x.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson>
            <lesson_name>In großen Dimensionen denken: Mehrdimensionale Arrays</lesson_name>
            <topics>
                <li>dass Arrays wiederum Arrays enthalten können.</li>
                <li>wie Sie dank mehrdimensionaler Arrays ganz einfach ein Schachspiel programmieren können.</li>
            </topics>
            <h1>Schachmatt mit 2D-Arrays</h1>
            <hint src="images/hint/bjoern.png">
                <p>Wir planen für den Sommer ein &#187;Schachspecial&#171;. Wir wollen nämlich Schachfiguren-Eiswürfelformen verkaufen. Die lassen sich dann in leckere Kasparov- und DeepBlue-Cocktails geben. Wenn man schnell ist, kann man damit sogar Schach spielen.</p>
                <p>Im Rahmen einer Werbekampagne möchten wir berühmte Schachspiele zeigen &#x2014; Zug für Zug! Um die Visualisierung kümmert sich unsere Frontend-Entwicklerin. Aber Ihre Aufgabe als Entwickler ist es, eine passende Datenstruktur und die Kernlogik zu entwerfen. Ein kleine textuelle Ausgabe wäre natürlich auch nicht schlecht&#x202F;&#8230;</p>
                <figure width="50%">
                    <img src="images/photos/ice_chess.jpg"/>
                    <figcaption>© 2015 ThinkGeek, Inc. All Rights Reserved.</figcaption>
                </figure>
            </hint>
            <p>Das Kernproblem besteht darin, dass es sich bei einem Schachbrett um eine zweidimensionale Struktur handelt &#x2014; es besteht aus 8&#x202F;x&#x202F;8-Feldern. Diese Felder bilden ein Karomuster, bei dem sich weiße und schwarze Felder abwechseln. Zur Darstellung der Schachfiguren können Sie Buchstaben verwenden (z.&#x202F;B. <code>K</code> für <i>King</i> usw.) oder etwas mehr &#187;fancy&#171;: Sie verwenden die passenden UTF8-Zeichen. In UTF-8 sind alle Schachfiguren vorhanden, sowohl schwarze als auch weiße Figuren.</p>
            <p>Die erste Reihe des Schachbretts könnte als z.&#x202F;B. so aussehen:</p>
            <figure width="30%">
                <img src="images/chess/chessboard_console_first_line.png"/>
            </figure>
            <!--blockcode>♜♞♝♛♚♝♞♜</blockcode-->
            <p>Damit Sie die einzelnen Felder später getrennt auslesen und verändern können, ist es hilfreich, ein Array zu verwenden:</p>
            <blockcode>const firstRow = ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'];</blockcode>
            <p>Nun kommt der interessante Teil: Es gibt mehrere Reihen. Das Array müsste also zweidimensional sein. Es gibt aber keine &#187;echten&#171; 2D-Arrays in JS. Stattdessen besteht der Trick darin, Arrays ineinander zu verschachteln. Die Elemente eines Arrays müssen nicht notwendigerweise <code>Strings</code> oder <code>Numbers</code> sein. Sie können auch selbst wieder Arrays sein. Somit lässt sich das gesamte Brett wie folgt darstellen:</p>
            <blockcode src="accompanying_files/22/examples/chessboard.js" numbered="numbered"/>
            <p>Dort, wo keine Figuren stehen, können Sie UTF8-Zeichen für das Karomuster &#x2014; ausgefüllte und unausgefüllte Quadrate &#x2014; verwenden. Wenn Sie nun mit einem Index auf das Array zugreifen (z.&#x202F;B. <code>boardInStartPosition[7]</code>), erhalten Sie jeweils eine komplette Zeile zurück.</p>
            <blockcode>boardInStartPosition[7] // =&gt; ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']</blockcode>
            <p>Da es sich dabei wiederum um ein Array handelt, können Sie einen weiteren Index verwenden, um auf ein einzelnes Zeichen zuzugreifen. Z.&#x202F;B. ist die weiße Dame in Reihe 7 das Element an Position 3.</p>
            <blockcode numbered="numbered">
const lastRow = boardInStartPosition[7];
lastRow[3] // =&gt; '♕'
            </blockcode>
            <p>Sie benötigen nicht einmal eine Zwischenvariable; es geht auch direkt!</p>
            <blockcode>boardInStartPosition[7][3] // =&gt; '♕'</blockcode>
            <p>Selbstverständlich können Sie den Wert auch ändern &#x2014; falls z.&#x202F;B. die Dame von einem schwarzen Bauern geschlagen wurde, könnten Sie schreiben:</p>
            <blockcode>boardInStartPosition[7][3] = '♟';</blockcode>
            <p>Für den Rest der geforderten Funktionalität benötigen Sie nichts Neues. Mit der Funktion <code>board2string</code> können Sie das Schachbrett ausgeben.</p>
            <blockcode numbered="numbered">
const board2string = board =&gt;
  board.map(row =&gt; row.join('')).join('\n');
            </blockcode>
            <p>Sie erhalten für die Anfangsstellung (<code>board2string(boardInStartPosition)</code>) folgende Konsolen-Darstellung:</p>
            <figure width="30%">
                <img src="images/chess/chessboard_console.png"/>
            </figure>
            <p>Die folgenden Funktionen helfen Ihnen dabei, einen Zug wie <code>'e2e4'</code> auszuführen.</p>
            <blockcode numbered="numbered">
const originField = move =&gt; move.substr(0, 2);
const targetField = move =&gt; move.substr(2);
            </blockcode>
            <p>Die Funktionen <code>originField</code> und <code>targetField</code> extrahieren jeweils Start- und Zielfeld eines Zugs (<code>move</code>). Z.&#x202F;B. gibt <code>targetField('e2e4')</code> das Zielfeld <code>'e4'</code> zurück.</p>
            <figure width="35%">
                <img src="images/chess/chessboard.png"/>
                <figcaption>Schachbrett mit Spaltenangaben a-h und Zeilenangaben 1-8<br/>Quelle: wikipedia.org</figcaption>
            </figure>
            <blockcode numbered="numbered">
const fieldToXPosition = field =&gt; letterToChessIndex(field.charAt(0));
const fieldToYPosition = field =&gt; numberToChessIndex(field.charAt(1));
const letterToChessIndex = letter =&gt; 'abcdefgh'.indexOf(letter);
const numberToChessIndex = num =&gt; 8 - num;
            </blockcode>
            <p>Mittels <code>fieldToXPosition</code> bzw. <code>fieldToYPosition</code> lassen sich jeweils die X- und Y-Positionen als Indizes für das Array extrahieren.</p>
            <p>Wandeln Sie die Buchstaben des Schachbretts (<i>a-h</i>) in den jeweiligen Array-Index um &#x2014; mithilfe von <code>letterToChessIndex</code>. Außerdem ist die Y-Achse des Schachbretts umgekehrt nummeriert wie ein Array. Die erste Zeile im Array beginnt mit Index 0, die letzte hat Index 7. Das Schachbrett beginnt oben bei Zeile 8 und endet unten bei Zeile 1. Die Umrechnung erfolgt deswegen mittels <code>num =&gt; 8 - num</code>.</p>
            <h1>Zug um Zug</h1>
            <p>Jetzt können Sie die Funktion <code>execMove</code> schreiben, die den Zug ausführt.</p>
            <blockcode numbered="numbered" src="accompanying_files/22/examples/chess1.js"/>
            <p><code>execMove</code> kopiert die Figur von ihrer ursprünglichen Position <code>board[originY][originX]</code> auf das Zielfeld <code>board[targetY][targetX]</code>. Leider reicht das noch nicht ganz aus. Die Figur befindet sich jetzt doppelt auf dem Brett. Deswegen müssen Sie die Figur vom ursprünglichen Feld entfernen. Dazu kopieren Sie das passende Feld aus einem leeren Schachbrett (<code>emptyBoard</code>) zurück:</p>
            <blockcode>board[originY][originX] = emptyBoard[originY][originX];</blockcode>
            <p>Sie überschreiben die doppelte Figur durch das passende Feld (schwarzes oder weißes Quadrat) aus dem leeren Schachbrett. Das leere Schachbrett müssen Sie natürlich vorher noch anlegen:</p>
            <blockcode src="accompanying_files/22/examples/emptyBoard.js" numbered="numbered"/>
            <h3>Kleine Verbesserung: Unveränderliches Schachbrett</h3>
            <p>Um sicherzustellen, dass Sie beim Zugriff auf das leere Schachbrett (<code>emptyBoard</code>) oder die Startposition (<code>boardInStartPosition</code>) keine veränderten Arrays bekommen, ist es hilfreich, die Arrays per Funktion zurückzuliefern. Statt <code>const emptyBoard = [&#8230;]</code> schreiben Sie <code>const emptyBoard = () =&gt; [&#8230;]</code>.</p>
            <p>Hier nun der vollständige Code:</p>
            <blockcode src="accompanying_files/22/examples/chess2.js" numbered="numbered"/>
            <h1>Die Stellung entscheidet</h1>
            <p>Tatsächlich haben wir Björns Anforderungen noch nicht ganz erfüllt. Im Moment führen wir immer nur einen Zug aus. Damit unsere Frontend-Entwicklerin aber eine Meisterpartie visualisieren kann, müssen Sie mehrere Züge hintereinander realisieren! Probieren Sie doch mal folgende kleine Übung:</p>
            <exercise>
                <name>Schach: verschiedene Stellungen</name>
                <content>
                    <p>Erweitern Sie das Schachprogramm um eine zusätzliche Funktion: <code>execMoves(moves)</code>. Diese Funktion soll mehrere Züge als Array übergeben bekommen und diese dann nacheinander ausführen, z.&#x202F;B.</p>
                    <blockcode>
execMoves(['e2e4', 'e7e5', 'f2f4'])
                </blockcode>
                    <p>Es genügt dabei, wenn Sie lediglich die Stellung am Ende (nach allen Zügen) ausgeben.</p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/22/solutions/chess_execMoves.js"/>
                </answer>
            </exercise>
            <p>Haben Sie es hinbekommen? Keine Sorge, wir lösen es gleich auf. Idealerweise haben Sie eine <code>reduce</code>-Funktion eingesetzt, die eine Reihe von Zügen auf eine einzige Stellung am Ende reduziert.</p>
            <p>Das ist tatsächlich nicht viel anders als bei einer Summenbildung.</p>
            <blockcode numbered="numbered">
const add = (a, b) =&gt; a + b;
const sum = numbers =&gt; numbers.reduce(add, 0);
            </blockcode>
            <p>Die Funktion <code>sum</code> beginnt mit dem Initialwert 0 und addiert in jedem Schritt die jeweils nächste Zahl aus dem Array hinzu. Das Ergebnis jedes Einzelschritts ist eine neue Summe, bis schließlich als Endergebnis die Summe aller Zahlen aus dem Array <code>numbers</code> zurückgegeben werden kann. Genauso können Sie mit einer Startstellung des Schachbretts beginnen und in jedem Schritt statt der Funktion <code>add</code> die Funktion <code>execMove</code> aufrufen, sodass Sie nach jeder Ausführung eine neue Zwischen-Stellung erhalten, bis <code>reduce</code> schließlich am Ende die letzte Stellung (nach Ausführung aller Züge) zurückgibt.</p>
            <p>Die Berechnung einer Summe mit <code>reduce</code> und die Berechnung der letzten Stellung sind erstaunlich ähnlich. <code>reduce</code> &#187;reduziert&#171; alle Elemente eines Arrays zu einem einzigen Wert. Dabei ist <code>reduce</code> eher eine abstrakte Funktion. Wie diese Reduktion vonstatten geht, kann dabei völlig unterschiedlich sein. Sie geben <code>reduce</code> immer eine Vorschrift, was mit jeweils zwei Elementen zu tun ist, und <code>reduce</code> erledigt den Rest. Bei der Summe ist diese Vorschrift eben die Addition. Sie können auch sagen: Die Summe ist die &#187;Reduktion&#171; eines Arrays von Zahlen durch <b>Addition</b>, und die Schach-Endstellung ist die Reduktion eines Arrays von Zügen durch <b>Ausführung des jeweiligen Zugs</b>. </p>
            <p>Die Funktion <code>execMoves</code> können Sie also folgendermaßen implementieren:</p>
            <blockcode>const execMoves = moves =&gt;
  moves.reduce(execMove, boardInStartPosition());</blockcode>
            <p>Hier ist ein Aufrufbeispiel:</p>
            <blockcode numbered="numbered">
console.log(board2string(
  execMoves(['e2e4', 'e7e5', 'f2f4'])
));
            </blockcode>
            <p>Und hier ist noch mal das Beispiel im Ganzen:</p>
            <blockcode src="accompanying_files/22/examples/chess3.js" numbered="numbered"/>
            <h1>Ab jetzt neu: in 3D!</h1>
            <p>Ist das Problem gelöst? Können Sie nach Hause gehen und für die schnelle Lösung eine dicke Prämie einstreichen?</p>
            <p>Leider noch nicht ganz. Damit die Visualisierung gelingt, benötigt die Frontend-Entwicklerin jede Zwischen-Stellung, nach jedem einzelnen Zug!</p>
            <p>Wir liefern im Moment nur die letzte Stellung nach einer Reihe von Zügen. Wie lassen sich die Zwischen-Stellungen aufbewahren?</p>
            <p>Vermutlich haben Sie es schon befürchtet, nachdem wir es in der Überschrift gespoilert hatten: Sie benötigen eine weitere Dimension!</p>
            <p>Im Grunde benötigen Sie ein Array, bei dem jedes Element eine Stellung ist. Im Prinzip so:</p>
            <blockcode>[startPosition, positionAfterMove1, positionAfterMove2, ...]</blockcode>
            <p>Allerdings ist jede einzelne Position dabei selbst wiederum ein 2D-Array. Dementsprechend muss die gesamte Stellungs-Historie ein <keyword>3D-Array</keyword> sein. Betrachten Sie beispielsweise die Zugfolge <code>['e2e4', 'e7e5', 'f2f4']</code> &#x2014; nicht dass das besonders clevere Züge wären&#8230; Zu dieser Zugfolge gehört folgende Stellungs-Historie:</p>
            <figure width="21%" float="left">
                <img src="images/chess/chess_moves0.png"/>
                <figcaption>Startaufstellung</figcaption>
            </figure>
            <figure width="21%" float="left">
                <img src="images/chess/chess_moves1.png"/>
                <figcaption>e2e4</figcaption>
            </figure>
            <figure width="21%" float="left">
                <img src="images/chess/chess_moves2.png"/>
                <figcaption>e7e5</figcaption>
            </figure>
            <figure width="21%" float="left">
                <img src="images/chess/chess_moves3.png"/>
                <figcaption>f2f4</figcaption>
            </figure>
            <figure width="3%" float="none">
                <img src="images/transparent.png"/>
            </figure>
            <p>Dargestellt als dreidimensionales JS-Array sieht das dann so aus:</p>
            <blockcode numbered="numbered">
            [
              [
                [ '♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜' ],
                [ '♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟' ],
                [ '◻', '▦', '◻', '▦', '◻', '▦', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '▦', '◻', '▦', '◻' ],
                [ '◻', '▦', '◻', '▦', '♙', '▦', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '▦', '◻', '▦', '◻' ],
                [ '♙', '♙', '♙', '♙', '◻', '♙', '♙', '♙' ],
                [ '♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖' ]
              ],
              [
                [ '♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜' ],
                [ '♟', '♟', '♟', '♟', '▦', '♟', '♟', '♟' ],
                [ '◻', '▦', '◻', '▦', '◻', '▦', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '♟', '◻', '▦', '◻' ],
                [ '◻', '▦', '◻', '▦', '♙', '▦', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '▦', '◻', '▦', '◻' ],
                [ '♙', '♙', '♙', '♙', '◻', '♙', '♙', '♙' ],
                [ '♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖' ]
              ],
              [
                [ '♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜' ],
                [ '♟', '♟', '♟', '♟', '▦', '♟', '♟', '♟' ],
                [ '◻', '▦', '◻', '▦', '◻', '▦', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '♟', '◻', '▦', '◻' ],
                [ '◻', '▦', '◻', '▦', '♙', '♙', '◻', '▦' ],
                [ '▦', '◻', '▦', '◻', '▦', '◻', '▦', '◻' ],
                [ '♙', '♙', '♙', '♙', '◻', '▦', '♙', '♙' ],
                [ '♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖' ]
              ]
            ]
            </blockcode>
            <p>Dieses Historien-Array enthält 3 Elemente, von denen jedes einzelne die Stellung (Position) nach einem Zug repräsentiert. Jede Stellung ist dabei ein komplettes Schachbrett mit 8&#x202F;x&#x202F;8 Feldern als 2D-Array.</p>
            <p>Jetzt benötigen Sie also nur noch eine Funktion &#x2014; nennen wir sie <code>positionHistoryForMoves</code> &#x2014; die Ihnen zu der Zugfolge die komplette Historie liefert.</p>
            <p>Der erste Schritt besteht darin, aus einer einfachen Zugfolge wie <code>['e2e4',
                    'e7e5', 'f2f4']</code> ein 2D-Array zu gewinnen, bei dem jedes Element alle Züge seit Beginn der Partie bis zum aktuellen Zug (&#187;Zugpfad&#171;) beschreibt, also in diesem Fall: </p>
            <blockcode>
                [['e2e4'], ['e2e4', 'e7e5'], ['e2e4', 'e7e5', 'f2f4']]
            </blockcode>
            <p>Das lässt sich leichter realisieren als gedacht:</p>
            <blockcode numbered="numbered">
                ['e2e4', 'e7e5', 'f2f4'].map((move, i) =&gt; moves.substr(0, i + 1))
            </blockcode>
            <p>Sie mappen die einzelnen Züge jeweils auf ein Teil-Array (<code>slice</code>), das aus dem ursprünglichen Array <code>moves</code> alle Züge von Beginn (0) bis zur aktuellen Position (<code>i + 1</code>) enthält.</p>
            <p>Das Ergebnis ist ein Array mit &#187;Zugpfaden&#171;. Jeden einzelnen Pfad stecken Sie in die Funktion <code>execMoves</code>, und Sie erhalten die jeweilige Stellung.</p>
            <blockcode numbered="numbered">
                const positionHistoryForMoves = moves =&gt;
                  moves
                    .map((move, i) =&gt; moves.substr(0, i + 1))
                    .map(execMoves);
            </blockcode>
            <p>Wie immer, hier noch mal im Ganzen:</p>
            <blockcode src="accompanying_files/22/examples/chess4.js" numbered="numbered"/>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Geben Sie <code>x</code> zurück:</p>
                        <blockcode>const letters = [['a', 'b', 'c'], ['x', 'y', 'z']];</blockcode>
                        <p><code>letters[</code><blank>1</blank><code>][</code><blank>0</blank><code>]</code></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Geben Sie <code>'x'</code> zurück:</p>
                        <blockcode>const letters = [['a', 'b', 'c'], ['x', 'y', 'z']];</blockcode>
                    </question_text>
                    <answer correct="correct">
                        <p><code>letters[1][0]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[0][0]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[0][1]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[1][1]</code></p>
                    </answer>
                </question>
                <question type="multiple_choice" public="public" reviewed="reviewed">
                    <question_text>
                        <p>Geben Sie <code>'c'</code> zurück:</p>
                        <blockcode>const letters = [['a', 'b', 'c'], ['x', 'y', 'z']];</blockcode>
                    </question_text>
                    <answer correct="correct">
                        <p><code>letters[0][2]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[0][3]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[1][1]</code></p>
                    </answer>
                    <answer>
                        <p><code>letters[2][1]</code></p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise id="geoquiz">
                <name>Geoquiz</name>
                <content>
                    <p>Eine Schule gibt die Entwicklung eines <i>Geoquiz</i> in Auftrag, bei dem Schüler die Hauptstädte verschiedener Staaten nennen müssen. Ihre Aufgabe besteht in der Entwicklung der Lösungsfunktion <code>capitalOf</code>, die eine Hauptstadt zum übergebenen Staat (<code>country</code>) zurückliefert.</p>
                    <p>Im folgenden Code sehen Sie die gewünschte Struktur der Daten:</p>
                    <blockcode src="accompanying_files/22/exercises/geo_quiz1.js"/>
                </content>
                <answer>
                    <blockcode src="accompanying_files/22/solutions/geo_quiz1.js"/>
                </answer>
            </exercise>
            <exercise id="geoquiz2">
                <name>Geoquiz &#x2014; Teil 2</name>
                <content>
                    <p>In der erweiterten Ausbaustufe sollen die Schüler den Staat zu einer Hauptstadt nennen. Ihre Aufgabe ist es erneut, eine Lösungsfunktion zu programmieren. Dieses Mal nimmt <code>countryForCapital</code> eine Hauptstadt (<code>capital</code>) entgegen und liefert den zugehörigen Staat zurück.</p>
                    <p>Die Funktion soll auf die bestehende Konstante <code>countriesWithCapital</code> zugreifen. Es ist nicht erlaubt, die Struktur der Daten in der Konstante zu ändern.</p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/22/solutions/geo_quiz2.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Pokémon &#x2014; Evolution</name>
                <content>
                    <p>Kennen Sie <i>Pokémon</i>? Allen <i>Pokémon</i>-Spielen ist gemein, dass es Pokémon (Phantasiewesen) gibt, die über verschiedene Evolutionsstufen verfügen. Ein Pokémon kann sich bis zu zweimal weiterentwickeln. D.&#x202F;h. es gibt maximal drei Stufen: seine Anfangsstufe und bis zu zwei Folgestufen. Jede dieser Stufen trägt einen neuen Pokémon-Namen &#x2014; keiner dieser Namen kann doppelt vorkommen. Einen guten Überblick über die Stufen bei <i>Pokémon GO</i> finden Sie auf <a href="http://www.pokemongoevolution.com">http://www.pokemongoevolution.com</a>.</p>
                    <step>Schreiben Sie eine Funktion <code>stagesFor</code>, der Sie eine Pokémon-Evolutionsstufe übergeben und die Ihnen alle dazugehörigen Evolutionsstufen als Array zurückliefert. Als Daten verwenden Sie exemplarisch die Evolutionsstufen von <i>Pidgey</i>, <i>Vulpix </i>und <i>Dratini</i>.</step>
                    <step>Entwickeln Sie die Funktionen <code>stagesAfter</code> und <code>stagesBefore</code>, die Ihnen nur die Stufen vor bzw. nach der angefragten Stufe zurückliefern.</step>
                    <p>Im Übungsmaterial finden Sie folgende Vorlage:</p>
                    <blockcode src="accompanying_files/22/exercises/pokemon_evolution.js" numbered="numbered"/>
                    <p>Anhand der log-Aufrufe sehen Sie, welche Ausgabe die Funktionen erzeugen sollen.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/22/solutions/pokemon_evolution.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Fröhliches Mixen mit Arrays &#x2014; Teil 3</name>
                <content>
                    <figure width="60%">
                        <img src="images/photos/cocktails.jpg"/>
                        <figcaption>
                            <a href="https://www.flickr.com/photos/dinnerseries/">Didriks / dinnerseries</a>
                            <a href="https://creativecommons.org/licenses/by/2.0/legalcode">(CC) Attribution</a>
                        </figcaption>
                    </figure>
                    <p>Sie wollen mal wieder Cocktails mixen. Aber heute konnten Sie sich noch nicht so recht für einen bestimmten Cocktail entscheiden. Am besten wäre es doch, wenn Sie aus mehreren Rezepten herausfinden könnten, für welches Sie die passenden Zutaten haben. Nun wird es etwas kniffliger, denn Sie benötigen ein Array, das die Rezepte wiederum in Form von Arrays aus Zutaten enthält.</p>
                    <p>Die Konsole soll die Zutaten des ersten gefundenen Cocktails loggen.</p>
                    <blockcode numbered="numbered" src="accompanying_files/22/exercises/cocktails2.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/22/solutions/cocktails2.js"/>
                </answer>
            </exercise>
        </lesson>
        <lesson id="objects">
            <lesson_name>Objekte der Begierde</lesson_name>
            <topics>
                <li>den Umgang mit Objekten kennen.</li>
                <li>wie Objekte die Verwaltung verschiedenster Daten erleichtern.</li>
                <li>was das Dateiformat <i>.json</i> ist.</li>
            </topics>
            <hint src="images/hint/bjoern.png">
                <p>Unser Shop muss eine Reihe von Daten pro Produkt verwalten. Neben offensichtlichen Eigenschaften wie Name, Kategorie und Preis ist z.&#x202F;B. für die Lagerhaltung wichtig, wie viele Exemplare noch vorhanden sind. Außerdem interessiert die Kunden oft, wie lange es das Produkt schon gibt, etwa weil sie eine brandheiße Neuheit kaufen wollen, die ihr Nachbar noch nicht hat.</p>
            </hint>
            <p>Ähnliche Situationen finden Sie häufig in der Praxis. Dinge wie Produkte werden durch verschiedene Daten repräsentiert, z.&#x202F;B. <i>titel</i>, <i>preis</i>, usw. Außerdem können Sie unterschiedliche Operationen darauf anwenden, z.&#x202F;B. darstellen, lagern, verkaufen, versenden, &#8230;. Deswegen werden größere Softwaresysteme meist mit <b>objektorientierten</b> Konzepten entwickelt, die es ermöglichen, Daten und Operationen zu bündeln.</p>
            <p><keyword>Objektorientierte Programmierung</keyword> (kurz <keyword>OOP</keyword>) gilt als eine Standarddisziplin in unserer Branche. JS hat seinen eigenen Ansatz, von dem wir behaupten möchten, dass er modern, nützlich und dem anderer verbreiteter Sprachen oft überlegen ist. So verfügt JS über sehr mächtige Konzepte wie z.&#x202F;B. <keyword>Duck Typing</keyword> oder <keyword>dynamische Properties</keyword>, auf die bekannte, verbreitete Industriesprachen neidisch sein können<footnote>Allerdings können wir in dieser Einsteiger-Class leider nicht näher auf fortgeschrittene Konzepte wie <i>Duck Typing</i> eingehen.</footnote>. Leider verschleiert die suboptimale Syntax manchmal den Blick auf die weitreichenden Möglichkeiten von Javascript &#x2014; ein Problem, das neuere ECMAScript-Versionen zum Glück Schritt für Schritt beheben.</p>
            <p>Eine komplette Betrachtung der objektorientierten Philosophie würde den Rahmen dieser Class bei Weitem sprengen! Allerdings soll uns das nicht daran hindern, mal einen ersten Blick auf Objekte zu werfen.</p>
            <h1>Was für'n Ding? Objekte und Eigenschaften</h1>
            <p>Eine typische Funktion irgendwo in den Tiefen des Shops könnte z.&#x202F;B. so aussehen:</p>
            <blockcode numbered="numbered">
                let buyProduct = (customerName, customerFirstname, customerAddress, productName, productPrice, productCategory, availableSince, numberInStock) =&gt; {
                  // Code that implements the buying process
                };
            </blockcode>
            <p>Auch wenn das technisch kein Problem darstellt, sind Funktionen mit derart vielen Parametern in der Praxis unhandlich und führen zu schwer lesbarem Code. Woher wissen Sie, welcher der folgenden Aufrufe korrekt ist?</p>
            <blockcode numbered="numbered">
                buyProduct('Huana', 'Marie', 'Dragonroad 42, 90411 Puffcity', 'Klingon Letter Opener', 19.99, 'Office Ware', 2007, 5);
            </blockcode>
            <p>oder</p>
            <blockcode numbered="numbered">
                buyProduct('Marie', 'Huana', 'Dragonroad 42, 90411 Puffcity', 'Klingon Letter Opener',  'Office Ware', 2007, 5, 19.99);
            </blockcode>
            <p>Sie könnten jedesmal wieder in die Funktionsdefinition schauen, aber das kostet wertvolle Zeit.</p>
            <p>Tatsächlich gilt es als schlechte Praxis, Funktionen mit mehr als drei Argumenten zu befüttern (siehe <a href="#parameter_scopes"/>). Was können Sie dagegen tun? </p>
            <p>Einen Ausweg bieten Objekte. Sie ermöglichen Ihnen, zusammengehörige Werte zu gruppieren.</p>
            <blockcode numbered="numbered">let customer = {
  last_name: 'Huana',
  first_name: 'Marie',
  address: 'Dragonroad 42, 90411 Smokecity'
};

let product = {
  name: 'Klingon Letter Opener',
  category: 'Office Warfare',
  availableSince: 2007,
  inStock: 5,
  price: 19.99
};

buyProduct(customer, product);            </blockcode>
            <p>Beim neuen Funktionsaufruf ist die Wahrscheinlichkeit, dass Sie Argumente vertauschen, schon erheblich reduziert. Es gibt nur noch zwei Möglichkeiten, sie anzuordnen &#x2014; statt 40320 (8 * 7 * ... * 1) Möglichkeiten. Außerdem können Sie <code>productPrice</code> nun schlicht <code>price</code> nennen. Dass es sich um den Produktpreis handelt, ergibt sich aus der Zuordnung zum Produkt-Objekt &#x2014; so wird Ihnen auch niemand die peinliche Frage stellen, ob es sich vielleicht um den Preis des Kunden handelt&#x202F;&#8230;</p>
            <p>Die Objektschreibweise erlaubt Ihnen, Eigenschaften zu gruppieren, die zusammengehörig jeweils ein Ding beschreiben, wie z.&#x202F;B. einen Kunden oder einen klingonischen Brieföffner. Statt von Dingen reden wir von Objekten. <i>Ding-orientierte Programmierung</i> hätte vermutlich auch etwas albern geklungen.</p>
            <p>Die Syntax ist denkbar einfach. Innerhalb der geschweiften Klammern <code>{}</code> gruppieren Sie Eigenschaften (<keyword>Properties</keyword>) mithilfe sogenannter <keyword>Key/Value-Pairs</keyword> (dt: Name/Wert-Paare). Vor dem Doppelpunkt <code>:</code> steht der <keyword>key</keyword>, d.&#x202F;h. der Name der Eigenschaft. Danach folgt der <keyword>value</keyword> &#x2014; der Wert der Eigenschaft. Diese einzelnen Key/Value-Pairs werden innerhalb des Objektes durch Komma getrennt. Nach dem letzten Key/Value-Pair ist das Komma optional.</p>
            <blockcode>
                {
                  key1: value1,
                  key2: value2,
                  ...
                }
            </blockcode>
            <hint src="images/hint/teacher_left.jpg">
                <h3>Programmierrichtlininie</h3>
                <p>Fügen Sie nach dem Doppelpunkt (zwischen Key und Value) jeweils ein Leerzeichen ein.</p>
            </hint>
            <p>Sie können jederzeit von außerhalb eines Objektes wieder auf eine Property zugreifen, indem Sie folgende Punktnotation verwenden:</p>
            <blockcode>
                product.name //=&gt; 'Klingon Letter Opener'
            </blockcode>
            <p>Mittels <code>console.dir(product)</code> erhalten Sie eine tabellarische Auflistung der einzelnen Properties und ihrer Werte:</p>
            <table>
                <thead>
                    <tr>
                        <th>Property-Key</th>
                        <th>Property-Wert</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>availableSince</td>
                        <td>2007</td>
                    </tr>
                    <tr>
                        <td>category</td>
                        <td>Office Warefare</td>
                    </tr>
                    <tr>
                        <td>inStock</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>Klingon Letter Opener</td>
                    </tr>
                    <tr>
                        <td>price</td>
                        <td>19.99</td>
                    </tr>
                </tbody>
            </table>
            <p>Sie können Eigenschaften auch ändern:</p>
            <blockcode>product.price = 24.99;</blockcode>
            <p>Ein erneutes <code>console.log(product)</code> zeigt Ihnen den geänderten Wert. Properties verhalten sich ähnlich wie Variablen. Sie können einen Wert zuweisen, Sie können den Wert auslesen und Sie können den Wert wieder ändern (d.&#x202F;h. neu zuweisen).</p>
            <h3>Alternative Schreibweise: Klammern statt Punkte!</h3>
            <p>Sie können statt der Punktschreibweise auch die Index-Schreibweise mit den eckigen Klammern, die Sie von den Arrays kennen, verwenden:</p>
            <p><code>product.price</code> ist das Gleiche wie <code>product['price']</code>. Auch
                die Zuweisung funktioniert mit dem Indexoperator:</p>
            <blockcode>product['price'] = 24.99;            </blockcode>
            <p>Normalerweise ist es sinnvoller, die kürzere Punkt-Schreibweise zu verwenden. Nur falls der Key noch nicht bekannt ist und aus einer Variable kommt, ist es nötig, die Klammernschreibweise zu verwenden, z.&#x202F;B.</p>
            <blockcode numbered="numbered">const fieldToZeroOut = 'price';
product[fieldToZeroOut] = 0;            </blockcode>
            <p>Im obigen Beispielcode soll ein Feld auf den Wert <code>0</code> gesetzt werden. Welches Feld das ist, ergibt sich aber erst bei der Programmausführung. Statt dass der Wert von <code>fieldToZeroOut</code> fest mit <code>price</code> verdrahtet ist, könnte er aus einer Benutzereingabe stammen.</p>
            <h1>Beschwingt mit dynamischen Properties</h1>
            <h3>Hinzufügen neuer Properties</h3>
            <p>Properties sind in JavaScript voll dynamisch, d.&#x202F;h. Sie können jederzeit zu bestehenden Objekten neue Properties hinzufügen, oder bestehende wieder entfernen. Das &#187;jederzeit&#171; ist in JS wirklich etwas Besonderes. In vielen anderen Programmiersprachen ist das nachträgliche Hinzufügen und Entfernen von Properties bestehender Objekte nicht mehr (oder nur schwer) möglich.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered"> let product = {
  name: 'Klingon Letter Opener',
  category: 'Office Warfare',
  availableSince: 2007,
  inStock: 5,
  price: 19.99
};

product.description = 'for hand-to-hand combat with pesky envelopes';

console.dir(product);</blockcode>
            <table>
                <thead>
                    <tr>
                        <th>Property-Key</th>
                        <th>Property-Wert</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>availableSince</td>
                        <td>2007</td>
                    </tr>
                    <tr>
                        <td>category</td>
                        <td>Office Warefare</td>
                    </tr>
                    <tr>
                        <td>description</td>
                        <td>perfect for hand-to-hand combat with pesky envelopes</td>
                    </tr>
                    <tr>
                        <td>inStock</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>Klingon Letter Opener</td>
                    </tr>
                    <tr>
                        <td>price</td>
                        <td>19.99</td>
                    </tr>
                </tbody>
            </table>
            <p>Im Übrigen sortiert ein Objekt die neue Eigenschaft nicht an einer speziellen Stelle ein, wie das etwa bei Arrays der Fall ist. Die einzelnen Eigenschaftsnamen (keys) haben untereinander keine Reihenfolge. Bei der Ausgabe sortiert ein <code>console.log</code> bzw. <code>console.dir</code> sie jedoch üblicherweise alphabetisch.</p>
            <h3>Leere Objekte</h3>
            <p>Sie können Objekte genau wie Arrays auch zunächst komplett leer anlegen. Attribute können Sie dann schrittweise ergänzen. Ein leeres Objekt können Sie als <code>{}</code> literal notieren.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered">let product = {};

product.name = 'Klingon Letter Opener';
product.description = 'for hand-to-hand combat with pesky envelopes';

console.dir(product);            </blockcode>
            <table>
                <thead>
                    <tr>
                        <th>Property-Key</th>
                        <th>Property-Wert</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>description</td>
                        <td>perfect for hand-to-hand combat with pesky envelopes</td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>Klingon Letter Opener</td>
                    </tr>
                </tbody>
            </table>
            <exercise>
                <name>Geoquiz &#x2014; Teil 3</name>
                <content>
                    <p>Überarbeiten Sie das <i>Geoquiz</i> (<a href="#geoquiz"/>). Verwenden Sie diesmal für die Daten ein Objekt statt des Arrays. Greifen Sie dabei auf die neue Konstante <code>countriesWithCapital</code> zu:</p>
                    <blockcode src="accompanying_files/23/exercises/geo_quiz3.js"/>
                    <p>Passen Sie zunächst nur die Funktion <code>capitalOf</code> an, sodass sie die neue Datenstruktur verwendet.</p>
                    <h3>Hinweis</h3>
                    <p>Möglicherweise wundern Sie sich, dass die Keys hier in Anführungszeichen stehen. Im Grunde ist es egal, ob sie in Anführungszeichen stehen oder nicht. Technisch ist beides möglich. In der Praxis macht es hier Sinn, Anführungszeichen zu verwenden, weil diese Keys (Länder) &#x2014; genau wie die Values (Städte) &#x2014; datenartigen Charakter haben. Dadurch lässt es sich nicht ausschließen, dass eine Erweiterung des Programmes irgendwann einmal Ländernamen verwendet werden, die Leer- oder Sonderzeichen enthalten (z.&#x202F;B. "U.S.A."). Dann wären die Anführungszeichen zwingend nötig.</p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/23/solutions/geo_quiz3.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Knack den Code mit Wortanalyse [&#187;Kopfnuss&#171;]</name>
                <content>
                    <p>Ihr Auftraggeber ist der Hersteller einer Krypto-Software, die sich mit dem Knacken von Codes beschäftigt. Einer der neuen Algorithmen soll anhand von Worthäufigkeiten Rückschlüsse über verschlüsselte Texte ermöglichen. Deswegen hat er bei Ihnen die Funktion <code>wordOccurance</code> in Auftrag gegeben, die Worthäufigkeiten ermittelt. </p>
                    <p><code>wordOccurance</code> soll einen Text einlesen und die Häufigkeit aller Wörter bestimmen. Der Rückgabewert soll ein Objekt sein in der Form: <code>{Wort1: Häufigkeit1, Wort2: Häufigkeit2, ...}</code>.</p>
                    <h3>Beispiel</h3>
                    <p>Folgender Code:</p>
                    <blockcode numbered="numbered">const text = 'In cryptology, a code is a method used to encrypt a message that operates at the level of meaning; that is, words or phrases are converted into something else. A code might transform "change" into "CVGDK" or "cocktail lounge". A codebook is needed to encrypt, and decrypt the phrases or words.';

console.log(wordOccurrance(text));</blockcode>
                    <p>sollte ausgeben:</p>
                    <blockcode numbered="numbered">
                    { in: 1,
                      cryptology: 1,
                      a: 5,
                      code: 2,
                      is: 3,
                      ...
                      decrypt: 1 }
                </blockcode>
                    <h3>Hinweise</h3>
                    <ul>
                        <li>Betrachten Sie groß- oder kleingeschriebene Wörter als identisch, z.&#x202F;B: &#187;a&#171; und &#187;A&#171;. Das erreichen Sie z.&#x202F;B., in dem Sie den kompletten Text zunächst in Kleinbuchstaben umwandeln.</li>
                        <li>Entfernen Sie mittels <code>.replace(/[.,"';]/g, '')</code> alle
                            unerwünschten Zeichen. Entfernen lässt sich durch Ersetzen mit dem
                            leeren String <code>''</code> realisieren. <code>/[.,"';]/g</code> ist
                            ein sogenannter <keyword>Regulärer Ausdruck</keyword>. Reguläre
                            Ausdrücke helfen beim Auffinden von Mustern. Der Ausdruck
                            <code>/[.,"';]/g</code> bedeutet hier: <code>replace</code> soll jedes
                            der in den eckigen Klammern angegebenen Zeichen global (<code>g</code>)
                            ersetzen.</li>
                        <li>Wörter erhalten Sie, indem Sie anhand des Leerzeichens splitten.</li>
                        <li>Speichern Sie jedes Wort als <i>Key</i> in ein Objekt und erhöhen Sie die Häufigkeit im <i>Value</i> bei jedem weiteren Vorkommen des Wortes.</li>
                    </ul>
                </content>
                <answer>
                    <blockcode src="accompanying_files/23/solutions/word_occurrance.js"/>
                </answer>
            </exercise>
            <h1>JSON &#x2014; der Typ mit der Maske?</h1>
            <hint src="images/hint/bjoern.png">
                <p>Wir haben festgestellt, dass wir Produkte oft gerne in mehrere Kategorien einsortieren würden. So gehört der <i>Klingon Letter Opener </i>beispielsweise sowohl in die Kategorie <i>Office Warefare</i> als auch in die Kategorie <i>StarTrek</i>. Lässt sich das darstellen?</p>
            </hint>
            <p>Kein Problem! Für &#187;mehrere Dinge&#171; gibt es schließlich Arrays! Nichts spricht dagegen, innerhalb von Objekten Arrays zu verwenden und umgekehrt:</p>
            <blockcode numbered="numbered">
                let product = {
                  name: 'Klingon Letter Opener',
                  category: ['Office Warfare', 'StarTrek'],
                  availableSince: 2007,
                  inStock: 5,
                  price: 19.99
                };

            </blockcode>
            <p>Und mit &#187;umgekehrt&#171; meinen wir z.&#x202F;B. eine Liste von Produkten:</p>
            <blockcode numbered="numbered">
                let products = [
                  {
                    name: 'Klingon Letter Opener',
                    category: ['Office Warfare', 'StarTrek'],
                    availableSince: 2007,
                  },
                  {
                    name: '3Doodler 3D Printing Pen',
                    category: ['Design', 'Hits for Kids'],
                    availableSince: 1999,
                  },
                  {
                    name: '8-Bit Heat-Change Mug',
                    category: ['Coffee Equipment'],
                    availableSince: 2016,
                  }
                ];
            </blockcode>
            <figure float="left" width="30%">
                <img src="images/json_logo.png"/>
                <figcaption>JSON Logo</figcaption>
            </figure>
            <p>Tatsächlich lässt sich auf diese Weise mithilfe von JS praktisch jede Art von Daten darstellen. Sie können so mit JS gewissermaßen Datenbanken im Speicher bauen, oder &#x2014; noch besser &#x2014; solche Datensammlungen auch übers Netzwerk verschicken! Das hat auch Douglas Crockford bereits 2001 erkannt und dann diesem Teil von JS einen eigenen Namen gegeben: <keyword>JSON</keyword>. Man spricht das wie den Vornamen <i>Jason</i> aus. Ja &#x2014; wir wissen auch, dass das sehr nach dem Axt-schwingenden Massenmörder aus <i>Freitag der 13.</i> klingt. Gemeint ist aber hier die Abkürzung für <i>JavaScript Object Notation</i> &#x2014; eine Notation also, die JavaScript-Objekte verwendet.</p>
            <p>Douglas Crockford gilt tatsächlich nicht als der <i>Erfinder</i> von JSON, sondern als der <i>Entdecker</i>. Bei JSON handelt es sich um eine nahezu 100%ige Teilmenge der Sprache JavaScript. Da JSON bereits als Teil von JavaScript existierte, bestand Crockfords Errungenschaft darin, es zu herauszuarbeiten und zu beschreiben. Er erstellte eine Website mit der Grammatikbeschreibung (<a href="http://json.org">json.org</a>), die dann von vielen anderen Sprachen aufgegriffen wurde, um JSON-Support anzubieten. Heute ist JSON-Support für praktisch alle modernen Programmiersprachen verfügbar. JSON ist mittlerweile ein internationaler Standard (ECMA-404 &amp; RFC7159) und außerdem das vermutlich am meisten-verbreitete sprachunabhängige Datenaustauschformat im Web.</p>
            <p>In JSON erlaubt sind:</p>
            <ul>
                <li>Object</li>
                <li>Array</li>
                <li>Number</li>
                <li>Boolean</li>
                <li>String</li>
                <li>null</li>
            </ul>
            <p>Das heißt, Sie haben die Basisdatentypen Number, Boolean und String zur Verfügung, die Sie mit Objekten und Arrays strukturieren können. Objekte und Arrays lassen sich beliebig schachteln. Das Schlüsselwort <code>null</code> steht für einen leeren Datensatz. Hier sind ein paar Beispiele für gültige JSON-Datensätze:</p>
            <ul>
                <li>27.5</li>
                <li>[27.5, "Hello"]</li>
                <li>{"name": "Ladislaus", "age": 27, "married": false}</li>
                <li>[{"name": "Ladislaus", "age": 27}, {"name": "Alice", "hobbies": ["reading", "biking", "stopping mass murderers"]}]</li>
            </ul>
            <p>Beachten Sie dabei folgende wichtigen Unterschiede zu &#187;normalem&#171; JavaScript:</p>
            <ul>
                <li>In JavaScript dürfen Sie die Anführungszeichen um einen Object-Key weglassen,
                    wenn der Key keine Leerzeichen enthält, z.&#x202F;B.
                    <code>{name: 'Ladislaus'}</code> statt <code>{"name": "Ladislaus"}</code>. In
                    JSON sind die Anführungszeichen zwingend.</li>
                <li>In JavaScript dürfen Strings in einfachen oder doppelten Anführungsszeichen stehen, z.&#x202F;B. <code>{"name": 'Ladislaus'}</code>. In JSON müssen es immer doppelte sein, z.&#x202F;B. <code>{"name": "Ladislaus"}</code>.</li>
            </ul>
            <p>Falls Sie es noch genauer wissen möchten: Auf <a href="http://json.org">json.org</a> ist die Syntax von JSON genau beschrieben.</p>
            <hint src="images/hint/bjoern.png">
                <p>Können wir unsere Produktdaten eigentlich auch einfach importieren und exportieren?</p>
            </hint>
            <p>JS stellt für den Im- und Export von JSON-Daten eigene Funktionen zur Verfügung:</p>
            <ul>
                <li>
                    <code>JSON.parse</code>
                </li>
                <li>
                    <code>JSON.stringify</code>
                </li>
            </ul>
            <p><code>JSON.stringify</code> wandelt beliebige JS-Daten in einen JSON-String um.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered">JSON.stringify(
  {
    name: 'Klingon Letter Opener',
    inStock: 5,
    price: 19.99
  }
)
// =&gt; '{"name": "Klingon Letter Opener","inStock": 5,"price": 19.99}'</blockcode>
            <p><code>JSON.parse</code> liest einen JSON-String ein, parst ihn und gibt passende JavaScript-Daten zurück.</p>
            <h3>Beispiel</h3>
            <blockcode numbered="numbered">JSON.parse(
  '{"name": "Klingon Letter Opener","inStock": 5,"price": 19.99}'
)
// =&gt; {name: "Klingon Letter Opener", inStock: 5, price: 19.99}        </blockcode>
            <p>Praktischerweise können auch andere Programmiersprachen mit JSON-Strings umgehen. Somit ist JSON ein hervorragendes Austauschformat zwischen verschiedenen Sprachen und Plattformen.</p>
            <h1>Referenz</h1>
            <table>
                <caption>Objekt-Funktionen am Beispiel
                    <code>user = {name: 'Ladislaus', age: 27}</code><br/>Object.values und
                    Object.entries stehen erst ab <i>ECMAScript 2017</i> zur Verfügung. </caption>
                <thead>
                    <tr>
                        <th>Funktion</th>
                        <th>Zweck</th>
                        <th>Beispiel</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <code>Object.keys</code>
                        </td>
                        <td>Gibt die Keys eines Objekts als Array zurück</td>
                        <td>
                            <blockcode>Object.keys(user) //=&gt; ['name', 'age']</blockcode>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>Object.values</code>
                        </td>
                        <td>Gibt die Values eines Objekts als Array zurück</td>
                        <td>
                            <blockcode>Object.values(user) //=&gt; ['Ladislaus', 27]</blockcode>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <code>Object.entries</code>
                        </td>
                        <td>Gibt die Key/Value-Pairs eines Objekts als Array zurück</td>
                        <td>
                            <blockcode>Object.entries(user) //=&gt; [['name', 'Ladislaus'], ['age', 27]]</blockcode>
                        </td>
                    </tr>
                </tbody>
            </table>
            <hint>
                <h3>Objekte vs. Higher-Order-Funktionen</h3>
                <p>Auf ein Objekt können Sie die meisten Higher-Order-Funktionen aus <a href="#higher_order_functions"/> (z.&#x202F;B. <code>map</code>, <code>reduce</code>, &#8230;) nicht direkt anwenden. Was können Sie also tun? Es gibt mehrere Möglichkeiten. Am einfachsten ist es, wenn Sie mithilfe von <code>Object.keys</code>, <code>Object.values</code> oder <code>Object.entries</code> aus dem Objekt ein Array erzeugen, auf das sich die Higher-Order-Funktionen problemlos anwenden lassen.</p>
            </hint>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                <question_text>
                    <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                    <blockcode>Number(Object.keys({"1": 2, "3": 4})[1])</blockcode>
                    <p>Rückgabewert: <blank>3</blank></p>
                </question_text>
            </question>
            <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                <question_text>
                    <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                    <blockcode>Object.values({"1": 2, "3": 4})[1]</blockcode>
                    <p>Rückgabewert: <blank>4</blank></p>
                </question_text>
            </question>
            <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                <question_text>
                    <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                    <blockcode>Object.entries({5: 6, 7: 8}).map(x =&gt; x[1])</blockcode>
                    <p>Rückgabewert: <blank>[6, 8]</blank></p>
                </question_text>
            </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                        <blockcode>Number(Object.keys({"1": 2, "3": 4})[1])</blockcode>
                    </question_text>
                    <answer correct="correct"><p>3</p></answer>
                    <answer><p>2</p></answer>
                    <answer><p>1</p></answer>
                    <answer><p>4</p></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                        <blockcode>Object.values({"1": 2, "3": 4})[1]</blockcode>
                    </question_text>
                    <answer correct="correct"><p>4</p></answer>
                    <answer><p>3</p></answer>
                    <answer><p>2</p></answer>
                    <answer><p>1</p></answer>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Rückgabewert von folgendem Code:</p>
                        <blockcode>Object.entries({5: 6, 7: 8}).map(x =&gt; x[1])</blockcode>
                    </question_text>
                    <answer correct="correct"><p>[6, 8]</p></answer>
                    <answer><p>[5, 7]</p></answer>
                    <answer><p>[7, 8]</p></answer>
                    <answer><p>[5, 6]</p></answer>
                </question>
            </questions>
                <h1>Übungen</h1>
            <exercise>
                <name>Geoquiz &#x2014; Teil 4</name>
                <content>
                    <p>Überarbeiten Sie das <i>Geoquiz</i> (<a href="#geoquiz2"/>). Verwenden Sie dabei wieder die neue Konstante <code>countriesWithCapital</code>:</p>
                    <blockcode src="accompanying_files/23/exercises/geo_quiz4.js"/>
                    <p>Passen Sie nun die Funktion <code>countryForCapital</code> an, sodass sie die neue Datenstruktur verwendet.</p>
                </content>
                <answer>
                    <blockcode src="accompanying_files/23/solutions/geo_quiz4.js"/>
                </answer>
            </exercise>
         <!--   <exercise>
                <name><?oxy_comment_start author="juerg" timestamp="20200622T162214+0200" comment="soll cocktailReciepsWithNames ein JSON Object sein ? Wenn ja wieso ?" id="aw2_tpd_2mb"?><?oxy_comment_start author="niclaskahlmeier" timestamp="20200628T232125+0200" comment="da fragst du mich was ... ich habe keine ahnung wieso das so ist. lass uns darüber sprechen" parentID="aw2_tpd_2mb" mid="94"?>Fröhliches Mixen mit JSON<?oxy_comment_end mid="94"?><?oxy_comment_end?></name>
                <content>
                    <p>Dieses Mal haben Sie eine Liste von Cocktails im Internet gefunden &#x2014; praktischerweise auch noch im JSON-Format! Finden Sie heraus, welche der Cocktails Sie mit Ihrer Hausbar mixen können.</p>
                    <p>Geben Sie dieses Mal die Namen (aber nicht die Zutaten) aller Cocktails aus, die Sie mixen können.</p>
                    <blockcode numbered="numbered" src="accompanying_files/23/exercises/cocktails_json.js"/>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/23/solutions/cocktails_json.js"/>
                </answer>
            </exercise>-->
        </lesson>
        <lesson>
            <lesson_name>Appetit auf &#187;Zerstörung&#171;?&#x00A0;&#x2014; Destructuring</lesson_name>
            <topics>
                <li>wie ein bisschen Zerstörungswahn Ihren Code vereinfacht.</li>
                <li>dass in JavaScript (fast) alles mittels Destructuring vereinfacht wird.</li>
                <li>wie Sie benannte Parameter und Vorgabewerte benutzen.</li>
            </topics>
            <hint src="images/hint/bjoern.png">
                <p>Ich hab' kürzlich unseren Keller aufgeräumt und bin dabei über ein paar alte USB-Sticks gestolpert. Sie enthalten Excel-Listen mit Produkten, die wir früher mal im Katalog hatten. Einige davon würden wir gerne wieder anbieten. Für den neuen Shop bräuchten wir die Produkte aber im JSON-Format.</p>
                <p>Könnten Sie die Daten konvertieren?</p>
            </hint>
            <p>Damit wir mit Björns Daten einfacher arbeiten können, haben wir sie zunächst nach CSV konvertiert. CSV steht für <i>Comma Separated Values</i> (dt.: Werte, die durch Kommas getrennt sind) &#x2014; ein einfaches Textformat, das sich mit JS leicht verarbeiten lässt. Hier ein Beispiel:</p>
            <figure>
                <blockcode>name, category, price
Klingon Letter Opener, Office Warfare, 19.99
Backpack of Holding, Travel, 29.99
Tardis Alarmclock, Merchandise, 15.99</blockcode>
                <figcaption>Produkte im CSV-Format</figcaption>
            </figure>
            <p>Die erste Zeile beschreibt die Eigenschaften der Produkte. Danach folgen die Produkte zeilenweise. Jede Zeile besteht aus einem Produkt. Dabei sind die einzelnen Werte durch Komma getrennt. </p>
            <p>Wie verwandeln Sie eine solche Liste in JSON?</p>
            <p>Beginnen Sie damit, den CSV-String nach Zeilen zu trennen. Das lässt sich leicht mit
                <code>split('\n')</code> bewerkstelligen. Danach werfen Sie die erste Zeile weg, die
                nur die Eigenschaftsnamen enthält (<code>slice(1)</code>). Schließlich möchten Sie
                noch Leerzeichen am Anfang und Ende der Strings entfernen. Dafür bietet es sich an,
                eine kleine Hilfsfunktion namens <code>trim</code> zu verwenden. <code>trim</code>
                arbeitet mithilfe einer Regular Expression, die wir hier aber nicht weiter
                betrachten wollen. Wichtig ist nur, dass sie überschüssige Leerzeichen entfernt,
                z.&#x202F;B. </p>
            <p><code>trim(' Klingon...') //=&gt; 'Klingon...'</code>.</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_csv.1.js"/>
            <p>Sie erhalten folgende Ausgabe:</p>
            <blockcode>[ 'Klingon Letter Opener, Office Warfare, 19.99',
  'Backpack of Holding, Travel, 29.99',
  'Tardis Alarmclock, Merchandise, 15.99' ]</blockcode>
            <p>Damit haben Sie die Produkte als einzelne Array-Elemente, allerdings ist jedes davon immer noch ein String. Als Nächstes benötigen Sie eine Funktion, die ein Produkt als CSV-String entgegennimmt und in ein Objekt mit entsprechenden Eigenschaften konvertiert. Hier ein erster Ansatz:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_csv.2.js"/>
            <p>Sie erhalten ein passendes Objekt:</p>
            <blockcode>{ name: 'Backpack of Holding',
  category: 'Travel',
  price: '29.99' }</blockcode>
            <p>Wie genau arbeitet die Funktion <code>productFromCSV</code>? </p>
            <p><code>productString.split(', ')</code> zerlegt den String in ein Array, das die
                einzelnen Eigenschaften in der Reihenfolge des Strings enthält:
                <code>['Backpack of Holding', 'Travel', '29.99']</code>. Danach bestücken
                Zuweisungen die Konstanten <code>name</code>, <code>category</code> und
                <code>price</code> mit den passenden Elementen des Arrays. </p>
            <blockcode>const name = productArray[0];
const category = productArray[1];
const price = productArray[2];</blockcode>
            <p>Schließlich gibt die Funktion ein neues Objekt zurück, das die Namen der Eigenschaften als <i>Keys</i> und die eben zugewiesenen Konstanten als <i>Values</i> verwendet.</p>
            <blockcode>return {
  name: name,
  category: category,
  price:  price
};</blockcode>
            <p>Damit leistet die Funktion genau, was sie soll &#8230;, aber der Code lässt sich noch ein wenig verbessern. Die Konstante <code>productArray</code> ist nicht weiter hilfreich. Sie führt z.&#x202F;B. keinen neuen Namen ein, der die Lesbarkeit der Funktion verbessern würde. Im Grunde ist sie ein notwendiges Übel. Es geht nur darum, die Konstanten <code>name</code>, <code>category</code> und <code>price</code> mit den passenden Elementen zu bestücken. Eine Möglichkeit, auf die Variable zu verzichten, wäre folgende:</p>
            <blockcode>const name = productString.split(', ')[0];
const category = productString.split(', ')[1];
const price = productString.split(', ')[2];</blockcode>
            <p>Auch das ist nicht ideal. Der Code führt den <code>split</code> gleich dreimal aus. Abgesehen davon, dass das dann auch dreimal so lange dauert, ist es redundant und nicht unbedingt übersichtlich und wartbar. So müssen Sie beispielsweise immer daran denken, Indizes anzupassen, sollten Sie später weitere Elemente einfügen, z.&#x202F;B.:</p>
            <blockcode>const name = productString.split(', ')[0];

const description = productString.split(', ')[1];

const category = productString.split(', ')[2]; // Index changed from 1 to 2
const price = productString.split(', ')[3]; // Index changed from 2 to 3</blockcode>
            <h1>Arrays auseinandernehmen mit Destructuring</h1>
            <p>Abhilfe schafft ein Feature, das mit ES2015 Einzug in die Sprache hielt: das sogenannte <keyword>Destructuring</keyword> (engl.: <i>to destructure</i> &#x2014; dt.: <i>zerlegen</i>). Damit lassen sich Arrays in ihre Bestandteile zerlegen und gleichzeitig zuweisen. Nach folgender Zeile sind die Konstanten <code>name</code>, <code>category</code> und <code>price</code> mit den richtigen Werten belegt.</p>
            <blockcode>const [name, category, price] = ['Backpack of Holding', 'Travel', '29.99'];</blockcode>
            <p>Das funktioniert im Grunde so: Auf der linken Seite der Zuweisung geben Sie ein Muster (engl.: <keyword>pattern</keyword>) an. JS versucht nun, das passende Muster auf der rechten Seite zu identifizieren (engl.: <keyword>match</keyword>) und die Einzelteile korrekt zuzuordnen. Deswegen gilt Destructuring auch als eine Form des sogenannten <keyword>Pattern Matching</keyword>. Bauen Sie den Code nun ein:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_csv.3.js"/>
            <p>Wie Sie sehen, entfällt der Umweg über die Zwischenvariable <code>productArray</code>. Die Konstanten lassen sich direkt zuweisen. Sie müssen keine Indizes angeben und können später leicht weitere Eigenschaften ergänzen, ohne Indizes nachpflegen zu müssen.</p>
            <h1>Kurzschreibweise für Objekte</h1>
            <p>Wir können sogar noch einen weiteren kleinen Trick anwenden, um den Code kompakter zu bekommen. Bei Objekten, bei denen <i>Keys</i> und <i>Values</i> identisch sind, können Sie eine Kurzform verwenden. Dazu fassen Sie <i>Key</i> und <i>Value</i> einfach zusammen. Statt</p>
            <blockcode>{
  name: name,
  category: category,
  price:  price
}</blockcode>
            <p>können Sie verkürzt</p>
            <blockcode>{
  name,
  category,
  price
}</blockcode>
            <p>schreiben. Wenn Sie nun alles zusammenbauen, erhalten Sie folgenden Code:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_csv.4.js"/>
            <p>Ausgabe:</p>
            <blockcode>[ { name: 'Klingon Letter Opener',
    category: 'Office Warfare',
    price: '19.99' },
  { name: 'Backpack of Holding',
    category: 'Travel',
    price: '29.99' },
  { name: 'Tardis Alarmclock',
    category: 'Merchandise',
    price: '15.99' } ]</blockcode>
            <h1>Parameter auseinandernehmen mit Destruc&#x00AD;turing</h1>
            <p>Eine weitere Optimierungsmöglichkeit ergibt sich, wenn Sie das Aufsplitten am Komma aus der Funktion <code>productFromCSV</code> herausschieben. </p>
            <blockcode numbered="numbered">const productFromArray = productArray =&gt; {
   const [name, category, price] = productArray;
   return {
     name,
     category,
     price
   };
};

const productsFromCSV = csv =&gt;
  csv
    .split('\n')
    .map(trim)
    .slice(1)
    .map(s =&gt; s.split(', '))
    .map(productFromArray);</blockcode>
            <p>Das Splitten muss nun schon in der Funktion <code>productsFromCSV</code>
                    (product<b>s</b>, Plural) passieren. Dazu ergänzen Sie dort einfach
                <code>.map(s =&gt; s.split(', '))</code>, bevor Sie das Ergebnis an
                <code>productFromArray</code> (vorher <code>productFromCSV</code>) weitergeben. Die
                Funktion <code>productFromCSV</code> heißt nun <code>productFromArray</code>, da sie
                ein Array statt eines CSV-Strings erhält.</p>
            <p>Das Ganze ist aber lediglich eine Vorbereitung für den nächsten Schritt. Sie können das Destructuring bereits in der Parameterliste der Funktion durchführen:</p>
            <blockcode>const productFromArray = ([name, category, price]) =&gt; {
   return {
     name,
     category,
     price
   };
};</blockcode>
            <p><code>[name, category, price]</code> ist nur ein einziger Parameter &#x2014; aber er besteht aus mehreren Teilen, und das Destructuring sorgt dafür, dass Sie diese Teile als eigenständige Variablen in der Funktion erhalten. Beachten Sie dabei auch die runden Klammern um das Parameter-Array. Ohne diese ist die Syntax leider nicht gültig. </p>
            <p>Dank des letzten Refactorings besteht die Funktion <code>productFromArray</code> nur noch aus der Rückgabe. Das versetzt Sie in die Lage, noch eine letzte kleine Verbesserung durchzuführen und das <code>return</code> zu entfernen:</p>
            <blockcode>const productFromArray = ([name, category, price]) =&gt; ({
     name,
     category,
     price
});</blockcode>
            <p>Auch hier ist es wichtig, das zurückgegebene Objekt <code>{name, category, price}</code> noch einmal in runde Klammern zu setzen. Andernfalls versucht JS, die geschweiften Klammern als Block bzw. <i>function body</i> zu interpretieren. Hier das Gesamtergebnis:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_csv.5.js"/>
            <p>Die Ausgabe erfolgt im gewünschten JSON-Format:</p>
            <blockcode>[ { name: 'Klingon Letter Opener',
    category: 'Office Warfare',
    price: '19.99' },
  { name: 'Backpack of Holding',
    category: 'Travel',
    price: '29.99' },
  { name: 'Tardis Alarmclock',
    category: 'Merchandise',
    price: '15.99' } ]</blockcode>
            <h1>Objekte auseinandernehmen mit Object-Destructuring</h1>
            <p>Arrays sind nicht das Einzige, was Sie mit Destructuring zerlegen können &#x2014; Sie können damit auch problemlos Objekte zerlegen. </p>
            <p>Jetzt, wo die Produkte als Objekte vorliegen, ist es bei der Weiterverarbeitung oft wichtig, wieder auf die einzelnen Elemente zuzugreifen. Beispielsweise in der Funktion <code>formatProduct</code>. Die Funktion erzeugt eine textuelle Formatierung, die dann später z.&#x202F;B. ein Produktkatalog verwendet.</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_obj_dest.1.js"/>
            <p>Ausgabe:</p>
            <blockcode>* Klingon Letter Opener - buy now for only $19.99</blockcode>
            <p>Statt nun mittels </p>
            <blockcode>const name = product.name;
const price = product.price;</blockcode>
            <p>einzelne Attribute aus dem Objekt an Konstanten zuzuweisen, können Sie hier das elegantere <keyword>Object-Destructuring</keyword> verwenden.</p>
            <blockcode>const formatProduct = product =&gt; {
  const { name: productName, price: productPrice } = product;
  return `* ${productName} - buy now for only $${productPrice}`;
};</blockcode>
            <p>Dabei erzeugt das Destructuring die angegebenen Konstanten <code>productName</code> und <code>productPrice</code> und befüllt sie gleich mit den passenden Werten aus dem Objekt <code>product</code>. Das funktioniert auch hier wieder nach dem <keyword>Pattern-Matching</keyword>-Prinzip. Wenn Sie <code>product</code> durch das darin gespeicherte Objekt ersetzen, sieht die Zeile praktisch so aus:</p>
            <blockcode>const { name: productName, price: productPrice } = { name: 'Klingon Letter Opener', category: 'Office Warfare', price: '19.99' };</blockcode>
            <p>Damit das Muster passt, muss <code>productName</code> den Wert
                <code>'Klingon Letter Opener'</code> und <code>productPrice</code> den Wert
                <code>'19.99'</code> erhalten.</p>
            <p>Praktisch ist auch, dass Sie nicht alle Attribute angeben müssen, wenn Sie sie nicht brauchen. Auf das Attribut <code>category</code> können Sie hier verzichten. Die Zuweisung ignoriert es einfach, wenn Sie es nicht angeben.</p>
            <p>Wenn Sie möchten, können Sie dabei die neu erzeugten Konstanten sogar genauso nennen wie die Object-Keys:</p>
            <blockcode>const { name: name, price: price } = product;</blockcode>
            <p>Das hat den Vorteil, dass Sie jetzt wieder auf die Kurzschreibweise von Objekten zurückgreifen können, da <i>Key</i> und <i>Value</i> identisch sind.</p>
            <blockcode>const { name, price } = product;</blockcode>
            <p>Hier noch mal die Funktion im Ganzen:</p>
            <blockcode>const formatProduct = product =&gt; {
  const { name, price } = product;
  return `* ${productName} - buy now for only $${productPrice}`;
};</blockcode>
            <h3>Object-Destructuring in der Parameterliste</h3>
            <p>Da Sie das ursprüngliche Produkt in der Funktion nicht mehr brauchen, können Sie sogar noch einen Schritt weitergehen und das Destructuring bereits in der Parameterliste verwenden.</p>
            <blockcode>const formatProduct = ({ name, price }) =&gt; {
  return `* ${name} - buy now for only $${price}`;
};</blockcode>
            <p>Damit wird die Funktion zum Einzeiler, und Sie können das <code>return</code> entfernen:</p>
            <blockcode>const formatProduct = ({ name, price }) =&gt;  `* ${name} - buy now for only $${price}`;</blockcode>
            <p>Hier noch mal der Code im Ganzen:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/products_obj_dest.2.js"/>
            <hint src="images/hint/owl.png">
                <h3>Reihenfolge beim Object-Destructuring</h3>
                <p>Die Reihenfolge der Attribute spielt beim Object-Destructuring keine Rolle: Ob Sie die Funktion mit <code>({ name, price }) =&gt;</code> oder mit <code>({ price, name }) =&gt;</code> beginnen, ist egal: Das Ergebnis ist das Gleiche. Das ist die logische Konsequenz, da Sie ein Objekt als Muster verwenden und bei Objekten die Reihenfolge der Keys grundsätzlich keine Rolle spielt.</p>
            </hint>
            <h1>Ein Standard der &#187;Zerstörung&#171;? Destructuring-Defaults</h1>
            <p>Erweitern Sie die Ausgabe mal noch um die Kategorie:</p>
            <blockcode>const formatProduct = ({ name, price, category }) =&gt;
  `* ${name} [${category}] - buy now for only $${price}`;</blockcode>
            <p>Ausgabe:</p>
            <blockcode>* Klingon Letter Opener [Office Warfare] - buy now for only $19.99</blockcode>
            <p>Was passiert eigentlich, wenn Sie jetzt ein Produkt ohne Kategorie ausgeben?</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/dest_no_defaults.js"/>
            <p>Ausgabe:</p>
            <blockcode>* Backpack of Holding [undefined] - buy now for only $29.99</blockcode>
            <p>Natürlich ist hier die Ausgabe von <code>undefined</code> ein wenig unschön.
                Praktisch wäre es, alle Produkte ohne Kategorie als &#187;Sonstiges&#171; (engl.:
                    <i>miscellaneous</i>) zu deklarieren. Das geht beim Destructuring sehr elegant
                über Default-Werte. Sie können sie im Objekt-Muster direkt zuweisen, z.&#x202F;B.
                <code>{ name, price, category = 'miscellaneous' }</code>. </p>
            <blockcode src="accompanying_files/24/examples/dest_with_defaults.js"/>
            <p>Die Ausgabe lautet dann wie gewünscht:</p>
            <blockcode>* Backpack of Holding [miscellaneous] - buy now for only $29.99</blockcode>
            <hint src="images/hint/owl.png">
                <h3>Hinweis</h3>
                <p>Im Gegensatz zu Default-Parametern bei Funktionsdefinitionen müssen Default-Werte beim Object-Destructuring nicht am Ende stehen.</p>
                <p>Beispiel:</p>
                <blockcode>const formatProduct = ({ name, price = 10, category}) =&gt;
  `* ${name} [${category}] - buy now for only $${price}`;</blockcode>
                <p>Da die Reihenfolge zudem keine Rolle spielt, sind beliebige Konstellationen denkbar, z.&#x202F;B. ginge auch:</p>
                <blockcode>const formatProduct = ({ category = 'miscellaneous', name, price = 10 }) =&gt;
  `* ${name} [${category}] - buy now for only $${price}`;</blockcode>
            </hint>
            <h1>Genug &#187;kaputt gemacht&#171;? Der unzerstörte Rest</h1>
            <p>Sie erinnern sich an den Rest-Operator aus <a href="#advanced_functions"/>? Genau, es geht um diesen hier: <code>...</code> &#x2014; die drei kleinen Pünktchen. Der Rest-Operator funktioniert hervorragend beim Destructuring von Arrays, z.&#x202F;B.</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/dest_rest.1.js"/>
            <p>Prinzipiell funktioniert das auch mit Objekten:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/dest_rest.2.js"/>
            <h1>Namen sind viel mehr als Schall und Rauch: benannte Parameter</h1>
            <p>Sprachen wie Ruby oder Python haben ein großartiges Feature: <keyword>benannte Parameter</keyword> (engl.: <keyword>named parameters</keyword>). Als JS-Entwickler waren wir lange neidisch auf die verbesserte Lesbarkeit und Wartbarkeit, die das Feature mit sich bringt. </p>
            <p>Damit ist jetzt Schluss!</p>
            <p>Mithilfe von Destructuring hält das Feature nun in indirekter Form auch in JS Einzug. Worum geht's?</p>
            <p>Oft ist bei Funktionen mit mehreren Parametern unklar, welcher Parameter welcher ist. Denken Sie dabei doch mal an eine Funktion wie diese:</p>
            <blockcode>const transferMoney = (targetAccount, sourceAccount, amount) =&gt; {
...
}</blockcode>
            <p>Hier wird Geld von einem Konto auf ein anderes übertragen. Ohne die Funktionsdefinition nachzuschlagen, ist aber nicht klar, in welche Reihenfolge die Parameter gehören. Ein Vertauschen könnte jedoch unangenehme Folgen haben &#8230;</p>
            <p>Auch einem Aufruf ist nicht anzusehen, was eigentlich passiert:</p>
            <blockcode>transferMoney(companyAccount, customerAccount, 10000)</blockcode>
            <p>Wer zahlt hier $10000 an wen? </p>
            <p>Abhilfe schaffen <i>named parameters</i>. Der Trick besteht darin, statt mehrere Argumente ein Objekt zu übergeben, dessen Attribute als Argumente dienen. Klingt verwirrend? Ist es aber nicht, hier ein Beispiel:</p>
            <blockcode>transferMoney({targetAccount: customerAccount, sourceAccount: companyAccount, amount: 10000})</blockcode>
            <p>Bei diesem Aufruf ist sofort klar, wer hier was an wen überweist. Besser noch: Die Reihenfolge kann vertauscht sein, und es funktioniert immer noch tadellos.</p>
            <blockcode>transferMoney({sourceAccount: companyAccount, amount: 10000, targetAccount: customerAccount})</blockcode>
            <p>Die Vorteile liegen auf der Hand:</p>
            <ul>
                <li>Es passieren <b>weniger Fehler</b>.</li>
                <li>Der Aufruf ist <b>verständlicher</b>, auch ohne jedes Mal die Funktionsdefinition nachschlagen zu müssen (die könnte auch an einer ganz anderen Stelle oder sogar in einer ganz anderen Datei sein).</li>
                <li>Der Code ist besser <b>wartbar</b>. Sie können nachträglich neue Argumente ergänzen, ohne auf Verschiebungen in der Reihenfolge der Attribute achten zu müssen.</li>
            </ul>
            <p>Die Definition der Funktion ist wenig überraschend:</p>
            <blockcode>const transferMoney = ({targetAccount, sourceAccount, amount}) =&gt; {
...
}</blockcode>
            <p>Es handelt sich um ganz normales Object-Destructuring von Parametern. Sie müssen lediglich ein paar zusätzliche Klammern setzen &#x2014; ein kleiner Preis für so ein großartiges Feature.</p>
            <hint src="images/people/marco.jpg">
                <h3>Meine Empfehlung zu Parameterlisten</h3>
                <p>Ich bin ein Freund von Eindeutigkeit. Zu oft schon hab' ich mich an langen Parameterlisten verbrannt und musste viel Zeit mit Fehlersuche verbringen. Im Allgemeinen versuche ich Funktionen zu schreiben, die nur einen oder zwei Parameter benötigen. Benötigen sie nun doch drei oder mehr, verwende ich <i>named parameters</i>&#x00A0;&#x2014; manchmal auch schon bei nur zwei Parametern, wenn die Reihenfolge nicht eindeutig ist.</p>
            </hint>
            <h3>Da geht noch was: Varianten benannter Parameter</h3>
            <p>Sie können auch problemlos mehrere Parameter in der gleichen Funktion zerlegen. Betrachten Sie beispielsweise folgende Funktion <code>sendMessage</code>:</p>
            <blockcode>person1 = {firstName: 'Ladislaus', lastName: 'Coolio'}
person2 = {firstName: 'Heribert', lastName: 'West'}

const sendMessage = (from, to) =&gt; {
&#8230; //a lot of crazy stuff here
}

sendMessage(person1, person2)</blockcode>
            <p>Statt der direkten Parameter <code>from</code> und <code>to</code> können Sie auch hier Destructuring verwenden:</p>
            <blockcode>const sendMessage = (
  {firstName: fromFirstName, lastName: fromLastName},
  {firstName: toFirstName, lastName: toLastName}
) =&gt; {
...
}</blockcode>
            <p>Auch die Kombination mit normalen Parametern ist möglich:</p>
            <blockcode>const sendMessage = (
  message,
  {firstName: senderFirstName, lastName: senderLastName},
  {firstName: receiverFirstName, lastName: receiverLastName}) =&gt; {
...
}

sendMessage('Hallo', person1, person2)</blockcode>
            <p>Tatsächlich würden wir in diesem Fall aber eher das <code>from</code> und <code>to</code> als <i>keys</i> verwenden, um Verwechslungen von Sender und Empfänger zu vermeiden:</p>
            <blockcode>const sendMessage = (message, {from: sender, to: receiver}) =&gt; {
...
}

sendMessage('Hallo', {from: person1, to: person2})</blockcode>
            <p>Hardcore-Zerstörer könnten auch diese Variante wählen:</p>
            <blockcode>const sendMessage = (
  message,
  {
   from: {firstName: senderFirstName, lastName: senderLastName},
   to: {firstName: receiverFirstName, lastName: receiverLastName}
  }
) =&gt; {
...
}

sendMessage('Hallo', {from: person1, to: person2})</blockcode>
            <p>Destructuring ist ein rekursiver Prozess, und somit sind Verschachtelungen in beliebiger Tiefe möglich. Anders ausgedrückt: Sie können beliebige JSON-Strukturen als Destructuring-Muster verwenden. Wenn Sie das Verschachteln übertreiben, führt das allerdings schneller zu unübersichtlichem Code als Sie <i>&#187;zerstört&#171;</i> sagen können.</p>
            <h1>Benannte Parameter mit Vorgabewerten</h1>
            <p>Selbstverständlich lassen sich auch hier bei benannten Parametern Destructuring-Defaults verwenden:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/named_params.1.js"/>
            <p>Solange Sie ein Objekt übergeben, funktioniert das hervorragend. Sie können sogar ein leeres Objekt übergeben und erhalten alle Parameter:</p>
            <blockcode>console.log(foo({})); // =&gt; a: 1, b: 2</blockcode>
            <p>Ein typisches Problem taucht aber auf, wenn Sie die Funktion komplett ohne Parameter aufrufen:</p>
            <blockcode>console.log(foo()); // =&gt; TypeError: Cannot match against 'undefined' or 'null'.</blockcode>
            <p>Statt eine Ausgabe zu liefern, bricht JS mit einer Fehlermeldung ab. Ein nicht definierter Parameter (<code>undefined</code>) lässt sich nicht &#187;matchen&#171;. Soll die Funktion auch ohne Argumente sinnvoll aufrufbar sein, müssen Sie etwas anderes verwenden, etwas, das Sie schon kennen: <i>Defaults für fehlende Funktionsargumente</i>!</p>
            <p>Sie können beide Sorten von Defaults (Destructuring-Defaults und Defaults für fehlende Funktionsargumente) problemlos kombinieren:</p>
            <blockcode numbered="numbered" src="accompanying_files/24/examples/named_params.2.js"/>
            <p>Ja, das sieht seltsam aus, löst aber das beschriebene Problem. Jetzt ist es möglich, die Funktion auch ganz ohne Argumente aufzurufen. Die Funktion verwendet nun einfach den Vorgabewert. In der Praxis macht es meistens Sinn, die Defaults gleich zu setzen.</p>
            <blockcode>const foo = ({ a = 1, b = 2 } = { a: 1, b: 2 }) =&gt; `a: ${a}, b: ${b}`;</blockcode>
            <p>Das verhindert oft böse Überraschungen.</p>
            <h1>Referenz</h1>
            <table >
                <caption>Destructuring</caption>
                <thead>
                    <tr>
                        <th>Ohne Destructuring</th>
                        <th>Mit Destructuring</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <blockcode>const name;
const category;
const price;

const array = ['Backpack of Holding', 'Travel', '29.99'];

name = array[0];
category = array[1];
price = array[2];</blockcode>
                        </td>
                        <td>
                            <blockcode>const [name, category, price] = ['Backpack of Holding', 'Travel', '29.99'];               </blockcode>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <blockcode>{
    name: name,
    category: category,
    price: price
}                            </blockcode>
                        </td>
                        <td>
                            <blockcode>{
    name,
    category,
    price
}</blockcode>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <blockcode>const array = ['Backpack of Holding', 'Travel', '29.99'];

const arrayZuObjekt = array => {
    const [name, category, price] = array;
return {
        name,
        category,
        price
    }
}</blockcode>
                        </td>
                        <td>

                                <blockcode>const array = ['Backpack of Holding', 'Travel', '29.99'];

const arrayToObject = ([name, category, price]) => ({
    name,
    category,
    price
});</blockcode>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <blockcode>const product = {
    name: 'Backpack of Holding',
    category: 'Travel',
    price: '29.99'
}

const formatProdukt = produkt => {
    const name = produkt.name;
    const price = produkt.price;
    return `*${name} - buy for $${price}`;
}</blockcode>
                        </td>
                        <td>
                            <blockcode>const product = {
    name: 'Backpack of Holding',
    category: 'Travel',
    price: '29.99'
}

const formatProdukt = ({name, price}) => `*${name} - buy for $${price}`;</blockcode>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h1>Testen Sie Ihr Wissen!</h1>
            <questions>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Inhalt von <code>b</code> und <code>c</code> nach dem Ausführen der folgenden Anweisung:</p>
                        <blockcode>const [b, c] = [1, 2];</blockcode>
                        <p>Inhalt von b: <blank>1</blank></p>
                        <p>Inhalt von c: <blank>2</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Inhalt von <code>a</code> und <code>b</code>, nach dem Ausführen der folgenden Anweisung:</p>
                        <blockcode>const [b, a] = [3, 2, 1];</blockcode>
                        <p>Inhalt von a: <blank>2</blank>
                        </p>
                        <p>Inhalt von b: <blank>3</blank></p>
                    </question_text>
                </question>
                <question reviewed="reviewed" type="fill_in_the_blanks" public="public">
                    <question_text>
                        <p>Bestimmen Sie den Inhalt von <code>a</code> und <code>b</code>, nach dem
                            Ausführen der folgenden Anweisung:</p>
                        <blockcode>const [b, a] = [1, 2, 3];</blockcode>
                        <p>Inhalt von a: <blank>2</blank>
                        </p>
                        <p>Inhalt von b: <blank>1</blank></p>
                    </question_text>
                </question>
                <question type="multiple_choice" reviewed="reviewed">
                    <question_text>
                        <p>Bestimmen Sie den Inhalt von <code>b</code> und <code>c</code> nach dem Ausführen der folgenden Anweisung:</p>
                        <blockcode>const [b, c] = [21, 22];</blockcode>
                    </question_text>
                    <answer correct="correct">
                        <p>Inhalt von b: 21</p>
                        <p>Inhalt von c: 22</p>
                    </answer>
                    <answer>
                        <p>Inhalt von b: 22</p>
                        <p>Inhalt von c: 21</p>
                    </answer>
                    <answer>
                        <p>Inhalt von b: 21</p>
                        <p>Inhalt von c: [21, 22]</p>
                    </answer>
                    <answer>
                        <p>Inhalt von b: [21, 22]</p>
                    </answer>
                </question>
            </questions>
            <h1>Übungen</h1>
            <exercise>
                <name>Vorname vor Nachname oder Nachname vor Vorname?</name>
                <content>
                    <p>Wenn Sie der Name der Übung beim Lesen genauso verwirrt wie uns beim Schreiben, dann liegt das daran, dass die Reihenfolge von Vor- und Nachnamen nicht immer eindeutig ist. Machmal heißt es <i>Max Mustermann</i> und manchmal auch <i>Mustermann, Max</i>. Damit Benutzer der Funktion <code>logTransformedName</code> (aus <a href="#ladislaus2"/>) nicht auch so verwirrt sind, stellen Sie sie besser auf <code>named parameters</code> um.</p>
                    <blockcode numbered="numbered" src="accompanying_files/13/solutions/ladislaus.js"/>
                </content>
                <answer>
                    <blockcode src="accompanying_files/24/solution/ladislaus.js" numbered="numbered"/>
                </answer>
            </exercise>
            <exercise>
                <name>Dreieckig soll es sein (Named-Parameter-Remix)</name>
                <content>
                    <blockcode numbered="numbered" src="accompanying_files/19/solutions/triangle.js"/>
                    <p>Bauen Sie die Lösung aus <a href="#triangle"/> so um, dass Sie eine Funktion einsparen und der Aufruf der Funktion <code>triangle</code> wie folgt aussieht:</p>
                    <blockcode>console.log(triangle({ height: 10 }));</blockcode>
                    <p>Dabei soll es möglich sein, optional das verwendete Zeichen zu bestimmen, z.&#x202F;B.:</p>
                    <blockcode>console.log(triangle({ height: 10, character: '#' }));</blockcode>
                    <p>Beim Aufruf von <code>triangle</code> ohne Parameter soll ein Dreieck der Höhe <code>5</code> aus Sternchen (<code>*</code>) entstehen.</p>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/24/solution/triangle.js"/>
                    <blockcode numbered="numbered" src="accompanying_files/24/solution/triangle2.js"/>
                </answer>
            </exercise>
            <exercise>
                <name>Ist es noch weit? Sind wir schon da?</name>
                <content>
                    <p>Die Formel zur Berechnung von Entfernungen lautet:</p>
                    <blockcode>Math.sqrt((yDestination - yOrigin) ** 2 + (xDestination - xOrigin) ** 2)</blockcode>
                    <p>Schreiben Sie eine Funktion <code>distance</code>, die Sie z.&#x202F;B. folgendermaßen aufrufen können:</p>
                    <blockcode>distance({ x: 1, y: 1 }, { x: 5, y: 1 }) // =&gt; 4</blockcode>
                </content>
                <answer>
                    <blockcode numbered="numbered" src="accompanying_files/24/solution/distance.js"/>
                </answer>
            </exercise>
            <figure>
                <img src="images/people/end_christin_marco.jpg"/>
            </figure>
        </lesson>
        <lesson id="versionen_und_transpiler">
            <lesson_name>Anhang A: Sprachversionen und Transpiler</lesson_name>
            <h1>JavaScript, JScript, LiveScript, ECMAScript, WasZurHölleFürnScript?</h1>
            <p>Leider ist die Begriffsvielfalt im JS-Bereich enorm und für Einsteiger oft kaum zu überblicken. Wir geben Ihnen einen Überblick über die wichtigsten Begriffe und versuchen dabei nicht gleich in langatmigen Geschichtsunterricht zu verfallen.</p>
            <p><keyword>Brendan Eich</keyword> hat JavaScript im Dezember 1995 für den Browser <keyword>Netscape Navigator</keyword> entwickelt. Die Sprache ist als <keyword>ECMA-262</keyword> oder <keyword>ECMAScript</keyword> (kurz: <keyword>ES</keyword>) bei der <i>Ecma International</i> standardisiert &#x2014; Sie könnten auch sagen, ECMAScript ist der stabile einheitliche Sprachteil, den sich alle verschiedenen JavaScript-artigen Implementierungen (z.&#x202F;B. auch Microsofts <i>JScript</i>) teilen. Viele Entwickler meinen eigentlich <i>ECMAScript</i>, wenn Sie von <i>JavaScript</i> reden &#x2014; wir meistens auch. Vermutlich liegt das daran, dass ECMAScript ein wenig nach Hautkrankheit klingt &#x2014; meint zumindest Spracherfinder Brendan Eich (2006, 2008).</p>
            <p>Da die unterschiedlichen Implementierungen eigene Features und Erweiterungen aufweisen, aber zu ECMAScript (kurz <i>ES</i>) kompatibel sind, macht es mehr Sinn, Versionen von ES statt von JavaScript zu betrachten. Nehmen wir an, Sie möchten ein Sprachfeature von ECMAScript 5.1 nutzen (sagen wir <code>Array.prototype.map</code>). Wie finden Sie heraus, ob Ihre Sprachversion das Feature unterstützt? </p>
            <p>Tatsächlich spielt es keine Rolle, ob Sie JavaScript-Version 1.85 in Mozilla Firefox oder die Version 0.12 von Node.js verwenden. Sie können das Feature in jeder Implementierung nutzen, solange sie ES5-konform ist.</p>
            <figure width="30%" float="left">
                <img src="images/ecmascript2015_cover.png"/>
                <figcaption>Cover des Standards <i>ECMAScript 2015</i></figcaption>
            </figure>
            <p>Die Version, die die meisten Browser vollständig unterstützen, ist <i>ECMAScript 5.1</i>. Der Nachfolger von ECMAScript 5.1 hieß ursprünglich <keyword>ECMAScript 6</keyword> (kurz <keyword>ES6</keyword>), erschien aber Mitte 2015 unter dem Namen <keyword>ECMAScript 2015</keyword>
                <footnote>Laut Cover der Spezifikation (Ecma International 2015), oder ganz offiziell als <i>ECMA-262-6</i> (liest sich &#187;ECMA-262, 6te Auflage&#171;). (Wirfs-Brock 2015)</footnote>. Mozilla Firefox, Google Chrome und Microsoft Edge unterstützen den Standard nahezu vollständig (Stand: Sept. 2016). Mithilfe eines Transpilers (erklären wir noch, siehe <a href="#transpiling"/>) lässt sich ES6 aber auch in älteren Browsern nutzen.</p>
            <hint src="images/hint/storyteller_left.jpg">
                <h3>Achtung Geschichte: Die ganze Wahrheit über JavaScript</h3>
                <p>JavaScript hat eine sehr bewegte Geschichte hinter sich &#x2014; über die wir gut eine eigene Class schreiben könnten. Nicht umsonst gilt JavaScript als die am häufigsten missverstandene Programmiersprache der Welt (Crockford 2001). Auch diese ausführliche Box kann nur ein kurzer Abriss sein.</p>
                <p>In der Zeit der &#187;Browserkriege&#171; wetteiferten vor allem Netscape und Microsoft darum, die modernsten Technologien und besten Features in ihre Produkte zu integrieren. 1995 heuerte Netscape Brendan Eich an, um eine leichtgewichtige Sprachalternative für ihren Browser zu entwickeln. Brendan Eich hatte gerade einmal zehn Tage, um einen ersten Prototyp zu entwickeln (Severance 2012). Sie können sich vorstellen, dass in Anbetracht der kurzen Zeit das Sprachdesign nicht perfekt war (JavaScript Flaws, 2010). Wir haben heute noch an der einen oder anderen Designproblematik zu knabbern.</p>
                <p>Ursprünglich hieß die Sprache <keyword>Mocha</keyword> (engl.: &#187;Mokka&#171;) und etwas später <keyword>LiveScript</keyword>. Schließlich hat Netscape den Namen dann noch mal geändert: In <i>JavaScript</i> &#x2014; nachdem Vertragspartner Sun Microsystems ihnen die Rechte dafür zugesichert hatte (Eich, Krill 2008).</p>
                <p>Microsoft hat dann 1996 mit <keyword>JScript</keyword> im <i>Internet Explorer 3.0</i> nachgelegt. Wegen des Markenschutzes durfte die Sprache nicht JavaScript heißen. Als ich (Marco) Mitte der 90er bei Markant-Software arbeitete, programmierten wir alles immer doppelt &#x2014; einmal für den Netscape Navigator und einmal für Microsofts Internet Explorer. Neben dem enormen Mehraufwand blieben Anwender weiterer Browser oft außen vor. Um weiteren Wildwuchs zu vermeiden, hat sich dann glücklicherweise die<i> ECMA International</i> der Aufgabe angenommen, einen gemeinsamen Sprachstandard zu schaffen. Die <i>Ecma International</i> ist ein Standardisierungsgremium ähnlich der ISO oder dem W3C. Sie hat sich der Standardisierung von Informationstechnologie und Elektronik verschrieben.</p>
                <p>Die gemeinsame Basis von JavaScript und JScript beschreibt nun der Standard <i>ECMA-262</i> (außerdem gibt es eine Co-Standardisierung als &#x00A0;ISO/IEC 16262:2011). Der Standard hat seine ganz eigene bewegte Geschichte. So konnten sich die Komitee-Mitglieder bei Version 4 nicht einigen. Es gab erhebliche Diskrepanzen bezüglich der Weiterentwicklung von ECMAScript. Das Komitee hat ES4 schließlich komplett verworfen. Erst zehn Jahre nach Version 3 gelang mit ES5 (ursprünglich ES3.1) die Einigung. Dabei hatte Macromedia (später von Adobe gekauft) bereits große Teile von ES4 in <keyword>Action&#x00AD;Script</keyword> umgesetzt &#x2014; einer Sprache, die nun zusammen mit seiner Umgebung Flash/Flex immer mehr an Bedeutung verliert. </p>
                <p>ES6 (oder besser ES2015) enthielt viele der ursprünglich für ES4 geplanten Features &#x2014; glücklicherweise sehr viel durchdachter und besser umgesetzt. Die Namensänderung auf ES2015 begründet sich dadurch, dass 2015 zu einem jährlichen Releasezyklus gewechselt wurde (Wirfs-Brock 2015).</p>
                <p>Während ES6/ES2015 nach mehreren Jahren Stagnation ein riesiges Paket an Änderungen und Erweiterungen brachte, sind die neueren Releases (ES2016, ES2017, ES2018, ES2019, &#8230;) bewusst klein gehalten. Statt seltenen großen Releases, gibt es nun häufiger kleinere Updates.</p>
                <p>Falls Sie von Geschichte noch immer nicht genug haben, finden Sie noch ausführlichere Betrachtungen bei Young (2010) und Mills (2012).</p>
            </hint>
            <h1>Von JavaScript-Maschinen, Umgebungen und Transpilern</h1>
            <h2>Die Maschine läuft und läuft &#8230;</h2>
            <p>Mit JS alleine lässt sich nicht sonderlich viel anfangen. Sie benötigen vielmehr ein Programm, das JS-Code liest und ausführt &#x2014; eine sogenannte <keyword>JavaScript Engine</keyword> (JavaScript-Maschine). Früher waren diese Engines reine <keyword>Interpreter</keyword>, also Programme, die den Code wirklich lasen und interpretierten. Moderne Engines verwenden oft Hybrid-Technologien, die Teile des Codes vorkompilieren: Sie übersetzen JS-Code entweder direkt in Machinencode, den die CPU ausführen kann (<keyword>Just-In-Time-Compiler</keyword>), oder in einen Zwischencode, der dann wiederum interpretiert wird. Moderne Engines sind hochoptimiert und liefern sich einen Wettstreit um die beste Performance.</p>
            <h3>JS im Browser</h3>
            <p>JS-Engines sind in allen populären Browsern vorhanden. Hier finden Sie eine kleine Übersicht:</p>
            <table>
                <thead>
                    <tr>
                        <th>Engine</th>
                        <th>Browser</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Chakra</td>
                        <td>Microsoft Edge</td>
                    </tr>
                    <tr>
                        <td>Nitro</td>
                        <td>Apple Safari</td>
                    </tr>
                    <tr>
                        <td>SpiderMonkey</td>
                        <td>Mozilla Firefox</td>
                    </tr>
                    <tr>
                        <td>V8</td>
                        <td>Chromium<br/>Google Chrome<br/>Opera</td>
                    </tr>
                </tbody>
            </table>
            <h3>JS in Anwendungssoftware auf dem Desktop</h3>
            <p>JavaScript-Engines finden sich aber längst nicht nur in Browsern. So gibt es beispielsweise <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a> und <a href="http://openjdk.java.net/projects/nashorn">Nashorn</a>, die es ermöglichen, JS-Code in Java-Programme einzubinden, oder <a href="http://doc.qt.io/qt-4.8/scripting.html">QtScript</a> für die Einbindung in Qt/C++. Auch <i>Acrobat Reader</i> und <i>Photoshop</i> von Adobe enthalten JS-Engines, um Scripting-Aufgaben wahrzunehmen.</p>
            <h2 id="transpiling">Transpiling und JS als Transpile Target</h2>
            <p>Browser können neben JS noch andere Sprachen ausführen &#x2014; z.&#x202F;B. <i>Dart</i> (Chrome) oder <i>VBScript</i> (Internet Explorer).</p>
            <p>JavaScript ist jedoch die einzige Sprache, die tatsächlich in <b>allen</b> Browsern (oder zumindest in allen aktuellen) funktioniert. Es ist deswegen ein beliebter Trick, eine Anwendung in einer anderen Sprache zu schreiben und anschließend nach JS zu übersetzen &#x2014; das nennt sich dann <keyword>Transpiling</keyword>. Im Unterschied zum Compiler übersetzt ein Transpiler nicht in Maschinencode, sondern in eine andere Sprache, die in etwa den gleichen Abstraktionslevel wie die Ausgangssprache hat. Damit lassen sich dann Sprachen wie Ruby (z.&#x202F;B. <a href="http://opalrb.org/">Opal</a>, <a href="http://en.wikipedia.org/wiki/RubyJS">RubyJS</a>), Python (z.&#x202F;B. <a href="http://pyjs.org">PyJs</a>), Java (z.&#x202F;B. <a href="http://www.gwtproject.org/">GWT</a>) oder Clojure (z.&#x202F;B. <a href="https://github.com/clojure/clojurescript">ClojureScript</a>) im Browser realisieren.</p>
            <p>Manche Sprachen wurden nur zu dem Zweck entwickelt, um nach JavaScript transpiliert zu werden &#x2014; darunter <a href="http://coffeescript.org/">CoffeeScript</a> und <a href="http://livescript.net/">LiveScript</a>.</p>
            <p><i>Jeremy Ashkenas</i> (der Entwickler von CoffeeScript und Backbone) pflegt eine <a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">Liste</a> aller Sprachen, die JS als Transpiler-Ziel haben.</p>
            <hint src="images/people/marco.jpg">
                <p>Ich schätze gerade CoffeeScript und LiveScript sehr und habe bereits in einem größeren CoffeeScript-Projekt mitgearbeitet. Die Bedeutung solcher Sprachen in der Praxis ist jedoch eher gering. Der Einsatz ist immer mit zusätzlichem Aufwand verbunden und kann auch zu Performance-Einbußen führen. Von GWT würde ich beispielsweise grundsätzlich abraten, da es die Fehlersuche erheblich erschwert. Selbst wenn Sie sich für eine leichtgewichtige Aufsatzsprache wie CoffeeScript in einem Projekt entscheiden, müssen Sie den generierten JS-Code verstehen. Sie machen also in jedem Fall keinen Fehler damit, sich erstmal ausführlich mit JS zu beschäftigen! Mehr zum Thema Transpiler finden Sie bei <a href="http://martinfowler.com/bliki/TransparentCompilation.html">Fowler (2013)</a> und <a href="https://www.stevefenton.co.uk/Content/Blog/Date/201211/Blog/Compiling-Vs-Transpiling/">Fenton (2012)</a>. </p>
            </hint>
            <h1>Von JS nach JS</h1>
            <p>Spannend ist, dass Sie auch JS nach JS transpilieren können. Welchen Sinn das macht? Ganz einfach &#x2014; es gibt Ihnen die Möglichkeit, bereits heute im top-modernen ECMAScript-Standard vom nächsten Jahr zu coden und ihn dann in einem alten Browser auszuführen, der vielleicht nur ECMAScript 5.1 beherrscht. Es gibt sogar mehrere solcher Rückwärts-Transpiler. In der <a href="http://kangax.github.io/compat-table/es6/">ECMAScript Compatibility Table von Juriy Zaytsev</a> sind sie neben den Browsern verzeichnet. Sie können in der Tabelle ablesen, welche Features von ECMAScript 2015/16/17 unter welchem Browser zur Verfügung stehen bzw. welcher Transpiler sie zurückübersetzen kann. Der Transpiler <keyword>Babel</keyword> hat zur Zeit die beste Abdeckung an neuen Sprachfeatures. Sie können ihn problemlos in der Praxis verwenden.</p>
            <hint>
                <p>JavaScript gilt als der Assembler des Internet.</p>
            </hint>
        </lesson>
        <lesson>
            <lesson_name>Anhang B: Programmierrichtlinien</lesson_name>
            <p>Dieser Anhang enthält die gesammelten Programmierrichtlinien aus allen Lektionen. Diese Programmierrichtlinien sind weder verpflichtend noch allgemeingültig. Verwenden Sie diese Richtlinien im Rahmen dieses Kurses. Sie können Sie natürlich auch als Startpunkt für Ihre eigenen Projekte verwenden. Danach sollten Sie sie mehr und mehr auf Ihre Bedürfnisse bzw. die Ihres Teams zuschneiden.</p>
            <h1>ESLint</h1>
            <p>Viele der folgenden Richtlinien lassen sich mit dem <keyword>Linter</keyword>
                <i>ESLint</i> automatisch überprüfen. Linter sind Werkzeuge, die Sie bei der Einhaltung von Richtlinien unterstützen, Regelverletzungen aufzeigen und teilweise sogar beheben. ESLint ist der bekannteste Linter für modernen JS-Code. </p>
            <p>Eine ausführliche Vorstellung von ESLint würde den Rahmen dieser Class sprengen, Sie finden aber alle wichtige Informationen auf der <a href="https://eslint.org">ESLint-Website</a>.</p>
            <p>Hinter jeder der folgenden Richtlinien ist eine Referenz auf die passende ESLint-Regel in Klammern hinterlegt. </p>
            <h1>Allgemein</h1>
            <ul>
                <li>Verwenden Sie <code>'use strict'</code> am Anfang von JS-Files (strict:
                    global).</li>
                <li>Schreiben Sie immer genau eine Anweisung in genau eine Zeile (max-statements-per-line).</li>
                <li>Beenden Sie jede Anweisung mit einem Semikolon (semi).</li>
                <li>Verwenden Sie im Normalfall doppelte Anführungszeichen zur Begrenzung von
                    Strings, Beispiel: <code>'Hallo Welt'</code>.</li>
                <li>Verwenden Sie Klammern, um Zweifel über die Auswertungsreihenfolge von Ausdrücken auszuräumen oder wenn Sie denken, die Lesbarkeit dadurch zu verbessern.</li>
                <li>Vermeiden Sie <i>Magic Numbers</i> (no-magic-numbers).</li>
                <li>Vor und nach einem Operator mit zwei Operanden (z.&#x202F;B. Verkettungs- oder Zuweisungsoperator) steht ein Leerzeichen (space-infix-ops).</li>
                <li>Verwenden Sie nie mehr als zwei Leerzeilen untereinander, um logische Trennungen in Ihrem Code zu darzustellen (no-multiple-empty-lines).</li>
            </ul>
            <h1>Variablen &amp; Konstanten</h1>
            <ul>
                <li>Verwenden Sie keine globalen Variablen (no-undef).</li>
                <li>Vermeiden Sie Variablen (<code>let</code>) &#x2014; versuchen Sie stattdessen, mit Konstanten (<code>const</code>) zu arbeiten (no-var, prefer-const).</li>
                <li>Wählen Sie bei der Deklaration von Variablen bzw. Konstanten den Scope immer so klein wie möglich.</li>
            </ul>
            <h1>Variablen- &amp; Konstanten-Bezeichner</h1>
            <ul>
                <li>Wählen Sie immer aussagekräftige, sprechende Bezeichner. Nomen im Singular eignen sich für Variablen meistens am besten.</li>
                <li>Verwenden Sie in Bezeichnern keine Sonderzeichen und keine eigenen Abkürzungen.</li>
                <li>Schreiben Sie Variablen- und Konstantenbezeichner in camelCase
                        (lowerCamelCase).<br/><b>Ausnahme:</b> Konstanten, die der Konfiguration
                    dienen, d.&#x202F;h. deren Wert schon vor dem Start des Programms feststeht,
                    schreiben Sie weiterhin im SCREAMING_SNAKE_CASE.</li>
            </ul>
            <h1>Codeblöcke </h1>
            <p>Verwenden Sie den 1-True-Brace-Style (brace-style: 1tbs):</p>
            <ul>
                <li>Die öffnende geschweifte Klammer <code>{</code> des Rumpfes befindet sich in derselben Zeile wie ein Schlüsselwort (z.&#x202F;B. <code>if</code>).</li>
                <li>Nach der öffnenden Klammer des Rumpfes folgt ein Zeilenumbruch.</li>
                <li>Die Anweisungen innerhalb des Rumpfes werden jeweils um 2 Leerzeichen eingerückt. (indent: 2)</li>
                <li>Die schließende geschweifte Klammer <code>}</code> des Rumpfes befindet sich in einer neuen Zeile und ist linksbündig zum ersten Schlüsselwort.</li>
            </ul>
            <h1>Schlüsselwörter</h1>
            <ul>
                <li>Nach einem Schlüsselwort (z.&#x202F;B. <code>if</code>, <code>else</code>, <code>let</code> usw.) folgt genau ein Leerzeichen (keyword-spacing).</li>
            </ul>
            <h1>Funktionen</h1>
            <ul>
                <li>Funktionsbezeichner sind Verben bzw. beginnen mit einem Verb. Bevorzugen Sie den Imperativ!</li>
                <li>Funktionsbezeichner beginnen mit einem Kleinbuchstaben (a bis z).</li>
                <li>Lassen Sie bei einzeiligen Funktionen die geschweiften Klammern und das Schlüsselwort <code>return</code> weg. Nach dem Pfeil folgt ein Leerzeichen und direkt darauf der Ausdruck.</li>
                <li>Beschränken Sie Funktionen auf maximal 10 Anweisungen (max-statements: 10).</li>
                <li>Bevorzugen Sie nebeneffektfreie Funktionen.</li>
            </ul>
            <assignment>
                <name>Royal Flush!</name>
                <content>
                    <figure width="80%">
                        <img src="images/royal_flush_downsized.jpg"/>
                        <figcaption>Quelle: PS50mm (https://www.flickr.com/photos/ps50mm/6156204537), Lizenz: CC-BY-2.0</figcaption>
                    </figure>
                    <h3>Einleitung</h3>
                    <p>Offensichtlich hat sich herumgesprochen, dass sich mit Online-Poker eine Menge Geld
                        verdienen lässt. Ihr Auftraggeber möchte eine neue Poker-Website entwickeln. Die
                        Spiellogik benötigt viele spezielle Funktionen. Deswegen hat sie der Projektleiter auf
                        das Team aufgeteilt. Jeder Entwickler programmiert nur einen kleinen Teil der
                        Webanwendung.</p>
                        <p>Natürlich fällt die Programmierung der wichtigsten Funktion in Ihren Aufgabenbereich.</p>
                    <h3>Technologien / Anforderungen</h3>
                    <p>Setzen Sie JavaScript - ECMAScript 2015 (ES6) oder neuer ein. Externe JavaScript-Bibliotheken (oder aus Drittquellen übernommener Code) sind nicht zugelassen. Überprüft wird die Aufgabe im aktuellen Chrome Browser.</p>
                    <p>Entwickeln Sie kein grafisches User Interface (GUI) &#8211; d.&#x202F;h. Sie benötigen auch kein HTML
                        oder CSS. Verwenden Sie lediglich die Konsolenausgabe, um die Funktionalität der
                        Anwendung zu demonstrieren.</p>
                    <h3>Arbeitsschritt 1: Prüfung auf Name und Kartenfarbe</h3>
                    <p>Das neue Pokersystem repräsentiert eine Karte intern als String aus Name
                        (z.&#x202F;B. K für King) und Kartenfarbe (z.&#x202F;B. ♠). Die Kartenfarben
                        verwenden ihre jeweiligen UTF-8- Zeichen. Beispielsweise wird die Karte
                        Herzkönigin als 'Q♥' und die Karte Kreuz 8 als '8♣' repräsentiert. Folgende
                        Konstanten sind bereits vorgegeben:</p>
                    <blockcode>
const SUITS = '♠♥♦♣';
const NAMES = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
                        </blockcode>
                        <p>Damit Sie die UTF-8-Zeichen einfach kopieren können, finden Sie den obigen Code auch im Begleitmaterial der Class unter assignments. Schreiben Sie die Funktionen toName und toSuit, die eine Karte jeweils auf ihren Namen bzw. auf ihre Kartenfarbe abbilden.</p>
                    <h3>Beispiele</h3>
                    <blockcode>toName('9♣') // => '9'
toName('10♥') // => '10'
toName('Q♥') // => 'Q'
toSuit('9♣') // => '♣'
toSuit('10♥') // => '♥'</blockcode>
                    <h3>Arbeitsschritt 2: Validierung</h3>
                    <p>Programmieren Sie ein Funktion isValidCard, die prüft, ob es sich bei dem übergebenen
                        String um eine valide Karte handelt. Eine String gilt dann als eine valide
                        Repräsentation einer Karte, wenn er exakt der besprochenen Zusammensetzung aus
                        Name und Farbe entspricht.</p>
                    <h3>Beispiele</h3>
                    <blockcode>isValidCard('9♣') // => true
isValidCard('11♣') // => false
isValidCard('9X') // => false</blockcode>
                    <p>Eine Pokerhand besteht aus 5 Karten. Das Pokersystem repräsentiert diese als
                        Arrays mit je 5 Elementen, bei denen es sich um Stringrepräsentationen von
                        Karten handelt, z.&#x202F;B. ['9♣', '9♦', '9♠', '9♥', 'Q♥'] Programmieren
                        Sie noch eine weitere Funktion isValidHand, die prüft, ob es sich bei einen
                        übergebenen Array um eine valide Repräsentation einer Kartenhand handelt.
                        Eine Kartenhand ist dann valide (und nur dann), wenn Sie genau 5 valide
                        Karten enthält.</p>
                    <p>Greifen Sie zur Implementierung von isValidCard auf die Funktionen toName und toSuit
                        zurück. Genauso verwenden Sie isValidCard zur Realisierung von isValidHand.</p>
                    <h3>Arbeitsschritt 3: Sortierung</h3>
                    <p>Um dem Spieler das Erfassen seiner Kartenhand zu erleichtern, müssen die
                        Karten vorsortiert werden. Programmieren Sie dazu eine Funktion sortHand.
                        Vergleichen Sie dafür zwei Karten zunächst nur anhand ihres Namens, so dass
                        2er, 3er, ..., Damen, Könige etc. direkt nebeneinander angeordnet werden. Um
                        die korrekte Reihenfolge der Namen zu bestimmen, können Sie auf den
                        Indexwert von NAMES zurückgreifen. So ist z.B. eine '2' mit einem Indexwert
                        von 0 weniger wert als ein Bube ('J') mit einem Indexwert von 9.</p>
                        <p>Berücksichtigen Sie in einer überarbeiteten Variante auch die Kartenfarbe. Es gilt die
                        Reihenfolge aus dem String SUITS. Diese neue Sortierung soll dann natürlich die
                        vorherige Variante ersetzen.</p>
                    <blockcode>sortHand(['3♥', '2♥', '5♥', '2♣', '4♣'])
// => ['2♥', '2♣', '3♥', '4♣', '5♥']
sortHand(['2♦', 'Q♥', '2♥', '2♣', '2♠'])
// => ['2♠', '2♥', '2♦', '2♣', 'Q♥']</blockcode>
                    <h3>Tipps zur Vorgehensweise</h3>
                    <ul>
                        <li>Parametrisieren Sie sort mit einer Vergleichsfunktion compareCards, die zwei
                        Karten entgegennimmt und einen positiven Wert, einen negativen Wert oder
                        (bei identischen Karten) 0 zurückliefert. Sie können das wie bei der numerischen
                        Sortierung mit Subtraktion lösen.</li>
                        <li>Um den Vergleichswert zu bestimmen, vergleichen Sie zunächst nur die
                        Indexwerte der Namen.</li>
                        <li>Um die Kartenfarbe zu berücksichtigen, können Sie einen Kartenpositionswert
                        durch einer höhere Gewichtung des Indexwertes des Namens erhalten:
                        Kartenposition (innerhalb aller Karten) =
                        Gewichtungsfaktor * Position des Namens in NAMES
                        + Position der Kartenfarbe in SUITES
                        Der Gewichtungsfaktor ist dabei idealerweise einfach die Anzahl der
                        Kartenfarben.</li>
                    </ul>
                    <h3>Arbeitsschritt 4: Kategorisierung</h3>
                    <p>Eine Pokerhand, bei der alle Karten die gleiche Kartenfarbe aufweisen, heißt Flush.
                        Eine Hand, die aus fünf aufeinanderfolgenden Karten besteht, heißt Straight (deutsch:
                        Straße). Für den unwahrscheinlichen Fall, dass die Hand aus fünf
                        aufeinanderfolgenden Karten in der gleichen Farbe besteht, spricht man von einem
                        Straight Flush. Falls ein Straight Flush außerdem noch das Ass (als höchste Karte)
                        enthält, liegt ein Royal Flush vor – das wertvollste Pokerblatt!
                        Entwickeln Sie Funktionen, die eine Pokerhand darauf prüfen, ob jeweils eine der oben
                        genannten Kategorien vorliegt. Beachten Sie auch, dass das Array die Karten nicht
                        zwingend in aufsteigender Reihenfolge enthalten muss.</p>
                    <h3>Beispiele</h3>
                    <blockcode>isFlush(['7♥', '2♥', 'Q♥', '10♥', '5♥']) // => true
isFlush(['7♥', '2♥', 'Q♥', '10♣', '5♥']) // => false
isStraight(['5♥', '6♦', '7♥', '8♣', '9♥']) // => true
isStraightFlush(['5♥', '6♥', '7♥', '8♥', '9♥']) // => true
isRoyalFlush(['10♥', 'J♥', 'Q♥', 'K♥', 'A♥']) // => true
isRoyalFlush(['10♥', 'J♥', 'Q♥', 'K♣', 'A♥']) // => false
isRoyalFlush(['K♥', 'A♥', 'Q♥', '10♥', 'J♥']) // => true</blockcode>
                    <h3>Tipp zur Vorgehensweise</h3>
                    <p>Um einen Straight zu überprüfen, gibt es einen einfachen Trick: Betrachten Sie nur die
                        Namen der Karten. Sortieren Sie diese und verbinden Sie sie zu einem String (mittels
                        join()). Wenn dieser String in NAMES.join() enthalten ist, handelt es sich bei der
                        urspünglichen Hand um einen Straight.</p>
                    <p><b>Beispiel:</b> ['9♥', '6♦', '7♥', '5♣', '8♥'] -> ['9', '6', '7', '5', '8']
                        -> ['5', '6', '7', '8', '9'] -> '5,6,7,8,9' '5,6,7,8,9' liegt innerhalb von
                        '2,3,4,5,6,7,8,9,10,J,Q,K,A' und ist somit ein Straight.</p>
                    <h3>Hinweise</h3>
                    <ul>
                        <li>Selbstverständlich können Sie die Implementierung der verlangten Funktionen
                            jederzeit in weitere Funktionen unterteilen.</li>
                         <li>Alle verlangten Funktionen lassen sich aber prinzipiell jeweils mit einem
                            einzigen Ausdruck implementieren (tatsächlich wären an keiner Stelle
                            geschweifte Klammern nötig – Sie können sie aber natürlich verwenden, falls Sie
                            möchten).</li>
                          <li>Die verlangten Funktionen bauen aufeinander auf.</li>
                          <li>Sie müssen lediglich die Funktionen liefern. Es ist nicht erforderlich Werte per
                            prompt o.&#x202F;ä. zu erfragen. Konsolenausgaben mit Beispielaufrufen zum Testen der
                            Funktionen sind dagegen hilfreich.</li>
                        <li>Die in der Aufgabe genannten Angaben zur API sind grundsätzlich verpflichtend. D.&#x202F;h. verwenden Sie die in der Aufgabenstellung genannten Funktionsnamen, Argumente, Argumentnamen, Rückgabewerte, usw.</li>
                    </ul>
                    <p>Eine Demo der Einsendeaufgabe finden Sie unter: <a href="https://terminal.webmasters-akademie.dev">https://terminal.webmasters-akademie.dev</a></p>
                </content>
                <answer>
                    <p>Musterlösung</p>
                    <a href="https://github.com/Webmasters-Europe/js_basics_royal_flush/releases/tag/1.9.0">https://github.com/Webmasters-Europe/js_basics_royal_flush/releases/tag/1.9.0</a>
                </answer>
                <criteria>
                    <criteria_group weight="15">
                        <criteria_group_name>Arbeitsschritt 1</criteria_group_name>
                        <criterion type="boolean" weight="2">Die Funktion <code>toName()</code> gibt den korrekten Namen einer Karte aus.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>toName()</code> bekommt eine Karte als Parameter übergeben.</criterion>
                        <criterion type="boolean" weight="2">Die Funktion <code>toSuit()</code> gibt die korrekte Kartenfarbe einer Karte aus.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>toSuit()</code> bekommt eine Karte als Parameter übergeben.</criterion>
                    </criteria_group>
                    <criteria_group weight="15">
                        <criteria_group_name>Arbeitsschritt 2</criteria_group_name>
                        <criterion type="boolean" weight="3">Die Funktion <code>isValidCard()</code> validiert Karten korrekt.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>isValidCard()</code> bekommt eine Karte als Parameter übergeben.</criterion>
                        <criterion type="boolean" weight="3">Die Funktion <code>isValidHand()</code> validiert eine Pokerhand korrekt.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>isValidHand()</code> bekommt eine Pokerhand in Form eines Arrays, gefüllt mit Karten, übergeben.</criterion>
                    </criteria_group>
                    <criteria_group weight="20">
                        <criteria_group_name>Arbeitsschritt 3</criteria_group_name>
                        <criterion type="boolean" weight="1">Die Funktion <code>sortHand()</code> sortiert die Hand anhand des Kartennamens aufsteigend.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>sortHand()</code> sortiert die Hand zusätzlich anhand der Kartenfarbe aufsteigend, wenn der Kartenname identisch ist.</criterion>
                    </criteria_group>
                    <criteria_group weight="25">
                        <criteria_group_name>Arbeitsschritt 4</criteria_group_name>
                        <criterion type="boolean" weight="3">Es ist eine Funktion vorhanden, welche überprüft, ob eine Pokerhand ein Flush ist.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion, welche eine Pokerhand auf einen Flush überprüft lässt keine ungültigen Karten zu.</criterion>
                        <criterion type="boolean" weight="3">Es ist eine Funktion vorhanden, welche überprüft, ob eine Pokerhand ein Straight ist.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion, welche eine Pokerhand auf einen Straight überprüft lässt keine ungültigen Karten zu.</criterion>
                        <criterion type="boolean" weight="3">Es ist eine Funktion vorhanden, welche überprüft, ob eine Pokerhand ein StraightFlush ist.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion, welche eine Pokerhand auf einen StraightFlush überprüft lässt keine ungültigen Karten zu.</criterion>
                        <criterion type="boolean" weight="3">Es ist eine Funktion vorhanden, welche überprüft, ob eine Pokerhand ein RoyalFlush ist.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion, welche eine Pokerhand auf einen RoyalFlush überprüft lässt keine ungültigen Karten zu.</criterion>
                    </criteria_group>
                    <criteria_group weight="25">
                        <criteria_group_name>Codequalität</criteria_group_name>
                        <criterion type="boolean" weight="1">Es wurde ES6 konformer Code geschrieben.</criterion>
                        <criterion type="boolean" weight="1">Eine Karte wird als String, bestehend aus Name und Kartenfarbe verwaltet.</criterion>
                        <criterion type="boolean" weight="1">Es werden die in der Aufgabenstellung vorgegebenen Variablen- und Funktionsnamen verwendet.</criterion>
                        <criterion type="boolean" weight="1">Es wurden sinnvolle und beschreibende Variablen-/Funktionsnamen gewählt.</criterion>
                        <criterion type="boolean" weight="1">Variablennamen entsprechen den gelernten Konventionen (Konstanten in UPPERCASE, Funktionen in camelCase, …).</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine überflüssigen Variablen/Funktionen.</criterion>
                        <criterion type="boolean" weight="1">Eine Funktion erfüllt nur eine Funktionalität.</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine unnötige komplexen Verschachtelungen.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein doppelter Code. Mehrfach vorkommende Funktionalitäten sind in eigene Funktionen verpackt.</criterion>
                        <criterion type="boolean" weight="1">Nicht benötigte Kontrollstrukturen werden vermieden.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein ungenutzter/auskommentierter Code.</criterion>
                    </criteria_group>
                </criteria>
                <submission_instructions><p>Laden Sie die JavaScript-Datei zu der Einsendeaufgabe im Onlinecampus hoch.</p>
                    <p><b>Bitte beachten Sie</b>: Sobald Sie Ihre Aufgabenlösung hier eingereicht haben, wird
                        diese in der Regel zeitnah bewertet. Sie können die Aufgabe nicht noch einmal neu
                        einreichen, sobald wir mit der Bewertung begonnen haben, der Upload ist dann
                        gesperrt.</p></submission_instructions>
            </assignment>
            <assignment>
                <name>Auf die Füllung kommt es an</name>
                <content>
                    <h3>Einleitung</h3>
                    <p>In der Variable bitmap ist eine ASCII-Grafik gespeichert:</p>
                    <blockcode>let bitmap = [
'................**********........................',
'...............*..........*.......................',
'..........*****............*........*.............',
'.........*.................*.......*.*....*****...',
'........*................***......*...*.**.....**.',
'....****.................*.......*.....*.........*',
'..**......................*******................*',
'.*...............................................*',
'.*...............................................*',
'*...........****.............................****.',
'*..........*....*.........................***.....',
'.*.........*....*.......................**........',
'..***.......****.......................*..........',
'.....****......................******..*..........',
'.........**********************.....****..........'
];</blockcode>
                    <p>Die dargestellte Grafik zeigt Konturen, die aus *-Zeichen bestehen. Ihre
                        Aufgabe ist, eine Füllfunktion namens floodFill zu schreiben. Die Funktion
                        arbeitet ähnlich wie Füllwerkzeuge, die Sie aus Grafikprogrammen kennen.
                        floodFill bekommt einen Startpunkt und füllt die Fläche aus, bis sie auf
                        eine Begrenzung trifft. Als Begrenzung zählen sowohl die *-Zeichen als auch
                        die Kanten der Grafik. Dabei bedeutet Stern (*) gefüllt und Punkt (.)
                        leer.</p>
                        <p>Die dargestellte Grafik ist allerdings nur ein Beispiel. Ihre Lösung sollte auch bei
                        anderen Grafiken, Höhen und Breiten funktionieren. Lediglich die beiden Zeichen Stern
                        und Punkt sollen in jeder Grafik die gleiche Bedeutung haben.</p>
                        <p>Rufen Sie die Funktion beispielsweise mittels console.log(floodFill(8, 7)) für die
                        Koordinaten 8/7 auf, erhalten Sie folgende Ausgabe:</p>
                    <figure width="80%">
                        <img src="images/floodfill.jpg"/>
                    </figure>
                    <h3>Aufgaben</h3>
                    <p>Bei dieser Aufgabe geht es um die Umsetzung einer sogenannten Flutfüllung (engl. Floodfill). Sie ist mit keinem der Beispiele oder Übungen der Class direkt vergleichbar. Um Ihnen das Bearbeiten der Einsendeaufgabe zu erleichtern, ist Ihnen nachfolgend eine verbindliche Vorgehensweise gegeben.</p>
                    <ul>
                        <li>Hinterlegen Sie das Array mit der ASCII-Grafik in der Variable bitmap im höchsten Scope des Codes
                            und geben Sie diese Grafik dann zeilenweise in der Konsole aus.</li>
                        <li>Greifen Sie bei allen folgenden Funktionen direkt auf die Variable mit dem Array
                            zu. Diese Vorgehensweise ist zwar nicht wirklich optimal, für eine bessere
                            Umsetzung fehlen Ihnen jedoch noch die entsprechenden Techniken aus der
                            Objektorientierung (z.&#x202F;B. eigene Objekte mit Methoden).</li>
                        <li>Schreiben Sie eine Funktion <code>charAt()</code>, der Sie eine Position als x- und y-Koordinate
                            übergeben, und die Ihnen das Zeichen an der angegebenen Position
                            zurückliefert.</li>
                        <li>Schreiben Sie eine zweite Funktion <code>setCharAt()</code>, mit der Sie das Zeichen an einer
                            bestimmten Position zu einem *-Zeichen ändern können. Die zu ändernde Position soll wieder in vorm von Koordinaten als Prameter übergeben werden.</li>
                        <li>Schreiben Sie eine dritte Funktion <code>floodFill()</code>, der Sie eine Position als x- und y-
                            Koordinate übergeben. Diese Funktion prüft, ob sich an der angegebenen
                            Position bereits ein Stern befindet und setzt diesen gegebenenfalls. Verwenden
                            Sie die bereits vorhandenen Funktionen!</li>
                        <li>Verwenden Sie die veränderte Grafik als Rückgabewert und geben Sie sie erneut
                            zeilenweise in der Konsole aus. In der finalen FAssung der Funktion <code>floodFill()</code> soll nur eine Aufgabe am Ende erfolgen.</li>
                        <li>Wiederholen Sie den Vorgang mittels Rekursion mit einer um eins verschobenen
                            Position (z.&#x202F;B. testweise nach rechts). Abgebrochen wird die Rekursion, wenn das
                            Zeichen an der Position ein Stern ist. Es sollte nun die veränderte Zeile in der
                            Ausgabe der ASCII-Grafik sichtbar sein.</li>
                        <li>Überarbeiten Sie diese Funktion nun so, dass eine komplette Fläche gefüllt werden kann.</li>
                    </ul>
                    <h3>Hinweise</h3>
                    <ul>
                        <li>Selbstverständlich können Sie die Implementierung der verlangten Funktionen
                        jederzeit in weitere Funktionen unterteilen.</li>
                        <li>Die in der Aufgabe genannten Angaben zur API sind grundsätzlich verpflichtend.
                        D.&#x202F;h. verwenden Sie die in der Aufgabenstellung genannten Funktionsnamen,
                        Argumente, Argumentnamen, Rückgabewerte, usw.</li>
                    </ul>
                    <h3>Technologien</h3>
                    <p>Setzen Sie JavaScript - ECMAScript 2015 (ES6) oder neuer ein. Externe JavaScript-Bibliotheken (oder aus Drittquellen übernommener Code) sind nicht zugelassen. Überprüft wird die Aufgabe im aktuellen Chrome Browser.</p>
                        <p>Zur Wiederholung des Füllvorgangs an den sich verschiebenden Koordinaten ist
                        zwingend Rekursion einzusetzen.</p>
                        <p>Entwickeln Sie kein grafisches User Interface (GUI) &#x2014; d.&#x202F;h. Sie benötigen auch kein HTML
                        oder CSS. Verwenden Sie lediglich die Konsolenausgabe, um die Funktionalität der
                        Anwendung zu demonstrieren.</p>
                    <p>Eine Demo der Einsendeaufgabe finden Sie unter: <a href="https://terminal.webmasters-akademie.dev">https://terminal.webmasters-akademie.dev</a></p>
                </content>
                <answer>
                    <p>Musterlösung</p>
                    <a href="https://github.com/Webmasters-Europe/js_basics_flood_fill/releases/tag/1.9.0">https://github.com/Webmasters-Europe/js_basics_flood_fill/releases/tag/1.9.0</a>
                </answer>

                <criteria>
                    <criteria_group weight="4">
                        <criteria_group_name>ASCII-Grafik</criteria_group_name>
                        <criterion type="boolean" weight="1">Die gegebene ASCII-Grafik ist im höchsten Scope hinterlegt.</criterion>
                        <criterion type="boolean" weight="1">Die gegebene ASCII-Grafik wird zeilenweise auf der Konsole ausgegeben.</criterion>
                        <criterion type="boolean" weight="1">Alle Funktionen, die Zugriff auf die ASCII-Grafik benötigen, greifen auf die Variable <i>bitmap</i> zu. Die ASCII-Grafik wird nicht als Parameter übergeben.</criterion>
                    </criteria_group>
                    <criteria_group weight="13">
                        <criteria_group_name>Funktion <code>charAt()</code></criteria_group_name>
                        <criterion type="boolean" weight="1">Die Funktion <code>charAt()</code> existiert und bekommt Koordinaten als Parameter übergeben.</criterion>
                        <criterion type="boolean" weight="2">Die Funktion <code>charAt()</code> gibt das Zeichen an den übergebenen Koordinaten zurück.</criterion>
                    </criteria_group>
                    <criteria_group weight="24">
                        <criteria_group_name>Funktion <code>setCharAt()</code></criteria_group_name>
                        <criterion type="boolean" weight="1">Die Funktion <code>setCharAt()</code> existiert und bekommt Koordinaten als Parameter übergeben.</criterion>
                        <criterion type="boolean" weight="2">Die Funktion <code>setCharAt()</code> ändert das Zeichen an den übergebenen Koordinaten zu einem <i>*</i>-Zeichen.</criterion>
                    </criteria_group>
                    <criteria_group weight="34">
                        <criteria_group_name>Funktion <code>floodFill()</code></criteria_group_name>
                        <criterion type="boolean" weight="1">Die Funktion <code>floodFill()</code> existiert und bekommt Koordinaten als Parameter übergeben.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>floodFill()</code> prüft, ob sich an den übergebenen Parametern ein <i>*</i>-Zeichen befindet.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>floodFill()</code> setzt ein <i>*</i>-Zeichen, fals sich an den übergebenen Koordinaten keines befindet.</criterion>
                        <criterion type="boolean" weight="1">Zur Implementierung der Funktion <code>floodFill()</code> werden die zuvor geschriebenen Funktionen verwendet.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>floodFill()</code> gibt die veränderte ASCII-Grafik zurück.</criterion>
                        <criterion type="boolean" weight="2">Mittels Rekursion setzt die Funktion <code>floodFill()</code> das <i>*</i>-Zeichen innerhalb einer Reihe bis zur Begrenzung.</criterion>
                        <criterion type="boolean" weight="2">Mittels Rekursion füllt die Funktion <code>floodFill()</code> die gesamte Fläche mit dem <i>*</i>-Zeichen.</criterion>
                        <criterion type="boolean" weight="1">Nicht existierende Koordinaten werden von der Funktion <code>floodFill()</code> ignoriert.</criterion>
                        <criterion type="boolean" weight="1">Die Funktion <code>floodFill()</code> funktioniert auch mit anderen ASCII-Grafiken.</criterion>
                    </criteria_group>
                    <criteria_group weight="25">
                        <criteria_group_name>Codequalität</criteria_group_name>
                        <criterion type="boolean" weight="1">Es wurde ES6 konformer Code geschrieben.</criterion>
                        <criterion type="boolean" weight="1">Es werden die in der Aufgabenstellung vorgegebenen Variablen- und Funktionsnamen verwendet.</criterion>
                        <criterion type="boolean" weight="1">Es wurden sinnvolle und beschreibende Variablen-/Funktionsnamen gewählt.</criterion>
                        <criterion type="boolean" weight="1">Variablennamen entsprechen den gelernten Konventionen (Konstanten in UPPERCASE, Funktionen in camelCase, …).</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine überflüssigen Variablen/Funktionen.</criterion>
                        <criterion type="boolean" weight="1">Eine Funktion erfüllt nur eine Funktionalität.</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine unnötige komplexen Verschachtelungen.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein doppelter Code. Mehrfach vorkommende Funktionalitäten sind in eigene Funktionen verpackt.</criterion>
                        <criterion type="boolean" weight="1">Nicht benötigte Kontrollstrukturen werden vermieden.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein ungenutzter/auskommentierter Code.</criterion>
                    </criteria_group>
                </criteria>
                <submission_instructions><p>Laden Sie die JavaScript-Datei zu der Einsendeaufgabe im Onlinecampus hoch.</p>
                   <p><b>Bitte beachten Sie</b>: Sobald Sie Ihre Aufgabenlösung hier eingereicht haben, wird
                    diese in der Regel zeitnah bewertet. Sie können die Aufgabe nicht noch einmal neu
                    einreichen, sobald wir mit der Bewertung begonnen haben, der Upload ist dann
                    gesperrt.</p>
                </submission_instructions>
            </assignment>
            <assignment>
                <name><?oxy_comment_start author="niclaskahlmeier" timestamp="20201126T154721+0100" comment="@Stefan Lektorat der Einsendeaufgabe"?>Fahrtüchtigkeitstester<?oxy_comment_end?></name>
                <content>
                    <figure width="80%">
                        <img src="images/alktest.jpg"/>
                    </figure>
                    <p>
                        Foto: TrafficJan82
                        <a href="https://commons.wikimedia.org/wiki/File:Common_alcoholic_beverages.jpg">https://commons.wikimedia.org/wiki/File:Common_alcoholic_beverages.jpg</a>
                    </p>
                    <h3>Einleitung</h3>
                    <p>Ihr Auftraggeber arbeitet an einer Mobile-App, die es erlaubt, eine grobe
                        Einschätzung vom eigenen aktuellen Blutalkoholgehalt zu bekommen. Die
                        Anwendung hat natürlich keine Rechtsverbindlichkeit – möglicherweise bringt
                        sie aber doch den einen oder anderen angetrunken Partygast davon ab, sich
                        hinters Steuer zu klemmen, Schlangenlinien zu erproben und Schafe zu
                        überfahren. Mit Sicherheit wird die App der Knaller auf der nächsten Party. </p>
                    <p>Das Ganze funktioniert folgendermaßen: Anfangs gibt der Anwender sein Gewicht
                        ein. Dann kann er, wann immer er möchte, Getränke in die App loggen. Die App
                        aktualisiert dann seinen geschätzen aktuellen Blutalkoholgehalt (EBAC) und
                        gibt diesen in Promille aus – inkl. eines Warnhinweises bezüglich der
                        Fahrtauglichkeit. </p>
                    <p>Der mobile Client ist bereits fertig. Ihre Aufgabe besteht darin, den Kern
                        der Anwendung zu entwickeln, die später auf dem Server läuft. Sie bekommen
                        fertige JSON-Datensätze geliefert, können sich aber nicht unbedingt darauf
                        verlassen, dass sie komplett fehlerfrei sind und der Spezifikation
                        entsprechen. Um Fehler zu vermeiden, müssen die Datensätze erst einmal auf
                        ihre Richtigkeit überprüft, d.h. validiert werden. Anschließend kümmern Sie
                        sich um die eigentliche Berechnung des Blutalkoholgehalts und die Ausgabe
                        einer Empfehlung. </p>
                    <h3>Technologien</h3>
                    <p>Setzen Sie JavaScript - ECMAScript 2015 (ES6) oder neuer ein. Externe JavaScript-Bibliotheken (oder aus Drittquellen übernommener Code) sind nicht zugelassen. Überprüft wird die Aufgabe im aktuellen Chrome Browser.</p>
                    <h3>Arbeitsschritt 1: Validierung entstandener Datensätze</h3>
                    <p>Die mobile App produziert Datensätze nach folgendem Format: </p>
                    <ul>
                        <li>Es handelt sich um ein Objekt mit den keys: weight und drinks. </li>
                        <li>Der Value von weight ist eine positive Zahl. </li>
                        <li>Der Value von drinks ist ein Array. </li>
                        <li>Das drinks-Array enthält seinerseits Objekte – es können beliebig viele
                            sein. </li>
                        <li>Die Objekte im drinks-Array haben die keys type und amount. </li>
                        <li>Der Value von type ist ein String. </li>
                        <li>Der Value von amount ist eine positive Ganzzahl. </li>
                    </ul>
                    <h3>Beispiel</h3>
                    <p>Jemand, der 89,5 Kilogramm wiegt und 5 Gläser Wein, dann 3 Flaschen Beer und
                        später nochmal 2 Gläser Wein getrunken hat, … dem ist vermutlich ziemlich
                        übel. Außerdem erhält er den nachfolgenden Datensatz (oder zumindest einen
                        inhaltlich vergleichbaren): </p>
                    <blockcode>{
   weight: 89.5,
   drinks: [
      {type: "wine", amount: 5},
      {type: "beer", amount: 3},
      {type: "wine", amount: 2}
   ]
}                 </blockcode>
                    <p>Schreiben Sie eine Funktion validateRecords, die einen Datensatz
                        entgegennimmt und Fehler feststellt, wenn der Datensatz von folgenden
                        Vorgaben abweicht: </p>
                    <ul>
                        <li>Der Datensatz hat das korrekte Format (siehe Auflistung oben). </li>
                        <li>Die benötigten Keys sind in den Objekten vorhanden. Es spielt dabei
                            keine Rolle, in welcher Reihenfolge die keys hinterlegt sind, d.h.
                            <code>{weight: …, drinks: …}</code> ist genauso korrekt wie
                            <code>{drinks: …, weight: …}</code>
                        </li>
                        <li>Die Anzahl der keys ist nicht festgelegt, d.h. es dürfen neben den
                            verlangten keys noch weitere vorhanden sein. </li>
                        <li>Das Gewicht enthält eine valide (positive) Zahl (62.5 wäre
                            beispielsweise zulässig). </li>
                        <li>Die Anzahl der Flaschen oder Gläser ist eine valide (positive) Ganzzahl
                            (1.5 Flaschen wären beispielsweise nicht zulässig). </li>
                    </ul>
                    <p>Ihre Funktion validateRecords soll ein Array zurückliefern, das alle
                        gefundenen Fehler enthält. Geben Sie das Array zur Kontrolle aus – jeweils
                        eine Zeile pro Fehlermeldung. </p>
                    <h3>Beispiel</h3>
                    <blockcode>{
   weight: "sixty",
   drinks: [
      {type: "wine", amount: 2.5},
      {type: "beer", amount: 3}
   ]
}
// > ['sixty is not a valid weight',
// '2.5 is not a valid number of bottles or glasses']                   </blockcode>
                    <h3>Arbeitsschritt 2: Berechnung des Blutalkoholgehalts</h3>
                    <p>Schreiben Sie eine Funktion bloodAlcoholContentFor, die einen Datensatz (wie
                        in Teil 1 beschrieben) entgegennimmt, den Blutalkoholgehalt berechnet und
                        anschließend in Promille zurückgibt. Geben Sie den berechneten Wert
                        anschließend in der Konsole aus. </p>
                    <p>Hier sind die Formeln, die Sie benötigen: </p>
                    <ul>
                        <li>Die sogenannte Widmark-Formel für den EBAC in % (estimated peak blood
                            alcohol concentration - Blutalkoholgehalt; siehe <a
                                href="https://en.wikipedia.org/wiki/Blood_alcohol_content"
                                >https://en.wikipedia.org/wiki/Blood_alcohol_content)</a>. <br/><code>ebac = (0.806 * Anzahl der Standarddrinks * 1.2) / (0.5 * Gewicht);</code>
                            <br/>Beachten Sie, dass es sich hier um eine vereinfachte Formel handelt
                            – Geschlecht und Zeitraum werden nicht beachtet. </li>
                        <li>Zur Berechnung des EBACs benötigen Sie neben dem Gewicht die Anzahl der
                            Standarddrinks. Deswegen müssen Sie zunächst die Menge des reinen
                            Alkohols im Datensatz berechnen und diese dann in eine Anzahl von
                            Standarddrinks umrechnen. Dazu dient folgende Formel:
                            <br/><code>Anzahl der Standarddrinks = Alkoholmenge in L * 1000 / STANDARD_DRINK_ALCOHOL_CONTENT</code>
                        </li>
                        <li>Hier noch die Formeln zur Berechnung der Alkoholmenge: <br/>
                            <code>Alkoholmenge im Wein = Anzahl der Gläser * WINE_GLASS_SIZE * WINE_ALC_PERCENTAGE / 100;</code>
                            <br/>
                            <code>Alkoholmenge im Bier = Anzahl der laschen * BEER_BOTTLE_SIZE * BEER_ALC_PERCENTAGE / 100;</code>
                        </li>
                        <li>Außerdem gelten folgende (vereinfachte) Vorgaben: <br/>
                            <blockcode>const WINE_GLASS_SIZE = 0.2;
const WINE_ALC_PERCENTAGE = 14;
const BEER_BOTTLE_SIZE = 0.7;
const BEER_ALC_PERCENTAGE = 5;
const STANDARD_DRINK_ALCOHOL_CONTENT = 17;                           </blockcode>
                        </li>
                        <li>Denken Sie auch daran, für die Ausgabe, den EBAC von % in Promille
                            umzurechnen. </li>
                    </ul>
                    <h3>Arbeitsschritt 3: Ausgabe der Empfehlung</h3>
                    <p>Geben Sie eine Bemerkung zum übergebenen Datensatz in der Konsole aus. Die
                        Bemerkung soll sich dabei am berechneten Blutalkoholgehalt orientieren. Ein
                        Beispiel zeigt die folgende Tabelle. Sie können aber natürlich eigene Werte
                        und eigene Texte verwenden. Wichtig ist, dass Sie wenigstens fünf
                        Abstufungen unterscheiden. </p>
                    <table>
                        <thead>
                            <tr>
                                <td>
                                    <b>BAC in Promille</b>
                                </td>
                                <td>
                                    <b>Ausgabe</b>
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>bis 0.29 </td>
                                <td>Sie sind vermutlich noch fahrtüchtig. Diese Angabe ist nicht
                                    rechtsverbindlich! </td>
                            </tr>
                            <tr>
                                <td>ab 0.3 </td>
                                <td>Sie haben vermutlich schon Konzentrationschwierigkeiten. Sie
                                    sollten nicht mehr fahren. </td>
                            </tr>
                            <tr>
                                <td>ab 0.6 </td>
                                <td>Fahren Sie nicht, das könnte Sie sonst den Führerschein kosten.
                                    Denken Sie auch an die armen Schafe. </td>
                            </tr>
                            <tr>
                                <td>ab 1.0 </td>
                                <td>Wie viele Handys halten Sie in der Hand? </td>
                            </tr>
                            <tr>
                                <td>ab 5.0 </td>
                                <td>Sie sind vermutlich tot – oder haben sich vertippt. </td>
                            </tr>
                        </tbody>
                    </table>
                    <h3>Hinweise</h3>
                    <ul>
                        <li>Sie müssen die Daten nicht vom Anwender per prompt, Formular oder
                            Ähnlichem erfragen. Gehen Sie einfach davon aus, dass sie die JSON-Daten
                            fertig geliefert bekommen. </li>
                        <li>Die in der Aufgabe genannten Angaben zur API sind grundsätzlich
                            verpflichtend. D.h. verwenden Sie die in der Aufgabenstellung genannten
                            Funktionsnamen, Argumente, Argumentnamen, Rückgabewerte, usw. Dazu
                            gehört auch der beschriebene Aufbau der JSON-Datensätze. </li>
                    </ul>
                    <h3>Tipps zur Vorgehensweise</h3>
                    <ul>
                        <li>Schreiben Sie nicht den kompletten Validierungscode innerhalb von
                            validateRecords. Entwickeln Sie stattdessen kleinere Funktionen, die
                            Teile der Funktionalität erledigen. </li>
                        <li>Selbstverständlich können Sie die Implementierung der verlangten
                            Funktionen jederzeit wieder in weitere Funktionen unterteilen. </li>
                        <li>Schreiben Sie kleine Einzelfunktionen, z.B. zur Berechnung der
                            Alkoholmenge in einem Weindatensatz. Sie sollten auch jede Formel als
                            eigene Funktion repräsentieren. </li>
                    </ul>
                    <p>Eine Demo der Einsendeaufgabe finden Sie unter: <a href="https://terminal.webmasters-akademie.dev">https://terminal.webmasters-akademie.dev</a></p>
                </content>
                <answer>
                    <p>Musterlösung</p>
                    <p><a href="https://github.com/Webmasters-Europe/js_basics_alk_test/releases/tag/1.9.0">https://github.com/Webmasters-Europe/js_basics_alk_test/releases/tag/1.9.0</a></p>
                </answer>

                <criteria>
                    <criteria_group weight="32">
                        <criteria_group_name>Funktion <code>validateRecords()</code></criteria_group_name>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob das Object die Keys <code>weight</code> und <code>drinks</code> besitzt.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob der Value von <code>weight</code> eine positive Zahl ist.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob der Value von <code>drinks</code> ein Array ist.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob das <code>drinks</code>-Array Objekte enthält.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob die Objecte im <code>drinks</code>-Array die Keys <code>type</code> und <code>amount</code> besitzen.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob der Value von <code>type</code> ein String ist.</criterion>
                        <criterion type="boolean" weight="1">Es wird geprüft, ob der Value von <code>amount</code> eine positive Ganzzahl ist.</criterion>
                        <criterion type="boolean" weight="1">Es wird ein Array mit allen gefundenen Unstimmigkeiten zurückgegeben.</criterion>
                    </criteria_group>
                    <criteria_group weight="32">
                        <criteria_group_name>Funktion <code>bloodAlcoholContentFor()</code></criteria_group_name>
                        <criterion type="boolean" weight="1">Zur Berechnung des Blutalkoholgehalts wird die Windmark-Formel verwendet.</criterion>
                        <criterion type="boolean" weight="1">Die Menge der Standarddrinks wird anhand der reinen Alkoholmenge berechnet.</criterion>
                        <criterion type="boolean" weight="1">Die reine Alkoholmenge wird aus der Gesamtalkoholmenge von Bier und Wein berechnet.</criterion>
                        <criterion type="boolean" weight="1">Die vorgegebenen Konstanten zur Berechnung des Blutalkoholgehalts werden verwendet.</criterion>
                        <criterion type="boolean" weight="1">Die Ausgabe des Blutalkoholgehalts erfolgt in Promille.</criterion>
                    </criteria_group>
                    <criterion type="boolean" weight="11">Ausgehend vom berechneten Blutalkoholgehalt wird die entsprechend vorgegebene Empfehlung ausgegeben.</criterion>
                    <criteria_group weight="25">
                        <criteria_group_name>Codequalität</criteria_group_name>
                        <criterion type="boolean" weight="1">Es wurde ES6 konformer Code geschrieben.</criterion>
                        <criterion type="boolean" weight="1">Es werden die in der Aufgabenstellung vorgegebenen Variablen- und Funktionsnamen verwendet.</criterion>
                        <criterion type="boolean" weight="1">Jede vorgegebene Formel wurde in eine eigene Funktion geschrieben.</criterion>
                        <criterion type="boolean" weight="1">Es wurden sinnvolle und beschreibende Variablen-/Funktionsnamen gewählt.</criterion>
                        <criterion type="boolean" weight="1">Variablennamen entsprechen den gelernten Konventionen (Konstanten in UPPERCASE, Funktionen in camelCase, …).</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine überflüssigen Variablen/Funktionen.</criterion>
                        <criterion type="boolean" weight="1">Eine Funktion erfüllt nur eine Funktionalität.</criterion>
                        <criterion type="boolean" weight="1">Es existieren keine unnötige komplexen Verschachtelungen.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein doppelter Code. Mehrfach vorkommende Funktionalitäten sind in eigene Funktionen verpackt.</criterion>
                        <criterion type="boolean" weight="1">Nicht benötigte Kontrollstrukturen werden vermieden.</criterion>
                        <criterion type="boolean" weight="1">Es existiert kein ungenutzter/auskommentierter Code.</criterion>
                    </criteria_group>
                </criteria>
                <submission_instructions><p>Laden Sie die JavaScript-Datei zu der Einsendeaufgabe im Onlinecampus hoch.</p>
                    <p><b>Bitte beachten Sie</b>: Sobald Sie Ihre Aufgabenlösung hier eingereicht haben, wird
                        diese in der Regel zeitnah bewertet. Sie können die Aufgabe nicht noch einmal neu
                        einreichen, sobald wir mit der Bewertung begonnen haben, der Upload ist dann
                        gesperrt.</p>
                </submission_instructions>
            </assignment>
        </lesson>
        <lesson id="Quellen">
            <lesson_name>Anhang C: Quellen &amp; Literaturhinweise</lesson_name>
            <h1>APA-Style</h1>
            <p>Zum Aufzeigen von Referenzen, Quellen und weiterführender Literatur verwenden wir den sogenannten <keyword>APA-Style</keyword>. Der APA-Style ist &#x2014; unter anderem &#x2014; ein System zur Kennzeichnung von Referenzen. Entwickelt wurde das System von der <i>American Psychological Association</i> (APA).</p>
            <p>Weitere Informationen dazu finden Sie auf <a href="http://en.wikipedia.org/wiki/Apa_style">Wikipedia</a> oder im <a href="https://owl.english.purdue.edu/owl/resource/560/01/">Online Writing Lab</a>. Eine APA-Style-Referenz besteht meist aus Nachname und Jahreszahl. Hier sehen Sie zwei Beispiele.</p>
            <blockquote>
                <p>Ein Indiz für die Aussagekraft eines Bezeichners ist auch seine Länge. Variablen, die aus nur einem Zeichen bestehen, sind meistens problematisch (Kellerwessel 2002).</p>
            </blockquote>
            <blockquote>
                <p>Douglas Crockford (2008) bezeichnet das <code>==</code> sogar als bösen Zwilling.</p>
            </blockquote>
            <p>Im folgenden Quellenverzeichnis können Sie die Referenzen dann nachschlagen.</p>
            <h1>Quellen</h1>
            <p><b>Beck K., Beedle M., van Bennekum A., Cockburn A., Cunningham W., Fowler M., Grenning J., Highsmith J., Hunt A., Jeffries R., Kern J., Marick B., Robert C. M., Mellor S., Schwaber K., Sutherland J., Thomas D. (2001).</b> Manifesto for Agile Software Development. Website, siehe <a href="http://agilemanifesto.org">agilemanifesto.org</a></p>
            <p><b>Beck K., Andres C. (November 2004).</b> Extreme Programming Explained: Embrace Change, Second Edition. Addison Wesley Professional</p>
            <p><b>Crockford D. (2001).</b> JavaScript: The World's Most Misunderstood Programming Language. Douglas Crockford's Wrrrld Wide Web (private Website). Betrachtet am 19.03.2015 unter <a href="http://javascript.crockford.com/javascript.html">http://javascript.crockford.com/javascript.html</a></p>
            <p><b>Crockford D. (Mai 2008).</b> JavaScript: The Good Parts: Working with the Shallow Grain of JavaScript. O'Reilly</p>
            <p><b>Ecma International (Juni 2015).</b> ECMAScript 2015 Language Specification. Standard ECMA-262, 6th Edition / June 2015</p>
            <p><b>Ecma International (Juni 2011).</b> ECMAScript Language Specification. Standard ECMA-262, 5.1 Edition / June 2011</p>
            <p><b>Eich B. (Oktober 2006).</b> Will there be a suggested file suffix for es4?. E-Mail in der ES4-discuss Mailing-Liste. Betrachtet am 16.01.2015 unter <a href="https://mail.mozilla.org/pipermail/es-discuss/2006-October/000133.html">https://mail.mozilla.org/pipermail/es-discuss/2006-October/000133.html</a></p>
            <p><b>Eich B., Krill P. (June 2008).</b> JavaScript creator ponders past, future. Ein Interview mit Brandon Eich auf Infoworld.com. Betrachtet am 19.03.2015 unter <a href="http://www.infoworld.com/article/2653798/application-development/javascript-creator-ponders-past--future.html">http://www.infoworld.com/article/2653798/application-development/javascript-creator-ponders-past--future.html</a></p>
            <p><b>Evans E.J. (August 2003).</b> Domain-Driven Design: Tackling Complexity in the Heart of Software. Addison Wesley</p>
            <p><b>Fenton S. (November 2012).</b> Compiling vs. Transpiling. Blogbeitrag auf Fentons Homepage. Betrachtet am 20.03.2015 unter <a href="https://www.stevefenton.co.uk/Content/Blog/Date/201211/Blog/Compiling-Vs-Transpiling/">https://www.stevefenton.co.uk/Content/Blog/Date/201211/Blog/Compiling-Vs-Transpiling/</a></p>
            <p><b>Flanagen D. (April 2011).</b> JavaScript: The Definitive Guide: Activate Your Web Pages. Auflage: 6. O'Reilly Media</p>
            <p><b>Fowler M., Beck K., Brant J., Opdykeet. W. (1999).</b> Refactoring, Improving the Design of Existing Code, Amsterdam: Addison-Wesley Longman</p>
            <p><b>Fowler M. (2002).</b> Patterns of Enterprise Application Architecture. Amsterdam: Addison-Wesley Longman</p>
            <p><b>Fowler M. (Februar 2013).</b> TransparentCompilation. Blogbeitrag in Fowler's Bliki. Betrachtet am 20.03.2015 unter <a href="http://martinfowler.com/bliki/TransparentCompilation.html">http://martinfowler.com/bliki/TransparentCompilation.html</a></p>
            <p><b>Goldberg A. (August 1981).</b> Introducing the Smalltalk-80 System.&#x00A0;Byte Magazine, Vol. 06 No. 08 &#8211; Smalltalk, 14-26. siehe <a href="https://archive.org/details/byte-magazine-1981-08">https://archive.org/details/byte-magazine-1981-08</a></p>
            <p><b>Goodman D., Morrison M. (2004).</b> The JavaScript Bible, 5th Edition. Wiley</p>
            <p><b>JavaScript Flaws. (2010).</b> Artikel in Ward Cunningham's C2-Wiki. Betrachtet am 23.03.2015 unter <a href="http://c2.com/cgi/wiki?JavaScriptFlaws">http://c2.com/cgi/wiki?JavaScriptFlaws</a></p>
            <p><b>Kellerwessel H. (2002).</b> Programmierrichtlinien in der Praxis. MITP</p>
            <p><b>Münz S. (2003).</b> JavaScript Referenz. Franzis</p>
            <p><b>Netscape and Sun Microsystems (Dezember 1995).</b> Netscape and Sun announce JavaScript, the open, cross-platform object scripting language for enterprise networks and the internet. siehe <a href="https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html">https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html</a>. Betrachtet am 16.04.2020</p>
            <p><b>Oestereich B. (1998).</b> Objektorientierte Softwareentwicklung: Analyse und Design mit der Unified Modeling Language. 4. aktualisierte Auflage. München; Wien: Oldenbourg. siehe <a href="http://www.oose.de/uml">www.oose.de/uml</a></p>
            <p><b>Mills C. (Juni 2012)</b> A Short History of JavaScript. Eintrag im W3C-Wiki. Betrachtet am 19.03.2015 unter<br/><a href="https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript">https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript</a></p>
            <p><b>Rauschmayer A. (März 2014).</b> Speaking JavaScript: An In-Depth Guide for Programmers. O'Reilly &amp; Associates</p>
            <p><b>Robson D. (August 1981).</b> Object-Oriented Software Systems.&#x00A0;Byte Magazine, Vol. 06 No. 08 &#8211; Smalltalk, 74-86. siehe <a href="https://archive.org/details/byte-magazine-1981-08">https://archive.org/details/byte-magazine-1981-08</a></p>
            <p><b>Sawall A. (April 2009).</b> Oracle kauft Sun. Newsartikel auf Golem. Betrachtet am 22.03.2015 unter <a href="http://www.golem.de/0904/66578.html">http://www.golem.de/0904/66578.html</a></p>
            <p><b>Severance C. (Februar 2012).</b> JavaScript: Designing a Language in 10 Days. Computer, Vol. 45, No. 2. Betrachtet am 22.03.2015 unter <a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html">http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html</a></p>
            <p><b>Ullenboom C. (Mai 2014).</b> Java ist auch eine Insel: <!--Insel 1:-->Das umfassende Handbuch. Galileo Computing; Auflage: 11</p>
            <p><b>Vermeulen A. et al. (2000).</b> The Elements of Java Style. Sigs Reference Library</p>
            <p><b>Wirfs-Brock A. (Januar 2015).</b> Commentary on the public mailing list <i>es-discuss@mozilla.org</i>. Betrachtet am 23.03.2015 unter <a href="https://esdiscuss.org/topic/javascript-2015#content-54">https://esdiscuss.org/topic/javascript-2015#content-54</a></p>
            <p><b>Wirfs-Brock R., McKean A. (November 2002).</b> Object Design: Roles, Responsibilities, and Collaborations. Pearson Education</p>
            <p><b>Young A. (Mai/July 2010).</b> History of JavaScript: Part 1 &#8211; 8. Blogbeitrag auf DailyJs.com. Betrachtet am 19.03.2015 unter <a href="http://dailyjs.com/tags.html#hoj">http://dailyjs.com/tags.html#hoj</a></p>
            <p><b>Zakas N. C. (unpublished).</b> Understanding ECMAScript 6. Leanpub.com</p>
        </lesson>
    </lessons>
</html>
